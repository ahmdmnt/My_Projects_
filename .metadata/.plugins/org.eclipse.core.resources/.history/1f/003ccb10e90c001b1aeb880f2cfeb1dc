/*
 * queue.c
 *
 *  Created on: Oct 13, 2020
 *      Author: Ahmed Montasser
 */

/*----Preprocessor Section--------------------------------------------------------------------*/
#include "queue.h"
/*--------------------------------------------------------------------------------------------*/


/*----Functions Definition--------------------------------------------------------------------*/
void QUEUE_enqueue(queue_type data)
{
	struct queue_node *nodes_slider;

	/* Allocate new node */
	struct queue_node *new_node = NEW_NODE_ALLOC(struct queue_node);

	/* (Runtime Error)>> BLOCK CODE: if new_node wasn't reserved */
	if( new_node == NULL_PTR )
	{
		printf("\n\nRuntime Error! No Heap Memory Available.\n\n");while(1);
	}

	/* Set the new node data */
	new_node->data = data;

	/* Set the new node next pointer to NULL */
	new_node->next_node = NULL_PTR;

	if( queue_head == NULL_PTR )
	{
		/* Set the head with new_node address */
		queue_head = new_node;
	}
	else
	{
		while( nodes_slider->next_node != NULL_PTR )
		{

		}
	}
}

/*----------------------------------------------------------------*/
void QUEUE_dequeue(void)
{
	/* Save the head value in another variable */
	struct stack_node *toBeDeleted = stack_head;;

	/* if stack empty do nothing */
	if( stack_head == NULL_PTR )
	{
		return;
	}

	/* Adjust stack head to next node */
	stack_head = stack_head->next_node;

	/* Delete the 1st node */
	free(toBeDeleted);
}

/*----------------------------------------------------------------*/
queue_type QUEUE_readTopValue(void)
{
	return stack_head->data;
}

/*----------------------------------------------------------------*/
void QUEUE_print(void)
{
	struct stack_node *nodes_slider=stack_head;

	if( stack_head == NULL_PTR)
	{
		return;
	}

	printf("Stack =");
	while( nodes_slider != NULL_PTR )
	{
		printf(" %d", nodes_slider->data);
		nodes_slider = nodes_slider->next_node;
	}
	printf("\n");
}
/*--------------------------------------------------------------------------------------------*/
