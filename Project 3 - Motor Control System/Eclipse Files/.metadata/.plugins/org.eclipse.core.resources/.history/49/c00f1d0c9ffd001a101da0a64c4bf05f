/*
 * appl.c
 *		Motor Control System:-
 *			- Motor Direction Control over Push Button; INT2 pin.
 *			- Motor Speed Control over Potentiometer; ADC7 pin.
 *			- Speed Display over LCD  connected over PORTD and PORTC.
 *			- Motor Connection through Driver:-
 *				- Input Pins (PB5 and PB4 pins).
 *				- PWM Input 'Speed control' (OC0 pin).
 *
 *  Created on: Sep 23, 2020
 *      Author: Ahmed Montasser
 */
/*MOTOR Static Configurations and Macros*/
#define MOTOR_IN1		PB5
#define MOTOR_IN2		PB4
#define MOTOR_PORT_DDR	DDR_B
#define MOTOR_PORT_PORT	PORT_B
/****************************************/
#define FORWARD_DIR		0
#define BACKWARD_DIR	1
/****************************************/
#include "PWM.h"
#include "DIO.h"

typedef struct
{
	uint8 speed;
	uint8  direction;
}MOTOR_config;

void DCMOTOR_motorOn(const MOTOR_config *m_config_ptr);
void DCMOTOR_motorOff(void);

int main(void)
{
	MOTOR_config motor_config = {0, FORWARD_DIR};

	while(TRUE)
	{
		motor_config.speed = 50;
		DCMOTOR_motorOn(&motor_config);
		APPROX_1SEC_DELAY;APPROX_1SEC_DELAY;APPROX_1SEC_DELAY;

		motor_config.speed = 100;
		DCMOTOR_motorOn(&motor_config);
		APPROX_1SEC_DELAY;APPROX_1SEC_DELAY;APPROX_1SEC_DELAY;
	}
	return 0;
}

void DCMOTOR_motorOn(const MOTOR_config *m_config_ptr)
{
	/*Speed Convertion to match exact PWM duty cycle*/
	 uint8 duty_cycle_value = ((float32)m_config_ptr->speed)/100*254;

	/*Define the PWM config enable variable*/
	configType_PWM0 pwm0_config = {PWM_F_CPU_1024, duty_cycle_value, NON_INVERTING_MODE};

	/*Set IN1(PD7) and IN2(PD6) as Output Pins and init value LOW*/
	__DIO_setPinDirection(MOTOR_PORT_DDR, MOTOR_IN1, OUTPUT_PIN);
	__DIO_setPinDirection(MOTOR_PORT_DDR, MOTOR_IN2, OUTPUT_PIN);
	__DIO_writeOutputPinValue(MOTOR_PORT_PORT, MOTOR_IN1, LOW);
	__DIO_writeOutputPinValue(MOTOR_PORT_PORT, MOTOR_IN2, LOW);

	/*Adjust Motor Speed by enabling PWM*/
	__PWM0_startModule(&pwm0_config);

	/*Adjust Motor Direction*/
	switch( m_config_ptr->direction )
	{
	case FORWARD_DIR:
		__DIO_writeOutputPinValue(MOTOR_PORT_PORT, MOTOR_IN1, HIGH);
		__DIO_writeOutputPinValue(MOTOR_PORT_PORT, MOTOR_IN2, LOW);
		break;
	case BACKWARD_DIR:
		__DIO_writeOutputPinValue(MOTOR_PORT_PORT, MOTOR_IN1, LOW);
		__DIO_writeOutputPinValue(MOTOR_PORT_PORT, MOTOR_IN2, HIGH);
		break;
	default:break;
	}
}

void DCMOTOR_motorOff(void)
{
	__PWM0_stopModule();
	__DIO_writeOutputPinValue(MOTOR_PORT_PORT, MOTOR_IN1, LOW);
	__DIO_writeOutputPinValue(MOTOR_PORT_PORT, MOTOR_IN2, LOW);
}
