
hmi_ecu.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001cd4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000144  00800060  00001cd4  00001d68  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000001d  008001a4  008001a4  00001eac  2**0
                  ALLOC
  3 .stab         00002274  00000000  00000000  00001eac  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000124b  00000000  00000000  00004120  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 0d 0a 	jmp	0x141a	; 0x141a <__vector_1>
       8:	0c 94 cc 0a 	jmp	0x1598	; 0x1598 <__vector_2>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 a7 0c 	jmp	0x194e	; 0x194e <__vector_6>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 7a 0c 	jmp	0x18f4	; 0x18f4 <__vector_19>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e4 ed       	ldi	r30, 0xD4	; 212
      68:	fc e1       	ldi	r31, 0x1C	; 28
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a4 3a       	cpi	r26, 0xA4	; 164
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a4 ea       	ldi	r26, 0xA4	; 164
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a1 3c       	cpi	r26, 0xC1	; 193
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 fb 04 	call	0x9f6	; 0x9f6 <main>
      8a:	0c 94 68 0e 	jmp	0x1cd0	; 0x1cd0 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__DIO_setPinDirection>:
/** Functions Definitions ****************************************************/

/*** Description:-
 * Adjust the DDR_x Registers for Desired PXX with needed direction */
void  __DIO_setPinDirection(uint8 port_name,uint8 pin_name,uint8 direction)
{
      92:	df 93       	push	r29
      94:	cf 93       	push	r28
      96:	00 d0       	rcall	.+0      	; 0x98 <__DIO_setPinDirection+0x6>
      98:	0f 92       	push	r0
      9a:	cd b7       	in	r28, 0x3d	; 61
      9c:	de b7       	in	r29, 0x3e	; 62
      9e:	89 83       	std	Y+1, r24	; 0x01
      a0:	6a 83       	std	Y+2, r22	; 0x02
      a2:	4b 83       	std	Y+3, r20	; 0x03
    if( direction == OUTPUT_PIN )
      a4:	8b 81       	ldd	r24, Y+3	; 0x03
      a6:	81 30       	cpi	r24, 0x01	; 1
      a8:	29 f5       	brne	.+74     	; 0xf4 <__DIO_setPinDirection+0x62>
    {
        SET_BIT(*ddr_regs[port_name], pin_name);
      aa:	89 81       	ldd	r24, Y+1	; 0x01
      ac:	88 2f       	mov	r24, r24
      ae:	90 e0       	ldi	r25, 0x00	; 0
      b0:	88 0f       	add	r24, r24
      b2:	99 1f       	adc	r25, r25
      b4:	fc 01       	movw	r30, r24
      b6:	ea 57       	subi	r30, 0x7A	; 122
      b8:	fe 4f       	sbci	r31, 0xFE	; 254
      ba:	a0 81       	ld	r26, Z
      bc:	b1 81       	ldd	r27, Z+1	; 0x01
      be:	89 81       	ldd	r24, Y+1	; 0x01
      c0:	88 2f       	mov	r24, r24
      c2:	90 e0       	ldi	r25, 0x00	; 0
      c4:	88 0f       	add	r24, r24
      c6:	99 1f       	adc	r25, r25
      c8:	fc 01       	movw	r30, r24
      ca:	ea 57       	subi	r30, 0x7A	; 122
      cc:	fe 4f       	sbci	r31, 0xFE	; 254
      ce:	01 90       	ld	r0, Z+
      d0:	f0 81       	ld	r31, Z
      d2:	e0 2d       	mov	r30, r0
      d4:	80 81       	ld	r24, Z
      d6:	48 2f       	mov	r20, r24
      d8:	8a 81       	ldd	r24, Y+2	; 0x02
      da:	28 2f       	mov	r18, r24
      dc:	30 e0       	ldi	r19, 0x00	; 0
      de:	81 e0       	ldi	r24, 0x01	; 1
      e0:	90 e0       	ldi	r25, 0x00	; 0
      e2:	02 2e       	mov	r0, r18
      e4:	02 c0       	rjmp	.+4      	; 0xea <__DIO_setPinDirection+0x58>
      e6:	88 0f       	add	r24, r24
      e8:	99 1f       	adc	r25, r25
      ea:	0a 94       	dec	r0
      ec:	e2 f7       	brpl	.-8      	; 0xe6 <__DIO_setPinDirection+0x54>
      ee:	84 2b       	or	r24, r20
      f0:	8c 93       	st	X, r24
      f2:	28 c0       	rjmp	.+80     	; 0x144 <__DIO_setPinDirection+0xb2>
    }
    else if( direction == INPUT_PIN )
      f4:	8b 81       	ldd	r24, Y+3	; 0x03
      f6:	88 23       	and	r24, r24
      f8:	29 f5       	brne	.+74     	; 0x144 <__DIO_setPinDirection+0xb2>
    {
        CLR_BIT(*ddr_regs[port_name], pin_name);
      fa:	89 81       	ldd	r24, Y+1	; 0x01
      fc:	88 2f       	mov	r24, r24
      fe:	90 e0       	ldi	r25, 0x00	; 0
     100:	88 0f       	add	r24, r24
     102:	99 1f       	adc	r25, r25
     104:	fc 01       	movw	r30, r24
     106:	ea 57       	subi	r30, 0x7A	; 122
     108:	fe 4f       	sbci	r31, 0xFE	; 254
     10a:	a0 81       	ld	r26, Z
     10c:	b1 81       	ldd	r27, Z+1	; 0x01
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	88 2f       	mov	r24, r24
     112:	90 e0       	ldi	r25, 0x00	; 0
     114:	88 0f       	add	r24, r24
     116:	99 1f       	adc	r25, r25
     118:	fc 01       	movw	r30, r24
     11a:	ea 57       	subi	r30, 0x7A	; 122
     11c:	fe 4f       	sbci	r31, 0xFE	; 254
     11e:	01 90       	ld	r0, Z+
     120:	f0 81       	ld	r31, Z
     122:	e0 2d       	mov	r30, r0
     124:	80 81       	ld	r24, Z
     126:	48 2f       	mov	r20, r24
     128:	8a 81       	ldd	r24, Y+2	; 0x02
     12a:	28 2f       	mov	r18, r24
     12c:	30 e0       	ldi	r19, 0x00	; 0
     12e:	81 e0       	ldi	r24, 0x01	; 1
     130:	90 e0       	ldi	r25, 0x00	; 0
     132:	02 2e       	mov	r0, r18
     134:	02 c0       	rjmp	.+4      	; 0x13a <__DIO_setPinDirection+0xa8>
     136:	88 0f       	add	r24, r24
     138:	99 1f       	adc	r25, r25
     13a:	0a 94       	dec	r0
     13c:	e2 f7       	brpl	.-8      	; 0x136 <__DIO_setPinDirection+0xa4>
     13e:	80 95       	com	r24
     140:	84 23       	and	r24, r20
     142:	8c 93       	st	X, r24
    }
    else{}
}
     144:	0f 90       	pop	r0
     146:	0f 90       	pop	r0
     148:	0f 90       	pop	r0
     14a:	cf 91       	pop	r28
     14c:	df 91       	pop	r29
     14e:	08 95       	ret

00000150 <__DIO_enableInternalPullupResistance>:


/*** Description:-
 * Enable Internal Pullup Resistor for the Input Pin */
void  __DIO_enableInternalPullupResistance(uint8 port_name,uint8 pin_name)
{
     150:	df 93       	push	r29
     152:	cf 93       	push	r28
     154:	00 d0       	rcall	.+0      	; 0x156 <__DIO_enableInternalPullupResistance+0x6>
     156:	cd b7       	in	r28, 0x3d	; 61
     158:	de b7       	in	r29, 0x3e	; 62
     15a:	89 83       	std	Y+1, r24	; 0x01
     15c:	6a 83       	std	Y+2, r22	; 0x02
    SET_BIT(*port_regs[port_name], pin_name);
     15e:	89 81       	ldd	r24, Y+1	; 0x01
     160:	88 2f       	mov	r24, r24
     162:	90 e0       	ldi	r25, 0x00	; 0
     164:	88 0f       	add	r24, r24
     166:	99 1f       	adc	r25, r25
     168:	fc 01       	movw	r30, r24
     16a:	ea 56       	subi	r30, 0x6A	; 106
     16c:	fe 4f       	sbci	r31, 0xFE	; 254
     16e:	a0 81       	ld	r26, Z
     170:	b1 81       	ldd	r27, Z+1	; 0x01
     172:	89 81       	ldd	r24, Y+1	; 0x01
     174:	88 2f       	mov	r24, r24
     176:	90 e0       	ldi	r25, 0x00	; 0
     178:	88 0f       	add	r24, r24
     17a:	99 1f       	adc	r25, r25
     17c:	fc 01       	movw	r30, r24
     17e:	ea 56       	subi	r30, 0x6A	; 106
     180:	fe 4f       	sbci	r31, 0xFE	; 254
     182:	01 90       	ld	r0, Z+
     184:	f0 81       	ld	r31, Z
     186:	e0 2d       	mov	r30, r0
     188:	80 81       	ld	r24, Z
     18a:	48 2f       	mov	r20, r24
     18c:	8a 81       	ldd	r24, Y+2	; 0x02
     18e:	28 2f       	mov	r18, r24
     190:	30 e0       	ldi	r19, 0x00	; 0
     192:	81 e0       	ldi	r24, 0x01	; 1
     194:	90 e0       	ldi	r25, 0x00	; 0
     196:	02 2e       	mov	r0, r18
     198:	02 c0       	rjmp	.+4      	; 0x19e <__DIO_enableInternalPullupResistance+0x4e>
     19a:	88 0f       	add	r24, r24
     19c:	99 1f       	adc	r25, r25
     19e:	0a 94       	dec	r0
     1a0:	e2 f7       	brpl	.-8      	; 0x19a <__DIO_enableInternalPullupResistance+0x4a>
     1a2:	84 2b       	or	r24, r20
     1a4:	8c 93       	st	X, r24
}
     1a6:	0f 90       	pop	r0
     1a8:	0f 90       	pop	r0
     1aa:	cf 91       	pop	r28
     1ac:	df 91       	pop	r29
     1ae:	08 95       	ret

000001b0 <__DIO_writeOutputPinValue>:


/*** Description:-
 * Output a Digital Value over the Output Pin */
void  __DIO_writeOutputPinValue(uint8 port_name,uint8 pin_name,uint8 value)
{
     1b0:	df 93       	push	r29
     1b2:	cf 93       	push	r28
     1b4:	00 d0       	rcall	.+0      	; 0x1b6 <__DIO_writeOutputPinValue+0x6>
     1b6:	0f 92       	push	r0
     1b8:	cd b7       	in	r28, 0x3d	; 61
     1ba:	de b7       	in	r29, 0x3e	; 62
     1bc:	89 83       	std	Y+1, r24	; 0x01
     1be:	6a 83       	std	Y+2, r22	; 0x02
     1c0:	4b 83       	std	Y+3, r20	; 0x03
    if( value == HIGH )
     1c2:	8b 81       	ldd	r24, Y+3	; 0x03
     1c4:	81 30       	cpi	r24, 0x01	; 1
     1c6:	29 f5       	brne	.+74     	; 0x212 <__DIO_writeOutputPinValue+0x62>
    {
        SET_BIT(*port_regs[port_name], pin_name);
     1c8:	89 81       	ldd	r24, Y+1	; 0x01
     1ca:	88 2f       	mov	r24, r24
     1cc:	90 e0       	ldi	r25, 0x00	; 0
     1ce:	88 0f       	add	r24, r24
     1d0:	99 1f       	adc	r25, r25
     1d2:	fc 01       	movw	r30, r24
     1d4:	ea 56       	subi	r30, 0x6A	; 106
     1d6:	fe 4f       	sbci	r31, 0xFE	; 254
     1d8:	a0 81       	ld	r26, Z
     1da:	b1 81       	ldd	r27, Z+1	; 0x01
     1dc:	89 81       	ldd	r24, Y+1	; 0x01
     1de:	88 2f       	mov	r24, r24
     1e0:	90 e0       	ldi	r25, 0x00	; 0
     1e2:	88 0f       	add	r24, r24
     1e4:	99 1f       	adc	r25, r25
     1e6:	fc 01       	movw	r30, r24
     1e8:	ea 56       	subi	r30, 0x6A	; 106
     1ea:	fe 4f       	sbci	r31, 0xFE	; 254
     1ec:	01 90       	ld	r0, Z+
     1ee:	f0 81       	ld	r31, Z
     1f0:	e0 2d       	mov	r30, r0
     1f2:	80 81       	ld	r24, Z
     1f4:	48 2f       	mov	r20, r24
     1f6:	8a 81       	ldd	r24, Y+2	; 0x02
     1f8:	28 2f       	mov	r18, r24
     1fa:	30 e0       	ldi	r19, 0x00	; 0
     1fc:	81 e0       	ldi	r24, 0x01	; 1
     1fe:	90 e0       	ldi	r25, 0x00	; 0
     200:	02 2e       	mov	r0, r18
     202:	02 c0       	rjmp	.+4      	; 0x208 <__DIO_writeOutputPinValue+0x58>
     204:	88 0f       	add	r24, r24
     206:	99 1f       	adc	r25, r25
     208:	0a 94       	dec	r0
     20a:	e2 f7       	brpl	.-8      	; 0x204 <__DIO_writeOutputPinValue+0x54>
     20c:	84 2b       	or	r24, r20
     20e:	8c 93       	st	X, r24
     210:	28 c0       	rjmp	.+80     	; 0x262 <__DIO_writeOutputPinValue+0xb2>
    }
    else if( value == LOW )
     212:	8b 81       	ldd	r24, Y+3	; 0x03
     214:	88 23       	and	r24, r24
     216:	29 f5       	brne	.+74     	; 0x262 <__DIO_writeOutputPinValue+0xb2>
    {
        CLR_BIT(*port_regs[port_name], pin_name);
     218:	89 81       	ldd	r24, Y+1	; 0x01
     21a:	88 2f       	mov	r24, r24
     21c:	90 e0       	ldi	r25, 0x00	; 0
     21e:	88 0f       	add	r24, r24
     220:	99 1f       	adc	r25, r25
     222:	fc 01       	movw	r30, r24
     224:	ea 56       	subi	r30, 0x6A	; 106
     226:	fe 4f       	sbci	r31, 0xFE	; 254
     228:	a0 81       	ld	r26, Z
     22a:	b1 81       	ldd	r27, Z+1	; 0x01
     22c:	89 81       	ldd	r24, Y+1	; 0x01
     22e:	88 2f       	mov	r24, r24
     230:	90 e0       	ldi	r25, 0x00	; 0
     232:	88 0f       	add	r24, r24
     234:	99 1f       	adc	r25, r25
     236:	fc 01       	movw	r30, r24
     238:	ea 56       	subi	r30, 0x6A	; 106
     23a:	fe 4f       	sbci	r31, 0xFE	; 254
     23c:	01 90       	ld	r0, Z+
     23e:	f0 81       	ld	r31, Z
     240:	e0 2d       	mov	r30, r0
     242:	80 81       	ld	r24, Z
     244:	48 2f       	mov	r20, r24
     246:	8a 81       	ldd	r24, Y+2	; 0x02
     248:	28 2f       	mov	r18, r24
     24a:	30 e0       	ldi	r19, 0x00	; 0
     24c:	81 e0       	ldi	r24, 0x01	; 1
     24e:	90 e0       	ldi	r25, 0x00	; 0
     250:	02 2e       	mov	r0, r18
     252:	02 c0       	rjmp	.+4      	; 0x258 <__DIO_writeOutputPinValue+0xa8>
     254:	88 0f       	add	r24, r24
     256:	99 1f       	adc	r25, r25
     258:	0a 94       	dec	r0
     25a:	e2 f7       	brpl	.-8      	; 0x254 <__DIO_writeOutputPinValue+0xa4>
     25c:	80 95       	com	r24
     25e:	84 23       	and	r24, r20
     260:	8c 93       	st	X, r24
    }
    else{}
}
     262:	0f 90       	pop	r0
     264:	0f 90       	pop	r0
     266:	0f 90       	pop	r0
     268:	cf 91       	pop	r28
     26a:	df 91       	pop	r29
     26c:	08 95       	ret

0000026e <__DIO_readInputPinValue>:


/*** Description:-
 * Read and fetch the Digital Value from a Pin */
uint8 __DIO_readInputPinValue(uint8 port_name,uint8 pin_name)
{
     26e:	df 93       	push	r29
     270:	cf 93       	push	r28
     272:	00 d0       	rcall	.+0      	; 0x274 <__DIO_readInputPinValue+0x6>
     274:	cd b7       	in	r28, 0x3d	; 61
     276:	de b7       	in	r29, 0x3e	; 62
     278:	89 83       	std	Y+1, r24	; 0x01
     27a:	6a 83       	std	Y+2, r22	; 0x02
    return READ_BIT(*pin_regs[port_name], pin_name);
     27c:	89 81       	ldd	r24, Y+1	; 0x01
     27e:	88 2f       	mov	r24, r24
     280:	90 e0       	ldi	r25, 0x00	; 0
     282:	88 0f       	add	r24, r24
     284:	99 1f       	adc	r25, r25
     286:	fc 01       	movw	r30, r24
     288:	e2 57       	subi	r30, 0x72	; 114
     28a:	fe 4f       	sbci	r31, 0xFE	; 254
     28c:	01 90       	ld	r0, Z+
     28e:	f0 81       	ld	r31, Z
     290:	e0 2d       	mov	r30, r0
     292:	80 81       	ld	r24, Z
     294:	48 2f       	mov	r20, r24
     296:	50 e0       	ldi	r21, 0x00	; 0
     298:	8a 81       	ldd	r24, Y+2	; 0x02
     29a:	28 2f       	mov	r18, r24
     29c:	30 e0       	ldi	r19, 0x00	; 0
     29e:	81 e0       	ldi	r24, 0x01	; 1
     2a0:	90 e0       	ldi	r25, 0x00	; 0
     2a2:	02 c0       	rjmp	.+4      	; 0x2a8 <__DIO_readInputPinValue+0x3a>
     2a4:	88 0f       	add	r24, r24
     2a6:	99 1f       	adc	r25, r25
     2a8:	2a 95       	dec	r18
     2aa:	e2 f7       	brpl	.-8      	; 0x2a4 <__DIO_readInputPinValue+0x36>
     2ac:	9a 01       	movw	r18, r20
     2ae:	28 23       	and	r18, r24
     2b0:	39 23       	and	r19, r25
     2b2:	8a 81       	ldd	r24, Y+2	; 0x02
     2b4:	88 2f       	mov	r24, r24
     2b6:	90 e0       	ldi	r25, 0x00	; 0
     2b8:	a9 01       	movw	r20, r18
     2ba:	02 c0       	rjmp	.+4      	; 0x2c0 <__DIO_readInputPinValue+0x52>
     2bc:	55 95       	asr	r21
     2be:	47 95       	ror	r20
     2c0:	8a 95       	dec	r24
     2c2:	e2 f7       	brpl	.-8      	; 0x2bc <__DIO_readInputPinValue+0x4e>
     2c4:	ca 01       	movw	r24, r20
}
     2c6:	0f 90       	pop	r0
     2c8:	0f 90       	pop	r0
     2ca:	cf 91       	pop	r28
     2cc:	df 91       	pop	r29
     2ce:	08 95       	ret

000002d0 <__DIO_toggleOutputPinValue>:


/*** Description:-
 * Toggle the Value of Output Pin */
void  __DIO_toggleOutputPinValue(uint8 port_name,uint8 pin_name)
{
     2d0:	df 93       	push	r29
     2d2:	cf 93       	push	r28
     2d4:	00 d0       	rcall	.+0      	; 0x2d6 <__DIO_toggleOutputPinValue+0x6>
     2d6:	cd b7       	in	r28, 0x3d	; 61
     2d8:	de b7       	in	r29, 0x3e	; 62
     2da:	89 83       	std	Y+1, r24	; 0x01
     2dc:	6a 83       	std	Y+2, r22	; 0x02
    TGL_BIT(*port_regs[port_name], pin_name);
     2de:	89 81       	ldd	r24, Y+1	; 0x01
     2e0:	88 2f       	mov	r24, r24
     2e2:	90 e0       	ldi	r25, 0x00	; 0
     2e4:	88 0f       	add	r24, r24
     2e6:	99 1f       	adc	r25, r25
     2e8:	fc 01       	movw	r30, r24
     2ea:	ea 56       	subi	r30, 0x6A	; 106
     2ec:	fe 4f       	sbci	r31, 0xFE	; 254
     2ee:	a0 81       	ld	r26, Z
     2f0:	b1 81       	ldd	r27, Z+1	; 0x01
     2f2:	89 81       	ldd	r24, Y+1	; 0x01
     2f4:	88 2f       	mov	r24, r24
     2f6:	90 e0       	ldi	r25, 0x00	; 0
     2f8:	88 0f       	add	r24, r24
     2fa:	99 1f       	adc	r25, r25
     2fc:	fc 01       	movw	r30, r24
     2fe:	ea 56       	subi	r30, 0x6A	; 106
     300:	fe 4f       	sbci	r31, 0xFE	; 254
     302:	01 90       	ld	r0, Z+
     304:	f0 81       	ld	r31, Z
     306:	e0 2d       	mov	r30, r0
     308:	80 81       	ld	r24, Z
     30a:	48 2f       	mov	r20, r24
     30c:	8a 81       	ldd	r24, Y+2	; 0x02
     30e:	28 2f       	mov	r18, r24
     310:	30 e0       	ldi	r19, 0x00	; 0
     312:	81 e0       	ldi	r24, 0x01	; 1
     314:	90 e0       	ldi	r25, 0x00	; 0
     316:	02 2e       	mov	r0, r18
     318:	02 c0       	rjmp	.+4      	; 0x31e <__DIO_toggleOutputPinValue+0x4e>
     31a:	88 0f       	add	r24, r24
     31c:	99 1f       	adc	r25, r25
     31e:	0a 94       	dec	r0
     320:	e2 f7       	brpl	.-8      	; 0x31a <__DIO_toggleOutputPinValue+0x4a>
     322:	84 27       	eor	r24, r20
     324:	8c 93       	st	X, r24
}
     326:	0f 90       	pop	r0
     328:	0f 90       	pop	r0
     32a:	cf 91       	pop	r28
     32c:	df 91       	pop	r29
     32e:	08 95       	ret

00000330 <__DIO_setPortDirection>:


/*** Description:-
 * Adjust the DDR_x Registers for Whole PORT with needed direction */
void  __DIO_setPortDirection(uint8 port_name, uint8 direction)
{
     330:	df 93       	push	r29
     332:	cf 93       	push	r28
     334:	00 d0       	rcall	.+0      	; 0x336 <__DIO_setPortDirection+0x6>
     336:	cd b7       	in	r28, 0x3d	; 61
     338:	de b7       	in	r29, 0x3e	; 62
     33a:	89 83       	std	Y+1, r24	; 0x01
     33c:	6a 83       	std	Y+2, r22	; 0x02
    if( direction == OUTPUT_PORT )
     33e:	8a 81       	ldd	r24, Y+2	; 0x02
     340:	81 30       	cpi	r24, 0x01	; 1
     342:	71 f4       	brne	.+28     	; 0x360 <__DIO_setPortDirection+0x30>
    {
        *ddr_regs[port_name] = 0xFF;
     344:	89 81       	ldd	r24, Y+1	; 0x01
     346:	88 2f       	mov	r24, r24
     348:	90 e0       	ldi	r25, 0x00	; 0
     34a:	88 0f       	add	r24, r24
     34c:	99 1f       	adc	r25, r25
     34e:	fc 01       	movw	r30, r24
     350:	ea 57       	subi	r30, 0x7A	; 122
     352:	fe 4f       	sbci	r31, 0xFE	; 254
     354:	01 90       	ld	r0, Z+
     356:	f0 81       	ld	r31, Z
     358:	e0 2d       	mov	r30, r0
     35a:	8f ef       	ldi	r24, 0xFF	; 255
     35c:	80 83       	st	Z, r24
     35e:	0f c0       	rjmp	.+30     	; 0x37e <__DIO_setPortDirection+0x4e>
    }
    else if( direction == INPUT_PORT )
     360:	8a 81       	ldd	r24, Y+2	; 0x02
     362:	88 23       	and	r24, r24
     364:	61 f4       	brne	.+24     	; 0x37e <__DIO_setPortDirection+0x4e>
    {
        *ddr_regs[port_name] = 0x00;
     366:	89 81       	ldd	r24, Y+1	; 0x01
     368:	88 2f       	mov	r24, r24
     36a:	90 e0       	ldi	r25, 0x00	; 0
     36c:	88 0f       	add	r24, r24
     36e:	99 1f       	adc	r25, r25
     370:	fc 01       	movw	r30, r24
     372:	ea 57       	subi	r30, 0x7A	; 122
     374:	fe 4f       	sbci	r31, 0xFE	; 254
     376:	01 90       	ld	r0, Z+
     378:	f0 81       	ld	r31, Z
     37a:	e0 2d       	mov	r30, r0
     37c:	10 82       	st	Z, r1
    }
    else{}
}
     37e:	0f 90       	pop	r0
     380:	0f 90       	pop	r0
     382:	cf 91       	pop	r28
     384:	df 91       	pop	r29
     386:	08 95       	ret

00000388 <__DIO_enablePortInternalPullupResistance>:


/*** Description:-
 * Enable Internal Pullup Resistor for whole PORT Input Pins */
void  __DIO_enablePortInternalPullupResistance(uint8 port_name)
{
     388:	df 93       	push	r29
     38a:	cf 93       	push	r28
     38c:	0f 92       	push	r0
     38e:	cd b7       	in	r28, 0x3d	; 61
     390:	de b7       	in	r29, 0x3e	; 62
     392:	89 83       	std	Y+1, r24	; 0x01
    *port_regs[port_name] = 0xFF;
     394:	89 81       	ldd	r24, Y+1	; 0x01
     396:	88 2f       	mov	r24, r24
     398:	90 e0       	ldi	r25, 0x00	; 0
     39a:	88 0f       	add	r24, r24
     39c:	99 1f       	adc	r25, r25
     39e:	fc 01       	movw	r30, r24
     3a0:	ea 56       	subi	r30, 0x6A	; 106
     3a2:	fe 4f       	sbci	r31, 0xFE	; 254
     3a4:	01 90       	ld	r0, Z+
     3a6:	f0 81       	ld	r31, Z
     3a8:	e0 2d       	mov	r30, r0
     3aa:	8f ef       	ldi	r24, 0xFF	; 255
     3ac:	80 83       	st	Z, r24
}
     3ae:	0f 90       	pop	r0
     3b0:	cf 91       	pop	r28
     3b2:	df 91       	pop	r29
     3b4:	08 95       	ret

000003b6 <__DIO_writeOutputPortValue>:


/*** Description:-
 * Output a Digital Values over PORT Output Pins */
void  __DIO_writeOutputPortValue(uint8 port_name,uint8 value)
{
     3b6:	df 93       	push	r29
     3b8:	cf 93       	push	r28
     3ba:	00 d0       	rcall	.+0      	; 0x3bc <__DIO_writeOutputPortValue+0x6>
     3bc:	cd b7       	in	r28, 0x3d	; 61
     3be:	de b7       	in	r29, 0x3e	; 62
     3c0:	89 83       	std	Y+1, r24	; 0x01
     3c2:	6a 83       	std	Y+2, r22	; 0x02
    *port_regs[port_name] = value;
     3c4:	89 81       	ldd	r24, Y+1	; 0x01
     3c6:	88 2f       	mov	r24, r24
     3c8:	90 e0       	ldi	r25, 0x00	; 0
     3ca:	88 0f       	add	r24, r24
     3cc:	99 1f       	adc	r25, r25
     3ce:	fc 01       	movw	r30, r24
     3d0:	ea 56       	subi	r30, 0x6A	; 106
     3d2:	fe 4f       	sbci	r31, 0xFE	; 254
     3d4:	01 90       	ld	r0, Z+
     3d6:	f0 81       	ld	r31, Z
     3d8:	e0 2d       	mov	r30, r0
     3da:	8a 81       	ldd	r24, Y+2	; 0x02
     3dc:	80 83       	st	Z, r24
}
     3de:	0f 90       	pop	r0
     3e0:	0f 90       	pop	r0
     3e2:	cf 91       	pop	r28
     3e4:	df 91       	pop	r29
     3e6:	08 95       	ret

000003e8 <__DIO_readInputPortValue>:


/*** Description:-
 * Read and fetch the Digital Values from PORT Pins */
uint8 __DIO_readInputPortValue(uint8 port_name)
{
     3e8:	df 93       	push	r29
     3ea:	cf 93       	push	r28
     3ec:	0f 92       	push	r0
     3ee:	cd b7       	in	r28, 0x3d	; 61
     3f0:	de b7       	in	r29, 0x3e	; 62
     3f2:	89 83       	std	Y+1, r24	; 0x01
    return *pin_regs[port_name];
     3f4:	89 81       	ldd	r24, Y+1	; 0x01
     3f6:	88 2f       	mov	r24, r24
     3f8:	90 e0       	ldi	r25, 0x00	; 0
     3fa:	88 0f       	add	r24, r24
     3fc:	99 1f       	adc	r25, r25
     3fe:	fc 01       	movw	r30, r24
     400:	e2 57       	subi	r30, 0x72	; 114
     402:	fe 4f       	sbci	r31, 0xFE	; 254
     404:	01 90       	ld	r0, Z+
     406:	f0 81       	ld	r31, Z
     408:	e0 2d       	mov	r30, r0
     40a:	80 81       	ld	r24, Z
}
     40c:	0f 90       	pop	r0
     40e:	cf 91       	pop	r28
     410:	df 91       	pop	r29
     412:	08 95       	ret

00000414 <_LCD_init>:
/**** Variable Definitions  ****/
static uint8 cycle;

/**** Function Prototypes ****/
void _LCD_init(void)
{
     414:	df 93       	push	r29
     416:	cf 93       	push	r28
     418:	cd b7       	in	r28, 0x3d	; 61
     41a:	de b7       	in	r29, 0x3e	; 62
	/* Set Direction for Rs and RW and En Pins as Ouput */
	__DIO_setPinDirection(LCD_CTRL_PORT_DIR, RS, OUTPUT_PIN);
     41c:	83 e0       	ldi	r24, 0x03	; 3
     41e:	65 e0       	ldi	r22, 0x05	; 5
     420:	41 e0       	ldi	r20, 0x01	; 1
     422:	0e 94 49 00 	call	0x92	; 0x92 <__DIO_setPinDirection>
	__DIO_setPinDirection(LCD_CTRL_PORT_DIR, RW, OUTPUT_PIN);
     426:	83 e0       	ldi	r24, 0x03	; 3
     428:	66 e0       	ldi	r22, 0x06	; 6
     42a:	41 e0       	ldi	r20, 0x01	; 1
     42c:	0e 94 49 00 	call	0x92	; 0x92 <__DIO_setPinDirection>
	__DIO_setPinDirection(LCD_CTRL_PORT_DIR, EN, OUTPUT_PIN);
     430:	83 e0       	ldi	r24, 0x03	; 3
     432:	67 e0       	ldi	r22, 0x07	; 7
     434:	41 e0       	ldi	r20, 0x01	; 1
     436:	0e 94 49 00 	call	0x92	; 0x92 <__DIO_setPinDirection>
	/*Set Direction for LCD Data Bus as Output Port */
	__DIO_setPortDirection(LCD_DATA_PORT_DIR, OUTPUT_PORT);
     43a:	81 e0       	ldi	r24, 0x01	; 1
     43c:	61 e0       	ldi	r22, 0x01	; 1
     43e:	0e 94 98 01 	call	0x330	; 0x330 <__DIO_setPortDirection>

	_LCD_sendCommand(TWO_LINE_LCD_Eight_BIT_MODE);
     442:	88 e3       	ldi	r24, 0x38	; 56
     444:	0e 94 2d 02 	call	0x45a	; 0x45a <_LCD_sendCommand>
	_LCD_sendCommand(CURSOR_STATE);
     448:	8c e0       	ldi	r24, 0x0C	; 12
     44a:	0e 94 2d 02 	call	0x45a	; 0x45a <_LCD_sendCommand>
	_LCD_sendCommand(CLEAR_SCREEN_COMMAND);
     44e:	81 e0       	ldi	r24, 0x01	; 1
     450:	0e 94 2d 02 	call	0x45a	; 0x45a <_LCD_sendCommand>
}
     454:	cf 91       	pop	r28
     456:	df 91       	pop	r29
     458:	08 95       	ret

0000045a <_LCD_sendCommand>:

void _LCD_sendCommand(uint8 command)
{
     45a:	df 93       	push	r29
     45c:	cf 93       	push	r28
     45e:	0f 92       	push	r0
     460:	cd b7       	in	r28, 0x3d	; 61
     462:	de b7       	in	r29, 0x3e	; 62
     464:	89 83       	std	Y+1, r24	; 0x01
	/* Clear RS Pin for LCD Command Mode */
	__DIO_writeOutputPinValue(LCD_CTRL_PORT, RS, LOW);
     466:	83 e0       	ldi	r24, 0x03	; 3
     468:	65 e0       	ldi	r22, 0x05	; 5
     46a:	40 e0       	ldi	r20, 0x00	; 0
     46c:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <__DIO_writeOutputPinValue>
	/* Clear RW Pin for Write to LCD Mode */
	__DIO_writeOutputPinValue(LCD_CTRL_PORT, RW, LOW);
     470:	83 e0       	ldi	r24, 0x03	; 3
     472:	66 e0       	ldi	r22, 0x06	; 6
     474:	40 e0       	ldi	r20, 0x00	; 0
     476:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <__DIO_writeOutputPinValue>
	for(cycle=0; cycle<TOTAL_CYCLES; cycle++); //delay in uSeconds/mSeconds
     47a:	10 92 a4 01 	sts	0x01A4, r1
     47e:	05 c0       	rjmp	.+10     	; 0x48a <__stack+0x2b>
     480:	80 91 a4 01 	lds	r24, 0x01A4
     484:	8f 5f       	subi	r24, 0xFF	; 255
     486:	80 93 a4 01 	sts	0x01A4, r24
     48a:	80 91 a4 01 	lds	r24, 0x01A4
     48e:	86 39       	cpi	r24, 0x96	; 150
     490:	b8 f3       	brcs	.-18     	; 0x480 <__stack+0x21>
	/* Set EN:enable Pin for fetching command from MC */
	__DIO_writeOutputPinValue(LCD_CTRL_PORT, EN, HIGH);
     492:	83 e0       	ldi	r24, 0x03	; 3
     494:	67 e0       	ldi	r22, 0x07	; 7
     496:	41 e0       	ldi	r20, 0x01	; 1
     498:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <__DIO_writeOutputPinValue>
	for(cycle=0; cycle<TOTAL_CYCLES; cycle++); //delay in uSeconds/mSeconds
     49c:	10 92 a4 01 	sts	0x01A4, r1
     4a0:	05 c0       	rjmp	.+10     	; 0x4ac <__stack+0x4d>
     4a2:	80 91 a4 01 	lds	r24, 0x01A4
     4a6:	8f 5f       	subi	r24, 0xFF	; 255
     4a8:	80 93 a4 01 	sts	0x01A4, r24
     4ac:	80 91 a4 01 	lds	r24, 0x01A4
     4b0:	86 39       	cpi	r24, 0x96	; 150
     4b2:	b8 f3       	brcs	.-18     	; 0x4a2 <__stack+0x43>
	/* Send Command through LCD Data Bus */
	__DIO_writeOutputPortValue(LCD_DATA_PORT, command);	//LCD_DATA_PORT = command;
     4b4:	81 e0       	ldi	r24, 0x01	; 1
     4b6:	69 81       	ldd	r22, Y+1	; 0x01
     4b8:	0e 94 db 01 	call	0x3b6	; 0x3b6 <__DIO_writeOutputPortValue>
	for(cycle=0; cycle<TOTAL_CYCLES; cycle++); //delay in uSeconds/mSeconds
     4bc:	10 92 a4 01 	sts	0x01A4, r1
     4c0:	05 c0       	rjmp	.+10     	; 0x4cc <__stack+0x6d>
     4c2:	80 91 a4 01 	lds	r24, 0x01A4
     4c6:	8f 5f       	subi	r24, 0xFF	; 255
     4c8:	80 93 a4 01 	sts	0x01A4, r24
     4cc:	80 91 a4 01 	lds	r24, 0x01A4
     4d0:	86 39       	cpi	r24, 0x96	; 150
     4d2:	b8 f3       	brcs	.-18     	; 0x4c2 <__stack+0x63>
	/* Clear EN:enable Pin for executing Command Over LCD */
	__DIO_writeOutputPinValue(LCD_CTRL_PORT, EN, LOW);
     4d4:	83 e0       	ldi	r24, 0x03	; 3
     4d6:	67 e0       	ldi	r22, 0x07	; 7
     4d8:	40 e0       	ldi	r20, 0x00	; 0
     4da:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <__DIO_writeOutputPinValue>
	for(cycle=0; cycle<TOTAL_CYCLES; cycle++); //delay in uSeconds/mSeconds
     4de:	10 92 a4 01 	sts	0x01A4, r1
     4e2:	05 c0       	rjmp	.+10     	; 0x4ee <__stack+0x8f>
     4e4:	80 91 a4 01 	lds	r24, 0x01A4
     4e8:	8f 5f       	subi	r24, 0xFF	; 255
     4ea:	80 93 a4 01 	sts	0x01A4, r24
     4ee:	80 91 a4 01 	lds	r24, 0x01A4
     4f2:	86 39       	cpi	r24, 0x96	; 150
     4f4:	b8 f3       	brcs	.-18     	; 0x4e4 <__stack+0x85>
}
     4f6:	0f 90       	pop	r0
     4f8:	cf 91       	pop	r28
     4fa:	df 91       	pop	r29
     4fc:	08 95       	ret

000004fe <_LCD_displayCharacter>:

void _LCD_displayCharacter(uint8 data)
{
     4fe:	df 93       	push	r29
     500:	cf 93       	push	r28
     502:	0f 92       	push	r0
     504:	cd b7       	in	r28, 0x3d	; 61
     506:	de b7       	in	r29, 0x3e	; 62
     508:	89 83       	std	Y+1, r24	; 0x01
	/* Clear RS Pin for LCD Data Mode */
	__DIO_writeOutputPinValue(LCD_CTRL_PORT, RS, HIGH);
     50a:	83 e0       	ldi	r24, 0x03	; 3
     50c:	65 e0       	ldi	r22, 0x05	; 5
     50e:	41 e0       	ldi	r20, 0x01	; 1
     510:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <__DIO_writeOutputPinValue>
	/* Clear RW Pin for Write to LCD Mode */
	__DIO_writeOutputPinValue(LCD_CTRL_PORT, RW, LOW);
     514:	83 e0       	ldi	r24, 0x03	; 3
     516:	66 e0       	ldi	r22, 0x06	; 6
     518:	40 e0       	ldi	r20, 0x00	; 0
     51a:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <__DIO_writeOutputPinValue>
	for(cycle=0; cycle<TOTAL_CYCLES; cycle++); //delay in uSeconds/mSeconds
     51e:	10 92 a4 01 	sts	0x01A4, r1
     522:	05 c0       	rjmp	.+10     	; 0x52e <_LCD_displayCharacter+0x30>
     524:	80 91 a4 01 	lds	r24, 0x01A4
     528:	8f 5f       	subi	r24, 0xFF	; 255
     52a:	80 93 a4 01 	sts	0x01A4, r24
     52e:	80 91 a4 01 	lds	r24, 0x01A4
     532:	86 39       	cpi	r24, 0x96	; 150
     534:	b8 f3       	brcs	.-18     	; 0x524 <_LCD_displayCharacter+0x26>
	/* Set EN:enable Pin for fetching Data from MC */
	__DIO_writeOutputPinValue(LCD_CTRL_PORT, EN, HIGH);
     536:	83 e0       	ldi	r24, 0x03	; 3
     538:	67 e0       	ldi	r22, 0x07	; 7
     53a:	41 e0       	ldi	r20, 0x01	; 1
     53c:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <__DIO_writeOutputPinValue>
	for(cycle=0; cycle<TOTAL_CYCLES; cycle++); //delay in uSeconds/mSeconds
     540:	10 92 a4 01 	sts	0x01A4, r1
     544:	05 c0       	rjmp	.+10     	; 0x550 <_LCD_displayCharacter+0x52>
     546:	80 91 a4 01 	lds	r24, 0x01A4
     54a:	8f 5f       	subi	r24, 0xFF	; 255
     54c:	80 93 a4 01 	sts	0x01A4, r24
     550:	80 91 a4 01 	lds	r24, 0x01A4
     554:	86 39       	cpi	r24, 0x96	; 150
     556:	b8 f3       	brcs	.-18     	; 0x546 <_LCD_displayCharacter+0x48>
	/* Send Data through LCD Data Bus */
	__DIO_writeOutputPortValue(LCD_DATA_PORT, data);  //LCD_DATA_PORT = data;
     558:	81 e0       	ldi	r24, 0x01	; 1
     55a:	69 81       	ldd	r22, Y+1	; 0x01
     55c:	0e 94 db 01 	call	0x3b6	; 0x3b6 <__DIO_writeOutputPortValue>
	for(cycle=0; cycle<TOTAL_CYCLES; cycle++); //delay in uSeconds/mSeconds
     560:	10 92 a4 01 	sts	0x01A4, r1
     564:	05 c0       	rjmp	.+10     	; 0x570 <_LCD_displayCharacter+0x72>
     566:	80 91 a4 01 	lds	r24, 0x01A4
     56a:	8f 5f       	subi	r24, 0xFF	; 255
     56c:	80 93 a4 01 	sts	0x01A4, r24
     570:	80 91 a4 01 	lds	r24, 0x01A4
     574:	86 39       	cpi	r24, 0x96	; 150
     576:	b8 f3       	brcs	.-18     	; 0x566 <_LCD_displayCharacter+0x68>
	/* Clear EN:enable Pin for displaying Data Over LCD */
	__DIO_writeOutputPinValue(LCD_CTRL_PORT, EN, LOW);
     578:	83 e0       	ldi	r24, 0x03	; 3
     57a:	67 e0       	ldi	r22, 0x07	; 7
     57c:	40 e0       	ldi	r20, 0x00	; 0
     57e:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <__DIO_writeOutputPinValue>
	for(cycle=0; cycle<TOTAL_CYCLES; cycle++); //delay in uSeconds/mSeconds
     582:	10 92 a4 01 	sts	0x01A4, r1
     586:	05 c0       	rjmp	.+10     	; 0x592 <_LCD_displayCharacter+0x94>
     588:	80 91 a4 01 	lds	r24, 0x01A4
     58c:	8f 5f       	subi	r24, 0xFF	; 255
     58e:	80 93 a4 01 	sts	0x01A4, r24
     592:	80 91 a4 01 	lds	r24, 0x01A4
     596:	86 39       	cpi	r24, 0x96	; 150
     598:	b8 f3       	brcs	.-18     	; 0x588 <_LCD_displayCharacter+0x8a>
}
     59a:	0f 90       	pop	r0
     59c:	cf 91       	pop	r28
     59e:	df 91       	pop	r29
     5a0:	08 95       	ret

000005a2 <_LCD_displayString>:

void _LCD_displayString(uint8 *string_data)
{
     5a2:	df 93       	push	r29
     5a4:	cf 93       	push	r28
     5a6:	00 d0       	rcall	.+0      	; 0x5a8 <_LCD_displayString+0x6>
     5a8:	cd b7       	in	r28, 0x3d	; 61
     5aa:	de b7       	in	r29, 0x3e	; 62
     5ac:	9a 83       	std	Y+2, r25	; 0x02
     5ae:	89 83       	std	Y+1, r24	; 0x01
     5b0:	0a c0       	rjmp	.+20     	; 0x5c6 <_LCD_displayString+0x24>
	while( *string_data != '\0' )
	{
		_LCD_displayCharacter(*string_data);
     5b2:	e9 81       	ldd	r30, Y+1	; 0x01
     5b4:	fa 81       	ldd	r31, Y+2	; 0x02
     5b6:	80 81       	ld	r24, Z
     5b8:	0e 94 7f 02 	call	0x4fe	; 0x4fe <_LCD_displayCharacter>
		string_data++;
     5bc:	89 81       	ldd	r24, Y+1	; 0x01
     5be:	9a 81       	ldd	r25, Y+2	; 0x02
     5c0:	01 96       	adiw	r24, 0x01	; 1
     5c2:	9a 83       	std	Y+2, r25	; 0x02
     5c4:	89 83       	std	Y+1, r24	; 0x01
	for(cycle=0; cycle<TOTAL_CYCLES; cycle++); //delay in uSeconds/mSeconds
}

void _LCD_displayString(uint8 *string_data)
{
	while( *string_data != '\0' )
     5c6:	e9 81       	ldd	r30, Y+1	; 0x01
     5c8:	fa 81       	ldd	r31, Y+2	; 0x02
     5ca:	80 81       	ld	r24, Z
     5cc:	88 23       	and	r24, r24
     5ce:	89 f7       	brne	.-30     	; 0x5b2 <_LCD_displayString+0x10>
	{
		_LCD_displayCharacter(*string_data);
		string_data++;
	}
}
     5d0:	0f 90       	pop	r0
     5d2:	0f 90       	pop	r0
     5d4:	cf 91       	pop	r28
     5d6:	df 91       	pop	r29
     5d8:	08 95       	ret

000005da <_LCD_displayIntegerVariable>:
void _LCD_displayIntegerVariable(uint16 data)
{
     5da:	df 93       	push	r29
     5dc:	cf 93       	push	r28
     5de:	cd b7       	in	r28, 0x3d	; 61
     5e0:	de b7       	in	r29, 0x3e	; 62
     5e2:	2b 97       	sbiw	r28, 0x0b	; 11
     5e4:	0f b6       	in	r0, 0x3f	; 63
     5e6:	f8 94       	cli
     5e8:	de bf       	out	0x3e, r29	; 62
     5ea:	0f be       	out	0x3f, r0	; 63
     5ec:	cd bf       	out	0x3d, r28	; 61
     5ee:	9b 87       	std	Y+11, r25	; 0x0b
     5f0:	8a 87       	std	Y+10, r24	; 0x0a
	sint8 i=0, num_buff[8];
     5f2:	19 82       	std	Y+1, r1	; 0x01

	if( data == 0 )
     5f4:	8a 85       	ldd	r24, Y+10	; 0x0a
     5f6:	9b 85       	ldd	r25, Y+11	; 0x0b
     5f8:	00 97       	sbiw	r24, 0x00	; 0
     5fa:	21 f5       	brne	.+72     	; 0x644 <_LCD_displayIntegerVariable+0x6a>
	{
		_LCD_displayCharacter('0');
     5fc:	80 e3       	ldi	r24, 0x30	; 48
     5fe:	0e 94 7f 02 	call	0x4fe	; 0x4fe <_LCD_displayCharacter>
     602:	3b c0       	rjmp	.+118    	; 0x67a <_LCD_displayIntegerVariable+0xa0>
		return;
	}

	while(data != 0)
	{
		num_buff[i] = (data%10)+48;
     604:	89 81       	ldd	r24, Y+1	; 0x01
     606:	e8 2f       	mov	r30, r24
     608:	ff 27       	eor	r31, r31
     60a:	e7 fd       	sbrc	r30, 7
     60c:	f0 95       	com	r31
     60e:	8a 85       	ldd	r24, Y+10	; 0x0a
     610:	9b 85       	ldd	r25, Y+11	; 0x0b
     612:	2a e0       	ldi	r18, 0x0A	; 10
     614:	30 e0       	ldi	r19, 0x00	; 0
     616:	b9 01       	movw	r22, r18
     618:	0e 94 32 0e 	call	0x1c64	; 0x1c64 <__udivmodhi4>
     61c:	80 5d       	subi	r24, 0xD0	; 208
     61e:	28 2f       	mov	r18, r24
     620:	ce 01       	movw	r24, r28
     622:	02 96       	adiw	r24, 0x02	; 2
     624:	e8 0f       	add	r30, r24
     626:	f9 1f       	adc	r31, r25
     628:	20 83       	st	Z, r18
		i++;
     62a:	89 81       	ldd	r24, Y+1	; 0x01
     62c:	8f 5f       	subi	r24, 0xFF	; 255
     62e:	89 83       	std	Y+1, r24	; 0x01
		data /= 10;
     630:	8a 85       	ldd	r24, Y+10	; 0x0a
     632:	9b 85       	ldd	r25, Y+11	; 0x0b
     634:	2a e0       	ldi	r18, 0x0A	; 10
     636:	30 e0       	ldi	r19, 0x00	; 0
     638:	b9 01       	movw	r22, r18
     63a:	0e 94 32 0e 	call	0x1c64	; 0x1c64 <__udivmodhi4>
     63e:	cb 01       	movw	r24, r22
     640:	9b 87       	std	Y+11, r25	; 0x0b
     642:	8a 87       	std	Y+10, r24	; 0x0a
	{
		_LCD_displayCharacter('0');
		return;
	}

	while(data != 0)
     644:	8a 85       	ldd	r24, Y+10	; 0x0a
     646:	9b 85       	ldd	r25, Y+11	; 0x0b
     648:	00 97       	sbiw	r24, 0x00	; 0
     64a:	e1 f6       	brne	.-72     	; 0x604 <_LCD_displayIntegerVariable+0x2a>
	{
		num_buff[i] = (data%10)+48;
		i++;
		data /= 10;
	}
	i--;
     64c:	89 81       	ldd	r24, Y+1	; 0x01
     64e:	81 50       	subi	r24, 0x01	; 1
     650:	89 83       	std	Y+1, r24	; 0x01
     652:	10 c0       	rjmp	.+32     	; 0x674 <_LCD_displayIntegerVariable+0x9a>
	while( i >= 0)
	{
		_LCD_displayCharacter(num_buff[i]);
     654:	89 81       	ldd	r24, Y+1	; 0x01
     656:	28 2f       	mov	r18, r24
     658:	33 27       	eor	r19, r19
     65a:	27 fd       	sbrc	r18, 7
     65c:	30 95       	com	r19
     65e:	ce 01       	movw	r24, r28
     660:	02 96       	adiw	r24, 0x02	; 2
     662:	fc 01       	movw	r30, r24
     664:	e2 0f       	add	r30, r18
     666:	f3 1f       	adc	r31, r19
     668:	80 81       	ld	r24, Z
     66a:	0e 94 7f 02 	call	0x4fe	; 0x4fe <_LCD_displayCharacter>
		i--;
     66e:	89 81       	ldd	r24, Y+1	; 0x01
     670:	81 50       	subi	r24, 0x01	; 1
     672:	89 83       	std	Y+1, r24	; 0x01
		num_buff[i] = (data%10)+48;
		i++;
		data /= 10;
	}
	i--;
	while( i >= 0)
     674:	89 81       	ldd	r24, Y+1	; 0x01
     676:	88 23       	and	r24, r24
     678:	6c f7       	brge	.-38     	; 0x654 <_LCD_displayIntegerVariable+0x7a>
	{
		_LCD_displayCharacter(num_buff[i]);
		i--;
	}
}
     67a:	2b 96       	adiw	r28, 0x0b	; 11
     67c:	0f b6       	in	r0, 0x3f	; 63
     67e:	f8 94       	cli
     680:	de bf       	out	0x3e, r29	; 62
     682:	0f be       	out	0x3f, r0	; 63
     684:	cd bf       	out	0x3d, r28	; 61
     686:	cf 91       	pop	r28
     688:	df 91       	pop	r29
     68a:	08 95       	ret

0000068c <_LCD_adjustCursorPosition>:

void _LCD_adjustCursorPosition(uint8 row, uint8 col)
{
     68c:	df 93       	push	r29
     68e:	cf 93       	push	r28
     690:	00 d0       	rcall	.+0      	; 0x692 <_LCD_adjustCursorPosition+0x6>
     692:	00 d0       	rcall	.+0      	; 0x694 <_LCD_adjustCursorPosition+0x8>
     694:	0f 92       	push	r0
     696:	cd b7       	in	r28, 0x3d	; 61
     698:	de b7       	in	r29, 0x3e	; 62
     69a:	8a 83       	std	Y+2, r24	; 0x02
     69c:	6b 83       	std	Y+3, r22	; 0x03
	uint8 location;

	/*Adjust the correct location*/
	switch(row)
     69e:	8a 81       	ldd	r24, Y+2	; 0x02
     6a0:	28 2f       	mov	r18, r24
     6a2:	30 e0       	ldi	r19, 0x00	; 0
     6a4:	3d 83       	std	Y+5, r19	; 0x05
     6a6:	2c 83       	std	Y+4, r18	; 0x04
     6a8:	8c 81       	ldd	r24, Y+4	; 0x04
     6aa:	9d 81       	ldd	r25, Y+5	; 0x05
     6ac:	81 30       	cpi	r24, 0x01	; 1
     6ae:	91 05       	cpc	r25, r1
     6b0:	c1 f0       	breq	.+48     	; 0x6e2 <_LCD_adjustCursorPosition+0x56>
     6b2:	2c 81       	ldd	r18, Y+4	; 0x04
     6b4:	3d 81       	ldd	r19, Y+5	; 0x05
     6b6:	22 30       	cpi	r18, 0x02	; 2
     6b8:	31 05       	cpc	r19, r1
     6ba:	2c f4       	brge	.+10     	; 0x6c6 <_LCD_adjustCursorPosition+0x3a>
     6bc:	8c 81       	ldd	r24, Y+4	; 0x04
     6be:	9d 81       	ldd	r25, Y+5	; 0x05
     6c0:	00 97       	sbiw	r24, 0x00	; 0
     6c2:	61 f0       	breq	.+24     	; 0x6dc <_LCD_adjustCursorPosition+0x50>
     6c4:	19 c0       	rjmp	.+50     	; 0x6f8 <_LCD_adjustCursorPosition+0x6c>
     6c6:	2c 81       	ldd	r18, Y+4	; 0x04
     6c8:	3d 81       	ldd	r19, Y+5	; 0x05
     6ca:	22 30       	cpi	r18, 0x02	; 2
     6cc:	31 05       	cpc	r19, r1
     6ce:	69 f0       	breq	.+26     	; 0x6ea <_LCD_adjustCursorPosition+0x5e>
     6d0:	8c 81       	ldd	r24, Y+4	; 0x04
     6d2:	9d 81       	ldd	r25, Y+5	; 0x05
     6d4:	83 30       	cpi	r24, 0x03	; 3
     6d6:	91 05       	cpc	r25, r1
     6d8:	61 f0       	breq	.+24     	; 0x6f2 <_LCD_adjustCursorPosition+0x66>
     6da:	0e c0       	rjmp	.+28     	; 0x6f8 <_LCD_adjustCursorPosition+0x6c>
	{
		case 0:
			location = col;
     6dc:	8b 81       	ldd	r24, Y+3	; 0x03
     6de:	89 83       	std	Y+1, r24	; 0x01
     6e0:	0b c0       	rjmp	.+22     	; 0x6f8 <_LCD_adjustCursorPosition+0x6c>
		break;
		case 1:
			location = col+0x40;
     6e2:	8b 81       	ldd	r24, Y+3	; 0x03
     6e4:	80 5c       	subi	r24, 0xC0	; 192
     6e6:	89 83       	std	Y+1, r24	; 0x01
     6e8:	07 c0       	rjmp	.+14     	; 0x6f8 <_LCD_adjustCursorPosition+0x6c>
		break;
		case 2:
			location = col+0x10;
     6ea:	8b 81       	ldd	r24, Y+3	; 0x03
     6ec:	80 5f       	subi	r24, 0xF0	; 240
     6ee:	89 83       	std	Y+1, r24	; 0x01
     6f0:	03 c0       	rjmp	.+6      	; 0x6f8 <_LCD_adjustCursorPosition+0x6c>
		break;
		case 3:
			location = col+0x50;
     6f2:	8b 81       	ldd	r24, Y+3	; 0x03
     6f4:	80 5b       	subi	r24, 0xB0	; 176
     6f6:	89 83       	std	Y+1, r24	; 0x01
		break;
		default:break;
	}
	/*To Set the Cursor Location at specific place, send DDRAM Address OR 0x80 */
	_LCD_sendCommand( (SET_CURSOR|location) );
     6f8:	89 81       	ldd	r24, Y+1	; 0x01
     6fa:	80 68       	ori	r24, 0x80	; 128
     6fc:	0e 94 2d 02 	call	0x45a	; 0x45a <_LCD_sendCommand>
}
     700:	0f 90       	pop	r0
     702:	0f 90       	pop	r0
     704:	0f 90       	pop	r0
     706:	0f 90       	pop	r0
     708:	0f 90       	pop	r0
     70a:	cf 91       	pop	r28
     70c:	df 91       	pop	r29
     70e:	08 95       	ret

00000710 <_LCD_displayString_atCursor>:
void _LCD_displayString_atCursor(uint8 *string_data, uint8 row, uint8 col)
{
     710:	df 93       	push	r29
     712:	cf 93       	push	r28
     714:	00 d0       	rcall	.+0      	; 0x716 <_LCD_displayString_atCursor+0x6>
     716:	00 d0       	rcall	.+0      	; 0x718 <_LCD_displayString_atCursor+0x8>
     718:	cd b7       	in	r28, 0x3d	; 61
     71a:	de b7       	in	r29, 0x3e	; 62
     71c:	9a 83       	std	Y+2, r25	; 0x02
     71e:	89 83       	std	Y+1, r24	; 0x01
     720:	6b 83       	std	Y+3, r22	; 0x03
     722:	4c 83       	std	Y+4, r20	; 0x04
	_LCD_adjustCursorPosition(row, col);
     724:	8b 81       	ldd	r24, Y+3	; 0x03
     726:	6c 81       	ldd	r22, Y+4	; 0x04
     728:	0e 94 46 03 	call	0x68c	; 0x68c <_LCD_adjustCursorPosition>
	_LCD_displayString(string_data);
     72c:	89 81       	ldd	r24, Y+1	; 0x01
     72e:	9a 81       	ldd	r25, Y+2	; 0x02
     730:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <_LCD_displayString>
}
     734:	0f 90       	pop	r0
     736:	0f 90       	pop	r0
     738:	0f 90       	pop	r0
     73a:	0f 90       	pop	r0
     73c:	cf 91       	pop	r28
     73e:	df 91       	pop	r29
     740:	08 95       	ret

00000742 <_LCD_clearScreen>:
void _LCD_clearScreen()
{
     742:	df 93       	push	r29
     744:	cf 93       	push	r28
     746:	cd b7       	in	r28, 0x3d	; 61
     748:	de b7       	in	r29, 0x3e	; 62
	_LCD_sendCommand(CLEAR_SCREEN_COMMAND);
     74a:	81 e0       	ldi	r24, 0x01	; 1
     74c:	0e 94 2d 02 	call	0x45a	; 0x45a <_LCD_sendCommand>
}
     750:	cf 91       	pop	r28
     752:	df 91       	pop	r29
     754:	08 95       	ret

00000756 <__UART_init>:
 *  - baud_rate: 100 / 200 / 300 / 1200 / 2400 / 4800 / 9600 / 19200 / 38400 / 57600 / 115200
 *  - data_size: 5 / 6 / 7 / 8 / 9
 *  - stop_bit: TWO_STOP_BITS / TWO_STOP_BITS
 *  - parity: EVEN_PARITY / ODD_PARITY */
void __UART_init(const UART_config *p_uart_config)
{
     756:	0f 93       	push	r16
     758:	1f 93       	push	r17
     75a:	df 93       	push	r29
     75c:	cf 93       	push	r28
     75e:	00 d0       	rcall	.+0      	; 0x760 <__UART_init+0xa>
     760:	cd b7       	in	r28, 0x3d	; 61
     762:	de b7       	in	r29, 0x3e	; 62
     764:	9a 83       	std	Y+2, r25	; 0x02
     766:	89 83       	std	Y+1, r24	; 0x01
    /*Enable Parity Error LED O/P for Error Indication*/
    #if(PARITY_ENABLE)
    SET_BIT(PARITY_ERROR_DDR, PARITY_ERROR_PIN);
    #endif
    /*UART Double Speed Transmission*/
    SET_BIT(UCSRA, U2X);
     768:	ab e2       	ldi	r26, 0x2B	; 43
     76a:	b0 e0       	ldi	r27, 0x00	; 0
     76c:	eb e2       	ldi	r30, 0x2B	; 43
     76e:	f0 e0       	ldi	r31, 0x00	; 0
     770:	80 81       	ld	r24, Z
     772:	82 60       	ori	r24, 0x02	; 2
     774:	8c 93       	st	X, r24
    /*if module configured to Use ISR in RX mode, Enable Rx Complete Interrupt Enable bit*/
    #ifdef RX_ISR_BASED
        SET_BIT(UCSRB, RXICE);
    #endif
    /*Enable Module for Transmitting*/
    SET_BIT(UCSRB, TXEN);
     776:	aa e2       	ldi	r26, 0x2A	; 42
     778:	b0 e0       	ldi	r27, 0x00	; 0
     77a:	ea e2       	ldi	r30, 0x2A	; 42
     77c:	f0 e0       	ldi	r31, 0x00	; 0
     77e:	80 81       	ld	r24, Z
     780:	88 60       	ori	r24, 0x08	; 8
     782:	8c 93       	st	X, r24
    /*Enable Module for Receiving*/
    SET_BIT(UCSRB, RXEN);
     784:	aa e2       	ldi	r26, 0x2A	; 42
     786:	b0 e0       	ldi	r27, 0x00	; 0
     788:	ea e2       	ldi	r30, 0x2A	; 42
     78a:	f0 e0       	ldi	r31, 0x00	; 0
     78c:	80 81       	ld	r24, Z
     78e:	80 61       	ori	r24, 0x10	; 16
     790:	8c 93       	st	X, r24
     * USBS: Stop Bit Select: According to Function Configs.
     * UCSZ1:0: Character Size: According to Function Configs.
     * UCPOL: Clock Polarity: According to Static Config
     *****************************************************************/  
    /*Select UCSRC URSEL=1*/
    SET_BIT(UCSRC, URSEL);
     792:	a0 e4       	ldi	r26, 0x40	; 64
     794:	b0 e0       	ldi	r27, 0x00	; 0
     796:	e0 e4       	ldi	r30, 0x40	; 64
     798:	f0 e0       	ldi	r31, 0x00	; 0
     79a:	80 81       	ld	r24, Z
     79c:	80 68       	ori	r24, 0x80	; 128
     79e:	8c 93       	st	X, r24
    /*Adjust Data Size in frame*/
    UCSRC = (UCSRC&0b11111001) | ((p_uart_config->data_size&0b00000011)<<1);
     7a0:	a0 e4       	ldi	r26, 0x40	; 64
     7a2:	b0 e0       	ldi	r27, 0x00	; 0
     7a4:	e0 e4       	ldi	r30, 0x40	; 64
     7a6:	f0 e0       	ldi	r31, 0x00	; 0
     7a8:	80 81       	ld	r24, Z
     7aa:	28 2f       	mov	r18, r24
     7ac:	29 7f       	andi	r18, 0xF9	; 249
     7ae:	e9 81       	ldd	r30, Y+1	; 0x01
     7b0:	fa 81       	ldd	r31, Y+2	; 0x02
     7b2:	82 81       	ldd	r24, Z+2	; 0x02
     7b4:	88 2f       	mov	r24, r24
     7b6:	90 e0       	ldi	r25, 0x00	; 0
     7b8:	83 70       	andi	r24, 0x03	; 3
     7ba:	90 70       	andi	r25, 0x00	; 0
     7bc:	88 0f       	add	r24, r24
     7be:	99 1f       	adc	r25, r25
     7c0:	82 2b       	or	r24, r18
     7c2:	8c 93       	st	X, r24
    /*Set UART in ASYNC Mode*/
    CLR_BIT(UCSRC, UMSEL);
     7c4:	a0 e4       	ldi	r26, 0x40	; 64
     7c6:	b0 e0       	ldi	r27, 0x00	; 0
     7c8:	e0 e4       	ldi	r30, 0x40	; 64
     7ca:	f0 e0       	ldi	r31, 0x00	; 0
     7cc:	80 81       	ld	r24, Z
     7ce:	8f 7b       	andi	r24, 0xBF	; 191
     7d0:	8c 93       	st	X, r24
    /*Set UART parity Mode*/
    UCSRC = (UCSRC&0b11001111) | ((p_uart_config->parity)<<4);
     7d2:	a0 e4       	ldi	r26, 0x40	; 64
     7d4:	b0 e0       	ldi	r27, 0x00	; 0
     7d6:	e0 e4       	ldi	r30, 0x40	; 64
     7d8:	f0 e0       	ldi	r31, 0x00	; 0
     7da:	80 81       	ld	r24, Z
     7dc:	28 2f       	mov	r18, r24
     7de:	2f 7c       	andi	r18, 0xCF	; 207
     7e0:	e9 81       	ldd	r30, Y+1	; 0x01
     7e2:	fa 81       	ldd	r31, Y+2	; 0x02
     7e4:	84 81       	ldd	r24, Z+4	; 0x04
     7e6:	88 2f       	mov	r24, r24
     7e8:	90 e0       	ldi	r25, 0x00	; 0
     7ea:	82 95       	swap	r24
     7ec:	92 95       	swap	r25
     7ee:	90 7f       	andi	r25, 0xF0	; 240
     7f0:	98 27       	eor	r25, r24
     7f2:	80 7f       	andi	r24, 0xF0	; 240
     7f4:	98 27       	eor	r25, r24
     7f6:	82 2b       	or	r24, r18
     7f8:	8c 93       	st	X, r24
    /*Set Stop Bit Config*/
    UCSRC = (UCSRC&0b11110111) | ((p_uart_config->stop_bit)<<3);
     7fa:	a0 e4       	ldi	r26, 0x40	; 64
     7fc:	b0 e0       	ldi	r27, 0x00	; 0
     7fe:	e0 e4       	ldi	r30, 0x40	; 64
     800:	f0 e0       	ldi	r31, 0x00	; 0
     802:	80 81       	ld	r24, Z
     804:	28 2f       	mov	r18, r24
     806:	27 7f       	andi	r18, 0xF7	; 247
     808:	e9 81       	ldd	r30, Y+1	; 0x01
     80a:	fa 81       	ldd	r31, Y+2	; 0x02
     80c:	83 81       	ldd	r24, Z+3	; 0x03
     80e:	88 2f       	mov	r24, r24
     810:	90 e0       	ldi	r25, 0x00	; 0
     812:	88 0f       	add	r24, r24
     814:	99 1f       	adc	r25, r25
     816:	88 0f       	add	r24, r24
     818:	99 1f       	adc	r25, r25
     81a:	88 0f       	add	r24, r24
     81c:	99 1f       	adc	r25, r25
     81e:	82 2b       	or	r24, r18
     820:	8c 93       	st	X, r24

    /****************UBRRH and UBRRL Registers Description**************
     * The URSEL must be zero when writing the UBRRH.
     * UBRR11:0: USART Baud Rate Register, adjust 12 bit with desired baudrate
     *****************************************************************/ 
    CLR_BIT(UBRRH, URSEL);
     822:	a0 e4       	ldi	r26, 0x40	; 64
     824:	b0 e0       	ldi	r27, 0x00	; 0
     826:	e0 e4       	ldi	r30, 0x40	; 64
     828:	f0 e0       	ldi	r31, 0x00	; 0
     82a:	80 81       	ld	r24, Z
     82c:	8f 77       	andi	r24, 0x7F	; 127
     82e:	8c 93       	st	X, r24
    UBRRL = (uint8)(UBRR_VALUE_CALC(p_uart_config->baud_rate));
     830:	09 e2       	ldi	r16, 0x29	; 41
     832:	10 e0       	ldi	r17, 0x00	; 0
     834:	e9 81       	ldd	r30, Y+1	; 0x01
     836:	fa 81       	ldd	r31, Y+2	; 0x02
     838:	80 81       	ld	r24, Z
     83a:	91 81       	ldd	r25, Z+1	; 0x01
     83c:	cc 01       	movw	r24, r24
     83e:	a0 e0       	ldi	r26, 0x00	; 0
     840:	b0 e0       	ldi	r27, 0x00	; 0
     842:	88 0f       	add	r24, r24
     844:	99 1f       	adc	r25, r25
     846:	aa 1f       	adc	r26, r26
     848:	bb 1f       	adc	r27, r27
     84a:	88 0f       	add	r24, r24
     84c:	99 1f       	adc	r25, r25
     84e:	aa 1f       	adc	r26, r26
     850:	bb 1f       	adc	r27, r27
     852:	88 0f       	add	r24, r24
     854:	99 1f       	adc	r25, r25
     856:	aa 1f       	adc	r26, r26
     858:	bb 1f       	adc	r27, r27
     85a:	9c 01       	movw	r18, r24
     85c:	ad 01       	movw	r20, r26
     85e:	80 e4       	ldi	r24, 0x40	; 64
     860:	92 e4       	ldi	r25, 0x42	; 66
     862:	af e0       	ldi	r26, 0x0F	; 15
     864:	b0 e0       	ldi	r27, 0x00	; 0
     866:	bc 01       	movw	r22, r24
     868:	cd 01       	movw	r24, r26
     86a:	0e 94 46 0e 	call	0x1c8c	; 0x1c8c <__udivmodsi4>
     86e:	da 01       	movw	r26, r20
     870:	c9 01       	movw	r24, r18
     872:	81 50       	subi	r24, 0x01	; 1
     874:	f8 01       	movw	r30, r16
     876:	80 83       	st	Z, r24
    UBRRH = (UBRR_VALUE_CALC(p_uart_config->baud_rate))>>8;
     878:	00 e4       	ldi	r16, 0x40	; 64
     87a:	10 e0       	ldi	r17, 0x00	; 0
     87c:	e9 81       	ldd	r30, Y+1	; 0x01
     87e:	fa 81       	ldd	r31, Y+2	; 0x02
     880:	80 81       	ld	r24, Z
     882:	91 81       	ldd	r25, Z+1	; 0x01
     884:	cc 01       	movw	r24, r24
     886:	a0 e0       	ldi	r26, 0x00	; 0
     888:	b0 e0       	ldi	r27, 0x00	; 0
     88a:	88 0f       	add	r24, r24
     88c:	99 1f       	adc	r25, r25
     88e:	aa 1f       	adc	r26, r26
     890:	bb 1f       	adc	r27, r27
     892:	88 0f       	add	r24, r24
     894:	99 1f       	adc	r25, r25
     896:	aa 1f       	adc	r26, r26
     898:	bb 1f       	adc	r27, r27
     89a:	88 0f       	add	r24, r24
     89c:	99 1f       	adc	r25, r25
     89e:	aa 1f       	adc	r26, r26
     8a0:	bb 1f       	adc	r27, r27
     8a2:	9c 01       	movw	r18, r24
     8a4:	ad 01       	movw	r20, r26
     8a6:	80 e4       	ldi	r24, 0x40	; 64
     8a8:	92 e4       	ldi	r25, 0x42	; 66
     8aa:	af e0       	ldi	r26, 0x0F	; 15
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	bc 01       	movw	r22, r24
     8b0:	cd 01       	movw	r24, r26
     8b2:	0e 94 46 0e 	call	0x1c8c	; 0x1c8c <__udivmodsi4>
     8b6:	da 01       	movw	r26, r20
     8b8:	c9 01       	movw	r24, r18
     8ba:	01 97       	sbiw	r24, 0x01	; 1
     8bc:	a1 09       	sbc	r26, r1
     8be:	b1 09       	sbc	r27, r1
     8c0:	89 2f       	mov	r24, r25
     8c2:	9a 2f       	mov	r25, r26
     8c4:	ab 2f       	mov	r26, r27
     8c6:	bb 27       	eor	r27, r27
     8c8:	f8 01       	movw	r30, r16
     8ca:	80 83       	st	Z, r24
}
     8cc:	0f 90       	pop	r0
     8ce:	0f 90       	pop	r0
     8d0:	cf 91       	pop	r28
     8d2:	df 91       	pop	r29
     8d4:	1f 91       	pop	r17
     8d6:	0f 91       	pop	r16
     8d8:	08 95       	ret

000008da <__UART_sendByte>:


/*** Description:-
 * Function used to send a byte*/
void __UART_sendByte(const uint8 u8Data)
{
     8da:	df 93       	push	r29
     8dc:	cf 93       	push	r28
     8de:	0f 92       	push	r0
     8e0:	cd b7       	in	r28, 0x3d	; 61
     8e2:	de b7       	in	r29, 0x3e	; 62
     8e4:	89 83       	std	Y+1, r24	; 0x01
    /*Delay made to make sure the UDR Register is Empty before Transmitting*/
    while( READ_BIT(UCSRA, UDRE)==LOW );
     8e6:	eb e2       	ldi	r30, 0x2B	; 43
     8e8:	f0 e0       	ldi	r31, 0x00	; 0
     8ea:	80 81       	ld	r24, Z
     8ec:	88 2f       	mov	r24, r24
     8ee:	90 e0       	ldi	r25, 0x00	; 0
     8f0:	80 72       	andi	r24, 0x20	; 32
     8f2:	90 70       	andi	r25, 0x00	; 0
     8f4:	95 95       	asr	r25
     8f6:	87 95       	ror	r24
     8f8:	95 95       	asr	r25
     8fa:	87 95       	ror	r24
     8fc:	95 95       	asr	r25
     8fe:	87 95       	ror	r24
     900:	95 95       	asr	r25
     902:	87 95       	ror	r24
     904:	95 95       	asr	r25
     906:	87 95       	ror	r24
     908:	00 97       	sbiw	r24, 0x00	; 0
     90a:	69 f3       	breq	.-38     	; 0x8e6 <__UART_sendByte+0xc>
    /*Put desired message in UDR Register to be sent*/
    UDR = u8Data;
     90c:	ec e2       	ldi	r30, 0x2C	; 44
     90e:	f0 e0       	ldi	r31, 0x00	; 0
     910:	89 81       	ldd	r24, Y+1	; 0x01
     912:	80 83       	st	Z, r24
}
     914:	0f 90       	pop	r0
     916:	cf 91       	pop	r28
     918:	df 91       	pop	r29
     91a:	08 95       	ret

0000091c <__UART_sendString>:


/*** Description:-
 * Function used to send a string, pass string array_name by address*/
void __UART_sendString(const uint8 *p_string)
{
     91c:	df 93       	push	r29
     91e:	cf 93       	push	r28
     920:	00 d0       	rcall	.+0      	; 0x922 <__UART_sendString+0x6>
     922:	cd b7       	in	r28, 0x3d	; 61
     924:	de b7       	in	r29, 0x3e	; 62
     926:	9a 83       	std	Y+2, r25	; 0x02
     928:	89 83       	std	Y+1, r24	; 0x01
     92a:	0a c0       	rjmp	.+20     	; 0x940 <__UART_sendString+0x24>
    while( *p_string != '\0' )
    {
        __UART_sendByte(*p_string);
     92c:	e9 81       	ldd	r30, Y+1	; 0x01
     92e:	fa 81       	ldd	r31, Y+2	; 0x02
     930:	80 81       	ld	r24, Z
     932:	0e 94 6d 04 	call	0x8da	; 0x8da <__UART_sendByte>
        p_string++;
     936:	89 81       	ldd	r24, Y+1	; 0x01
     938:	9a 81       	ldd	r25, Y+2	; 0x02
     93a:	01 96       	adiw	r24, 0x01	; 1
     93c:	9a 83       	std	Y+2, r25	; 0x02
     93e:	89 83       	std	Y+1, r24	; 0x01

/*** Description:-
 * Function used to send a string, pass string array_name by address*/
void __UART_sendString(const uint8 *p_string)
{
    while( *p_string != '\0' )
     940:	e9 81       	ldd	r30, Y+1	; 0x01
     942:	fa 81       	ldd	r31, Y+2	; 0x02
     944:	80 81       	ld	r24, Z
     946:	88 23       	and	r24, r24
     948:	89 f7       	brne	.-30     	; 0x92c <__UART_sendString+0x10>
    {
        __UART_sendByte(*p_string);
        p_string++;
    }
}
     94a:	0f 90       	pop	r0
     94c:	0f 90       	pop	r0
     94e:	cf 91       	pop	r28
     950:	df 91       	pop	r29
     952:	08 95       	ret

00000954 <__UART_receiveByte>:
#ifdef RX_POLLING_BASED 

    /*** Description:-
     * Function used to receive a byte*/
    uint8 __UART_receiveByte(void)
    {
     954:	df 93       	push	r29
     956:	cf 93       	push	r28
     958:	0f 92       	push	r0
     95a:	cd b7       	in	r28, 0x3d	; 61
     95c:	de b7       	in	r29, 0x3e	; 62
        /*Delay made to make sure the UDR Register has unread received message*/
        while( READ_BIT(UCSRA, RXC)==LOW );
     95e:	eb e2       	ldi	r30, 0x2B	; 43
     960:	f0 e0       	ldi	r31, 0x00	; 0
     962:	80 81       	ld	r24, Z
     964:	88 1f       	adc	r24, r24
     966:	88 27       	eor	r24, r24
     968:	88 1f       	adc	r24, r24
     96a:	88 2f       	mov	r24, r24
     96c:	90 e0       	ldi	r25, 0x00	; 0
     96e:	90 70       	andi	r25, 0x00	; 0
     970:	00 97       	sbiw	r24, 0x00	; 0
     972:	a9 f3       	breq	.-22     	; 0x95e <__UART_receiveByte+0xa>


        if( READ_BIT(UCSRA, PE)==LOW )
     974:	eb e2       	ldi	r30, 0x2B	; 43
     976:	f0 e0       	ldi	r31, 0x00	; 0
     978:	80 81       	ld	r24, Z
     97a:	88 2f       	mov	r24, r24
     97c:	90 e0       	ldi	r25, 0x00	; 0
     97e:	84 70       	andi	r24, 0x04	; 4
     980:	90 70       	andi	r25, 0x00	; 0
     982:	95 95       	asr	r25
     984:	87 95       	ror	r24
     986:	95 95       	asr	r25
     988:	87 95       	ror	r24
     98a:	00 97       	sbiw	r24, 0x00	; 0
     98c:	29 f4       	brne	.+10     	; 0x998 <__UART_receiveByte+0x44>
        {
            /*fetch the received message*/
            return UDR;
     98e:	ec e2       	ldi	r30, 0x2C	; 44
     990:	f0 e0       	ldi	r31, 0x00	; 0
     992:	80 81       	ld	r24, Z
     994:	89 83       	std	Y+1, r24	; 0x01
     996:	01 c0       	rjmp	.+2      	; 0x99a <__UART_receiveByte+0x46>
        else
        {
            #if(PARITY_ENABLE)
            SET_BIT(PARITY_ERROR_PORT, PARITY_ERROR_PIN);
            #endif
            return 0; 
     998:	19 82       	std	Y+1, r1	; 0x01
     99a:	89 81       	ldd	r24, Y+1	; 0x01
        }
    }
     99c:	0f 90       	pop	r0
     99e:	cf 91       	pop	r28
     9a0:	df 91       	pop	r29
     9a2:	08 95       	ret

000009a4 <__UART_receiveString>:
    /*** Description:-
     * -IMPORTANT_NOTE__Send String Size at beginning before sending string
     * Function used to receive whole string, pass string{Array_name} By address 
     * and function will fill that variable with received values*/
    void __UART_receiveString(uint8 *p_string)
    {
     9a4:	df 93       	push	r29
     9a6:	cf 93       	push	r28
     9a8:	00 d0       	rcall	.+0      	; 0x9aa <__UART_receiveString+0x6>
     9aa:	00 d0       	rcall	.+0      	; 0x9ac <__UART_receiveString+0x8>
     9ac:	cd b7       	in	r28, 0x3d	; 61
     9ae:	de b7       	in	r29, 0x3e	; 62
     9b0:	9c 83       	std	Y+4, r25	; 0x04
     9b2:	8b 83       	std	Y+3, r24	; 0x03
        uint8 i=0,string_size;
     9b4:	1a 82       	std	Y+2, r1	; 0x02

        /*Receive First the String Size*/
        string_size = __UART_receiveByte();
     9b6:	0e 94 aa 04 	call	0x954	; 0x954 <__UART_receiveByte>
     9ba:	89 83       	std	Y+1, r24	; 0x01

        /*Fill the passed array by address with received string*/
        for(i=0 ; i<string_size ; i++)
     9bc:	1a 82       	std	Y+2, r1	; 0x02
     9be:	0d c0       	rjmp	.+26     	; 0x9da <__UART_receiveString+0x36>
        {
            *p_string = __UART_receiveByte();
     9c0:	0e 94 aa 04 	call	0x954	; 0x954 <__UART_receiveByte>
     9c4:	eb 81       	ldd	r30, Y+3	; 0x03
     9c6:	fc 81       	ldd	r31, Y+4	; 0x04
     9c8:	80 83       	st	Z, r24
            p_string++;
     9ca:	8b 81       	ldd	r24, Y+3	; 0x03
     9cc:	9c 81       	ldd	r25, Y+4	; 0x04
     9ce:	01 96       	adiw	r24, 0x01	; 1
     9d0:	9c 83       	std	Y+4, r25	; 0x04
     9d2:	8b 83       	std	Y+3, r24	; 0x03

        /*Receive First the String Size*/
        string_size = __UART_receiveByte();

        /*Fill the passed array by address with received string*/
        for(i=0 ; i<string_size ; i++)
     9d4:	8a 81       	ldd	r24, Y+2	; 0x02
     9d6:	8f 5f       	subi	r24, 0xFF	; 255
     9d8:	8a 83       	std	Y+2, r24	; 0x02
     9da:	9a 81       	ldd	r25, Y+2	; 0x02
     9dc:	89 81       	ldd	r24, Y+1	; 0x01
     9de:	98 17       	cp	r25, r24
     9e0:	78 f3       	brcs	.-34     	; 0x9c0 <__UART_receiveString+0x1c>
            *p_string = __UART_receiveByte();
            p_string++;
        }

        /*Add NULL Terminator at the end of String*/
        *p_string = '\0';
     9e2:	eb 81       	ldd	r30, Y+3	; 0x03
     9e4:	fc 81       	ldd	r31, Y+4	; 0x04
     9e6:	10 82       	st	Z, r1
    }
     9e8:	0f 90       	pop	r0
     9ea:	0f 90       	pop	r0
     9ec:	0f 90       	pop	r0
     9ee:	0f 90       	pop	r0
     9f0:	cf 91       	pop	r28
     9f2:	df 91       	pop	r29
     9f4:	08 95       	ret

000009f6 <main>:
uint8 Authenticated_FLAG=FALSE;
uint8 passwords_entires[16];
uint8 password_length = 0;

int main(void)
{
     9f6:	df 93       	push	r29
     9f8:	cf 93       	push	r28
     9fa:	cd b7       	in	r28, 0x3d	; 61
     9fc:	de b7       	in	r29, 0x3e	; 62
     9fe:	2d 97       	sbiw	r28, 0x0d	; 13
     a00:	0f b6       	in	r0, 0x3f	; 63
     a02:	f8 94       	cli
     a04:	de bf       	out	0x3e, r29	; 62
     a06:	0f be       	out	0x3f, r0	; 63
     a08:	cd bf       	out	0x3d, r28	; 61
	/*-------------------------------------------------------------------------*/
	uint8 pressed_key=0;
     a0a:	19 82       	std	Y+1, r1	; 0x01
	/*-------------------------------------------------------------------------*/
	/*UART Configuration Parameters*/
	UART_config uart_configs = {9600, _8_BIT_DATA, ONE_STOP_BITS, DISABLE_PARITY};
     a0c:	9e 01       	movw	r18, r28
     a0e:	2e 5f       	subi	r18, 0xFE	; 254
     a10:	3f 4f       	sbci	r19, 0xFF	; 255
     a12:	3a 87       	std	Y+10, r19	; 0x0a
     a14:	29 87       	std	Y+9, r18	; 0x09
     a16:	8e e9       	ldi	r24, 0x9E	; 158
     a18:	91 e0       	ldi	r25, 0x01	; 1
     a1a:	9c 87       	std	Y+12, r25	; 0x0c
     a1c:	8b 87       	std	Y+11, r24	; 0x0b
     a1e:	95 e0       	ldi	r25, 0x05	; 5
     a20:	9d 87       	std	Y+13, r25	; 0x0d
     a22:	eb 85       	ldd	r30, Y+11	; 0x0b
     a24:	fc 85       	ldd	r31, Y+12	; 0x0c
     a26:	00 80       	ld	r0, Z
     a28:	2b 85       	ldd	r18, Y+11	; 0x0b
     a2a:	3c 85       	ldd	r19, Y+12	; 0x0c
     a2c:	2f 5f       	subi	r18, 0xFF	; 255
     a2e:	3f 4f       	sbci	r19, 0xFF	; 255
     a30:	3c 87       	std	Y+12, r19	; 0x0c
     a32:	2b 87       	std	Y+11, r18	; 0x0b
     a34:	e9 85       	ldd	r30, Y+9	; 0x09
     a36:	fa 85       	ldd	r31, Y+10	; 0x0a
     a38:	00 82       	st	Z, r0
     a3a:	29 85       	ldd	r18, Y+9	; 0x09
     a3c:	3a 85       	ldd	r19, Y+10	; 0x0a
     a3e:	2f 5f       	subi	r18, 0xFF	; 255
     a40:	3f 4f       	sbci	r19, 0xFF	; 255
     a42:	3a 87       	std	Y+10, r19	; 0x0a
     a44:	29 87       	std	Y+9, r18	; 0x09
     a46:	3d 85       	ldd	r19, Y+13	; 0x0d
     a48:	31 50       	subi	r19, 0x01	; 1
     a4a:	3d 87       	std	Y+13, r19	; 0x0d
     a4c:	8d 85       	ldd	r24, Y+13	; 0x0d
     a4e:	88 23       	and	r24, r24
     a50:	41 f7       	brne	.-48     	; 0xa22 <main+0x2c>
	/*-------------------------------------------------------------------------*/

	__DIO_setPinDirection(DDR_C, PC0, OUTPUT_PIN);
     a52:	82 e0       	ldi	r24, 0x02	; 2
     a54:	60 e0       	ldi	r22, 0x00	; 0
     a56:	41 e0       	ldi	r20, 0x01	; 1
     a58:	0e 94 49 00 	call	0x92	; 0x92 <__DIO_setPinDirection>
	__DIO_writeOutputPinValue(DDR_C, PC0, LOW);
     a5c:	82 e0       	ldi	r24, 0x02	; 2
     a5e:	60 e0       	ldi	r22, 0x00	; 0
     a60:	40 e0       	ldi	r20, 0x00	; 0
     a62:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <__DIO_writeOutputPinValue>

	/*-------------------------------------------------------------------------*/
	/* Initialize External Interrupt Buttons */
	__INT0_init(FALLING_EDGE, EN_PULLUP);
     a66:	82 e0       	ldi	r24, 0x02	; 2
     a68:	61 e0       	ldi	r22, 0x01	; 1
     a6a:	0e 94 4c 0a 	call	0x1498	; 0x1498 <__INT0_init>
	__INT1_init(FALLING_EDGE, EN_PULLUP);
     a6e:	82 e0       	ldi	r24, 0x02	; 2
     a70:	61 e0       	ldi	r22, 0x01	; 1
     a72:	0e 94 0b 0b 	call	0x1616	; 0x1616 <__INT1_init>
	__INT0_setISRCallBackFuncPointer(externalInterrupt0_CloseButton_ISRFunc);
     a76:	83 ef       	ldi	r24, 0xF3	; 243
     a78:	99 e0       	ldi	r25, 0x09	; 9
     a7a:	0e 94 3a 0a 	call	0x1474	; 0x1474 <__INT0_setISRCallBackFuncPointer>
	__INT1_setISRCallBackFuncPointer(externalInterrupt1_OpenButton__ISRFunc);
     a7e:	8b ed       	ldi	r24, 0xDB	; 219
     a80:	99 e0       	ldi	r25, 0x09	; 9
     a82:	0e 94 f9 0a 	call	0x15f2	; 0x15f2 <__INT1_setISRCallBackFuncPointer>

	/* Initialize the ENTER Button */
	__DIO_setPinDirection(DDR_A, PA7, INPUT_PIN);
     a86:	80 e0       	ldi	r24, 0x00	; 0
     a88:	67 e0       	ldi	r22, 0x07	; 7
     a8a:	40 e0       	ldi	r20, 0x00	; 0
     a8c:	0e 94 49 00 	call	0x92	; 0x92 <__DIO_setPinDirection>
	__DIO_enableInternalPullupResistance(PORT_A, PA7);
     a90:	80 e0       	ldi	r24, 0x00	; 0
     a92:	67 e0       	ldi	r22, 0x07	; 7
     a94:	0e 94 a8 00 	call	0x150	; 0x150 <__DIO_enableInternalPullupResistance>

	/* Initialize LCD Hardware */
	_LCD_init();
     a98:	0e 94 0a 02 	call	0x414	; 0x414 <_LCD_init>

	/* Initialize UART Module */
	__UART_init(&uart_configs);
     a9c:	ce 01       	movw	r24, r28
     a9e:	02 96       	adiw	r24, 0x02	; 2
     aa0:	0e 94 ab 03 	call	0x756	; 0x756 <__UART_init>
	/*-------------------------------------------------------------------------*/

	/*-------------------------------------------------------------------------*/
	do //while(FOREVER)
	{
		systemPasswordSetup(NEW_PASSWORD_SETUP);
     aa4:	80 e0       	ldi	r24, 0x00	; 0
     aa6:	0e 94 25 07 	call	0xe4a	; 0xe4a <systemPasswordSetup>
		_LCD_clearScreen();
     aaa:	0e 94 a1 03 	call	0x742	; 0x742 <_LCD_clearScreen>
		_LCD_displayString(" Saving Password...");
     aae:	80 e6       	ldi	r24, 0x60	; 96
     ab0:	90 e0       	ldi	r25, 0x00	; 0
     ab2:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <_LCD_displayString>

		while( __UART_receiveByte() != UART_READY );
     ab6:	0e 94 aa 04 	call	0x954	; 0x954 <__UART_receiveByte>
     aba:	8f 3f       	cpi	r24, 0xFF	; 255
     abc:	e1 f7       	brne	.-8      	; 0xab6 <main+0xc0>
		__UART_sendByte(SETUP_NEW_PASSWORD);__DIO_writeOutputPinValue(DDR_C, PC0, 1);
     abe:	81 e0       	ldi	r24, 0x01	; 1
     ac0:	0e 94 6d 04 	call	0x8da	; 0x8da <__UART_sendByte>
     ac4:	82 e0       	ldi	r24, 0x02	; 2
     ac6:	60 e0       	ldi	r22, 0x00	; 0
     ac8:	41 e0       	ldi	r20, 0x01	; 1
     aca:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <__DIO_writeOutputPinValue>

		while( __UART_receiveByte() != UART_READY );
     ace:	0e 94 aa 04 	call	0x954	; 0x954 <__UART_receiveByte>
     ad2:	8f 3f       	cpi	r24, 0xFF	; 255
     ad4:	e1 f7       	brne	.-8      	; 0xace <main+0xd8>
		__UART_sendByte(10);
     ad6:	8a e0       	ldi	r24, 0x0A	; 10
     ad8:	0e 94 6d 04 	call	0x8da	; 0x8da <__UART_sendByte>
		__UART_sendString(passwords_entires);//__DIO_writeOutputPinValue(DDR_C, PC0, 0);
     adc:	81 eb       	ldi	r24, 0xB1	; 177
     ade:	91 e0       	ldi	r25, 0x01	; 1
     ae0:	0e 94 8e 04 	call	0x91c	; 0x91c <__UART_sendString>

		while( __UART_receiveByte() != UART_READY );
     ae4:	0e 94 aa 04 	call	0x954	; 0x954 <__UART_receiveByte>
     ae8:	8f 3f       	cpi	r24, 0xFF	; 255
     aea:	e1 f7       	brne	.-8      	; 0xae4 <main+0xee>
		APPROX_1SEC_DELAY;APPROX_1SEC_DELAY;//__DIO_writeOutputPinValue(DDR_C, PC0, 1);
     aec:	10 92 b0 01 	sts	0x01B0, r1
     af0:	10 92 af 01 	sts	0x01AF, r1
     af4:	09 c0       	rjmp	.+18     	; 0xb08 <main+0x112>
     af6:	80 91 af 01 	lds	r24, 0x01AF
     afa:	90 91 b0 01 	lds	r25, 0x01B0
     afe:	01 96       	adiw	r24, 0x01	; 1
     b00:	90 93 b0 01 	sts	0x01B0, r25
     b04:	80 93 af 01 	sts	0x01AF, r24
     b08:	80 91 af 01 	lds	r24, 0x01AF
     b0c:	90 91 b0 01 	lds	r25, 0x01B0
     b10:	ed ef       	ldi	r30, 0xFD	; 253
     b12:	88 3e       	cpi	r24, 0xE8	; 232
     b14:	9e 07       	cpc	r25, r30
     b16:	78 f3       	brcs	.-34     	; 0xaf6 <main+0x100>
     b18:	10 92 b0 01 	sts	0x01B0, r1
     b1c:	10 92 af 01 	sts	0x01AF, r1
     b20:	09 c0       	rjmp	.+18     	; 0xb34 <main+0x13e>
     b22:	80 91 af 01 	lds	r24, 0x01AF
     b26:	90 91 b0 01 	lds	r25, 0x01B0
     b2a:	01 96       	adiw	r24, 0x01	; 1
     b2c:	90 93 b0 01 	sts	0x01B0, r25
     b30:	80 93 af 01 	sts	0x01AF, r24
     b34:	80 91 af 01 	lds	r24, 0x01AF
     b38:	90 91 b0 01 	lds	r25, 0x01B0
     b3c:	fd ef       	ldi	r31, 0xFD	; 253
     b3e:	88 3e       	cpi	r24, 0xE8	; 232
     b40:	9f 07       	cpc	r25, r31
     b42:	78 f3       	brcs	.-34     	; 0xb22 <main+0x12c>

	}while ( __UART_receiveByte != TASK_SUCCEED );
     b44:	8a ea       	ldi	r24, 0xAA	; 170
     b46:	94 e0       	ldi	r25, 0x04	; 4
     b48:	81 31       	cpi	r24, 0x11	; 17
     b4a:	91 05       	cpc	r25, r1
     b4c:	09 f0       	breq	.+2      	; 0xb50 <main+0x15a>
     b4e:	aa cf       	rjmp	.-172    	; 0xaa4 <main+0xae>
	_LCD_displayString("  Succeeded!");
     b50:	84 e7       	ldi	r24, 0x74	; 116
     b52:	90 e0       	ldi	r25, 0x00	; 0
     b54:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <_LCD_displayString>
	/*-------------------------------------------------------------------------*/

	while(FOREVER)
	{
		_LCD_clearScreen();
     b58:	0e 94 a1 03 	call	0x742	; 0x742 <_LCD_clearScreen>
		//_LCD_adjustCursorPosition(0,0);
		_LCD_displayString("-Select from below options:-");
     b5c:	81 e8       	ldi	r24, 0x81	; 129
     b5e:	90 e0       	ldi	r25, 0x00	; 0
     b60:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <_LCD_displayString>
		_LCD_adjustCursorPosition(1,0);
     b64:	81 e0       	ldi	r24, 0x01	; 1
     b66:	60 e0       	ldi	r22, 0x00	; 0
     b68:	0e 94 46 03 	call	0x68c	; 0x68c <_LCD_adjustCursorPosition>
		_LCD_displayString(" [*]Change Passwd [#]User Authen");
     b6c:	8e e9       	ldi	r24, 0x9E	; 158
     b6e:	90 e0       	ldi	r25, 0x00	; 0
     b70:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <_LCD_displayString>

		pressed_key = _KEYPAD_getCurrentPressedKey();
     b74:	0e 94 8b 0b 	call	0x1716	; 0x1716 <_KEYPAD_getCurrentPressedKey>
     b78:	89 83       	std	Y+1, r24	; 0x01
		switch( pressed_key )
     b7a:	89 81       	ldd	r24, Y+1	; 0x01
     b7c:	28 2f       	mov	r18, r24
     b7e:	30 e0       	ldi	r19, 0x00	; 0
     b80:	38 87       	std	Y+8, r19	; 0x08
     b82:	2f 83       	std	Y+7, r18	; 0x07
     b84:	8f 81       	ldd	r24, Y+7	; 0x07
     b86:	98 85       	ldd	r25, Y+8	; 0x08
     b88:	83 32       	cpi	r24, 0x23	; 35
     b8a:	91 05       	cpc	r25, r1
     b8c:	09 f4       	brne	.+2      	; 0xb90 <main+0x19a>
     b8e:	5b c0       	rjmp	.+182    	; 0xc46 <main+0x250>
     b90:	ef 81       	ldd	r30, Y+7	; 0x07
     b92:	f8 85       	ldd	r31, Y+8	; 0x08
     b94:	ea 32       	cpi	r30, 0x2A	; 42
     b96:	f1 05       	cpc	r31, r1
     b98:	f9 f6       	brne	.-66     	; 0xb58 <main+0x162>
		{
		case '*': // User Changing Password
			do //while(FOREVER)
			{
				systemPasswordSetup(CHANGE_PASSWORD_SETUP);
     b9a:	81 e0       	ldi	r24, 0x01	; 1
     b9c:	0e 94 25 07 	call	0xe4a	; 0xe4a <systemPasswordSetup>
				_LCD_clearScreen();
     ba0:	0e 94 a1 03 	call	0x742	; 0x742 <_LCD_clearScreen>
				_LCD_displayString(" Saving Password...");
     ba4:	80 e6       	ldi	r24, 0x60	; 96
     ba6:	90 e0       	ldi	r25, 0x00	; 0
     ba8:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <_LCD_displayString>

				while( __UART_receiveByte() != UART_READY );
     bac:	0e 94 aa 04 	call	0x954	; 0x954 <__UART_receiveByte>
     bb0:	8f 3f       	cpi	r24, 0xFF	; 255
     bb2:	e1 f7       	brne	.-8      	; 0xbac <main+0x1b6>
				__UART_sendByte(CHANGE_PASSWORD);
     bb4:	82 e0       	ldi	r24, 0x02	; 2
     bb6:	0e 94 6d 04 	call	0x8da	; 0x8da <__UART_sendByte>

				while( __UART_receiveByte() != UART_READY );
     bba:	0e 94 aa 04 	call	0x954	; 0x954 <__UART_receiveByte>
     bbe:	8f 3f       	cpi	r24, 0xFF	; 255
     bc0:	e1 f7       	brne	.-8      	; 0xbba <main+0x1c4>
				__UART_sendByte(15);
     bc2:	8f e0       	ldi	r24, 0x0F	; 15
     bc4:	0e 94 6d 04 	call	0x8da	; 0x8da <__UART_sendByte>
				__UART_sendString(passwords_entires);
     bc8:	81 eb       	ldi	r24, 0xB1	; 177
     bca:	91 e0       	ldi	r25, 0x01	; 1
     bcc:	0e 94 8e 04 	call	0x91c	; 0x91c <__UART_sendString>

				while( __UART_receiveByte() != UART_READY );
     bd0:	0e 94 aa 04 	call	0x954	; 0x954 <__UART_receiveByte>
     bd4:	8f 3f       	cpi	r24, 0xFF	; 255
     bd6:	e1 f7       	brne	.-8      	; 0xbd0 <main+0x1da>
				APPROX_1SEC_DELAY;APPROX_1SEC_DELAY;
     bd8:	10 92 b0 01 	sts	0x01B0, r1
     bdc:	10 92 af 01 	sts	0x01AF, r1
     be0:	09 c0       	rjmp	.+18     	; 0xbf4 <main+0x1fe>
     be2:	80 91 af 01 	lds	r24, 0x01AF
     be6:	90 91 b0 01 	lds	r25, 0x01B0
     bea:	01 96       	adiw	r24, 0x01	; 1
     bec:	90 93 b0 01 	sts	0x01B0, r25
     bf0:	80 93 af 01 	sts	0x01AF, r24
     bf4:	80 91 af 01 	lds	r24, 0x01AF
     bf8:	90 91 b0 01 	lds	r25, 0x01B0
     bfc:	fd ef       	ldi	r31, 0xFD	; 253
     bfe:	88 3e       	cpi	r24, 0xE8	; 232
     c00:	9f 07       	cpc	r25, r31
     c02:	78 f3       	brcs	.-34     	; 0xbe2 <main+0x1ec>
     c04:	10 92 b0 01 	sts	0x01B0, r1
     c08:	10 92 af 01 	sts	0x01AF, r1
     c0c:	09 c0       	rjmp	.+18     	; 0xc20 <main+0x22a>
     c0e:	80 91 af 01 	lds	r24, 0x01AF
     c12:	90 91 b0 01 	lds	r25, 0x01B0
     c16:	01 96       	adiw	r24, 0x01	; 1
     c18:	90 93 b0 01 	sts	0x01B0, r25
     c1c:	80 93 af 01 	sts	0x01AF, r24
     c20:	80 91 af 01 	lds	r24, 0x01AF
     c24:	90 91 b0 01 	lds	r25, 0x01B0
     c28:	2d ef       	ldi	r18, 0xFD	; 253
     c2a:	88 3e       	cpi	r24, 0xE8	; 232
     c2c:	92 07       	cpc	r25, r18
     c2e:	78 f3       	brcs	.-34     	; 0xc0e <main+0x218>

			}while ( __UART_receiveByte != TASK_SUCCEED );
     c30:	8a ea       	ldi	r24, 0xAA	; 170
     c32:	94 e0       	ldi	r25, 0x04	; 4
     c34:	81 31       	cpi	r24, 0x11	; 17
     c36:	91 05       	cpc	r25, r1
     c38:	09 f0       	breq	.+2      	; 0xc3c <main+0x246>
     c3a:	af cf       	rjmp	.-162    	; 0xb9a <main+0x1a4>
			_LCD_displayString("  Succeeded!");
     c3c:	84 e7       	ldi	r24, 0x74	; 116
     c3e:	90 e0       	ldi	r25, 0x00	; 0
     c40:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <_LCD_displayString>
     c44:	89 cf       	rjmp	.-238    	; 0xb58 <main+0x162>
			break;

		case '#': // User Login 
			do //while(FOREVER)
			{
				systemUserAuthenticate();
     c46:	0e 94 85 06 	call	0xd0a	; 0xd0a <systemUserAuthenticate>
				_LCD_clearScreen();
     c4a:	0e 94 a1 03 	call	0x742	; 0x742 <_LCD_clearScreen>
				_LCD_displayString(" User Login...");
     c4e:	8f eb       	ldi	r24, 0xBF	; 191
     c50:	90 e0       	ldi	r25, 0x00	; 0
     c52:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <_LCD_displayString>

				while( __UART_receiveByte() != UART_READY );
     c56:	0e 94 aa 04 	call	0x954	; 0x954 <__UART_receiveByte>
     c5a:	8f 3f       	cpi	r24, 0xFF	; 255
     c5c:	e1 f7       	brne	.-8      	; 0xc56 <main+0x260>
				__UART_sendByte(CHECK_LOGIN_CREDENTIALS);
     c5e:	83 e0       	ldi	r24, 0x03	; 3
     c60:	0e 94 6d 04 	call	0x8da	; 0x8da <__UART_sendByte>

				while( __UART_receiveByte() != UART_READY );
     c64:	0e 94 aa 04 	call	0x954	; 0x954 <__UART_receiveByte>
     c68:	8f 3f       	cpi	r24, 0xFF	; 255
     c6a:	e1 f7       	brne	.-8      	; 0xc64 <main+0x26e>
				__UART_sendByte(5);
     c6c:	85 e0       	ldi	r24, 0x05	; 5
     c6e:	0e 94 6d 04 	call	0x8da	; 0x8da <__UART_sendByte>
				__UART_sendString(passwords_entires);
     c72:	81 eb       	ldi	r24, 0xB1	; 177
     c74:	91 e0       	ldi	r25, 0x01	; 1
     c76:	0e 94 8e 04 	call	0x91c	; 0x91c <__UART_sendString>

				while( __UART_receiveByte() != UART_READY );
     c7a:	0e 94 aa 04 	call	0x954	; 0x954 <__UART_receiveByte>
     c7e:	8f 3f       	cpi	r24, 0xFF	; 255
     c80:	e1 f7       	brne	.-8      	; 0xc7a <main+0x284>
				APPROX_1SEC_DELAY;APPROX_1SEC_DELAY;
     c82:	10 92 b0 01 	sts	0x01B0, r1
     c86:	10 92 af 01 	sts	0x01AF, r1
     c8a:	09 c0       	rjmp	.+18     	; 0xc9e <main+0x2a8>
     c8c:	80 91 af 01 	lds	r24, 0x01AF
     c90:	90 91 b0 01 	lds	r25, 0x01B0
     c94:	01 96       	adiw	r24, 0x01	; 1
     c96:	90 93 b0 01 	sts	0x01B0, r25
     c9a:	80 93 af 01 	sts	0x01AF, r24
     c9e:	80 91 af 01 	lds	r24, 0x01AF
     ca2:	90 91 b0 01 	lds	r25, 0x01B0
     ca6:	3d ef       	ldi	r19, 0xFD	; 253
     ca8:	88 3e       	cpi	r24, 0xE8	; 232
     caa:	93 07       	cpc	r25, r19
     cac:	78 f3       	brcs	.-34     	; 0xc8c <main+0x296>
     cae:	10 92 b0 01 	sts	0x01B0, r1
     cb2:	10 92 af 01 	sts	0x01AF, r1
     cb6:	09 c0       	rjmp	.+18     	; 0xcca <main+0x2d4>
     cb8:	80 91 af 01 	lds	r24, 0x01AF
     cbc:	90 91 b0 01 	lds	r25, 0x01B0
     cc0:	01 96       	adiw	r24, 0x01	; 1
     cc2:	90 93 b0 01 	sts	0x01B0, r25
     cc6:	80 93 af 01 	sts	0x01AF, r24
     cca:	80 91 af 01 	lds	r24, 0x01AF
     cce:	90 91 b0 01 	lds	r25, 0x01B0
     cd2:	ed ef       	ldi	r30, 0xFD	; 253
     cd4:	88 3e       	cpi	r24, 0xE8	; 232
     cd6:	9e 07       	cpc	r25, r30
     cd8:	78 f3       	brcs	.-34     	; 0xcb8 <main+0x2c2>

			}while ( __UART_receiveByte != TASK_SUCCEED );
     cda:	8a ea       	ldi	r24, 0xAA	; 170
     cdc:	94 e0       	ldi	r25, 0x04	; 4
     cde:	81 31       	cpi	r24, 0x11	; 17
     ce0:	91 05       	cpc	r25, r1
     ce2:	09 f0       	breq	.+2      	; 0xce6 <main+0x2f0>
     ce4:	b0 cf       	rjmp	.-160    	; 0xc46 <main+0x250>
			_LCD_displayString("  Succeeded!");
     ce6:	84 e7       	ldi	r24, 0x74	; 116
     ce8:	90 e0       	ldi	r25, 0x00	; 0
     cea:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <_LCD_displayString>
			_LCD_displayString_atCursor(" >>> Open The Door", 1, 0);
     cee:	8e ec       	ldi	r24, 0xCE	; 206
     cf0:	90 e0       	ldi	r25, 0x00	; 0
     cf2:	61 e0       	ldi	r22, 0x01	; 1
     cf4:	40 e0       	ldi	r20, 0x00	; 0
     cf6:	0e 94 88 03 	call	0x710	; 0x710 <_LCD_displayString_atCursor>
			
			Authenticated_FLAG = TRUE;
     cfa:	81 e0       	ldi	r24, 0x01	; 1
     cfc:	80 93 a5 01 	sts	0x01A5, r24
			while( Authenticated_FLAG );
     d00:	80 91 a5 01 	lds	r24, 0x01A5
     d04:	88 23       	and	r24, r24
     d06:	e1 f7       	brne	.-8      	; 0xd00 <main+0x30a>
     d08:	27 cf       	rjmp	.-434    	; 0xb58 <main+0x162>

00000d0a <systemUserAuthenticate>:
		}
	}
}

void systemUserAuthenticate(void)
{
     d0a:	0f 93       	push	r16
     d0c:	1f 93       	push	r17
     d0e:	df 93       	push	r29
     d10:	cf 93       	push	r28
     d12:	cd b7       	in	r28, 0x3d	; 61
     d14:	de b7       	in	r29, 0x3e	; 62
	password_length=0;
     d16:	10 92 a6 01 	sts	0x01A6, r1

	_LCD_clearScreen();
     d1a:	0e 94 a1 03 	call	0x742	; 0x742 <_LCD_clearScreen>
	_LCD_displayString_atCursor( "Enter Password:-", 0, 0);
     d1e:	81 ee       	ldi	r24, 0xE1	; 225
     d20:	90 e0       	ldi	r25, 0x00	; 0
     d22:	60 e0       	ldi	r22, 0x00	; 0
     d24:	40 e0       	ldi	r20, 0x00	; 0
     d26:	0e 94 88 03 	call	0x710	; 0x710 <_LCD_displayString_atCursor>
	while(FOREVER)
	{
		passwords_entires[password_length] = _KEYPAD_getCurrentPressedKey();
     d2a:	80 91 a6 01 	lds	r24, 0x01A6
     d2e:	08 2f       	mov	r16, r24
     d30:	10 e0       	ldi	r17, 0x00	; 0
     d32:	0e 94 8b 0b 	call	0x1716	; 0x1716 <_KEYPAD_getCurrentPressedKey>
     d36:	f8 01       	movw	r30, r16
     d38:	ef 54       	subi	r30, 0x4F	; 79
     d3a:	fe 4f       	sbci	r31, 0xFE	; 254
     d3c:	80 83       	st	Z, r24
		APPROX_1SEC_DELAY;APPROX_1SEC_DELAY;APPROX_HALF_SEC_DELAY;
     d3e:	10 92 b0 01 	sts	0x01B0, r1
     d42:	10 92 af 01 	sts	0x01AF, r1
     d46:	09 c0       	rjmp	.+18     	; 0xd5a <systemUserAuthenticate+0x50>
     d48:	80 91 af 01 	lds	r24, 0x01AF
     d4c:	90 91 b0 01 	lds	r25, 0x01B0
     d50:	01 96       	adiw	r24, 0x01	; 1
     d52:	90 93 b0 01 	sts	0x01B0, r25
     d56:	80 93 af 01 	sts	0x01AF, r24
     d5a:	80 91 af 01 	lds	r24, 0x01AF
     d5e:	90 91 b0 01 	lds	r25, 0x01B0
     d62:	2d ef       	ldi	r18, 0xFD	; 253
     d64:	88 3e       	cpi	r24, 0xE8	; 232
     d66:	92 07       	cpc	r25, r18
     d68:	78 f3       	brcs	.-34     	; 0xd48 <systemUserAuthenticate+0x3e>
     d6a:	10 92 b0 01 	sts	0x01B0, r1
     d6e:	10 92 af 01 	sts	0x01AF, r1
     d72:	09 c0       	rjmp	.+18     	; 0xd86 <systemUserAuthenticate+0x7c>
     d74:	80 91 af 01 	lds	r24, 0x01AF
     d78:	90 91 b0 01 	lds	r25, 0x01B0
     d7c:	01 96       	adiw	r24, 0x01	; 1
     d7e:	90 93 b0 01 	sts	0x01B0, r25
     d82:	80 93 af 01 	sts	0x01AF, r24
     d86:	80 91 af 01 	lds	r24, 0x01AF
     d8a:	90 91 b0 01 	lds	r25, 0x01B0
     d8e:	2d ef       	ldi	r18, 0xFD	; 253
     d90:	88 3e       	cpi	r24, 0xE8	; 232
     d92:	92 07       	cpc	r25, r18
     d94:	78 f3       	brcs	.-34     	; 0xd74 <systemUserAuthenticate+0x6a>
     d96:	10 92 b0 01 	sts	0x01B0, r1
     d9a:	10 92 af 01 	sts	0x01AF, r1
     d9e:	09 c0       	rjmp	.+18     	; 0xdb2 <systemUserAuthenticate+0xa8>
     da0:	80 91 af 01 	lds	r24, 0x01AF
     da4:	90 91 b0 01 	lds	r25, 0x01B0
     da8:	01 96       	adiw	r24, 0x01	; 1
     daa:	90 93 b0 01 	sts	0x01B0, r25
     dae:	80 93 af 01 	sts	0x01AF, r24
     db2:	80 91 af 01 	lds	r24, 0x01AF
     db6:	90 91 b0 01 	lds	r25, 0x01B0
     dba:	28 e8       	ldi	r18, 0x88	; 136
     dbc:	88 3b       	cpi	r24, 0xB8	; 184
     dbe:	92 07       	cpc	r25, r18
     dc0:	78 f3       	brcs	.-34     	; 0xda0 <systemUserAuthenticate+0x96>

		if(passwords_entires[password_length] >= '0' && passwords_entires[password_length] <= '9')
     dc2:	80 91 a6 01 	lds	r24, 0x01A6
     dc6:	88 2f       	mov	r24, r24
     dc8:	90 e0       	ldi	r25, 0x00	; 0
     dca:	fc 01       	movw	r30, r24
     dcc:	ef 54       	subi	r30, 0x4F	; 79
     dce:	fe 4f       	sbci	r31, 0xFE	; 254
     dd0:	80 81       	ld	r24, Z
     dd2:	80 33       	cpi	r24, 0x30	; 48
     dd4:	08 f4       	brcc	.+2      	; 0xdd8 <systemUserAuthenticate+0xce>
     dd6:	a9 cf       	rjmp	.-174    	; 0xd2a <systemUserAuthenticate+0x20>
     dd8:	80 91 a6 01 	lds	r24, 0x01A6
     ddc:	88 2f       	mov	r24, r24
     dde:	90 e0       	ldi	r25, 0x00	; 0
     de0:	fc 01       	movw	r30, r24
     de2:	ef 54       	subi	r30, 0x4F	; 79
     de4:	fe 4f       	sbci	r31, 0xFE	; 254
     de6:	80 81       	ld	r24, Z
     de8:	8a 33       	cpi	r24, 0x3A	; 58
     dea:	08 f0       	brcs	.+2      	; 0xdee <systemUserAuthenticate+0xe4>
     dec:	9e cf       	rjmp	.-196    	; 0xd2a <systemUserAuthenticate+0x20>
		{
			_LCD_adjustCursorPosition(1,password_length);
     dee:	90 91 a6 01 	lds	r25, 0x01A6
     df2:	81 e0       	ldi	r24, 0x01	; 1
     df4:	69 2f       	mov	r22, r25
     df6:	0e 94 46 03 	call	0x68c	; 0x68c <_LCD_adjustCursorPosition>
			_LCD_displayCharacter('*');
     dfa:	8a e2       	ldi	r24, 0x2A	; 42
     dfc:	0e 94 7f 02 	call	0x4fe	; 0x4fe <_LCD_displayCharacter>
			password_length++;
     e00:	80 91 a6 01 	lds	r24, 0x01A6
     e04:	8f 5f       	subi	r24, 0xFF	; 255
     e06:	80 93 a6 01 	sts	0x01A6, r24

			if(password_length == 5)
     e0a:	80 91 a6 01 	lds	r24, 0x01A6
     e0e:	85 30       	cpi	r24, 0x05	; 5
     e10:	09 f0       	breq	.+2      	; 0xe14 <systemUserAuthenticate+0x10a>
     e12:	8b cf       	rjmp	.-234    	; 0xd2a <systemUserAuthenticate+0x20>
			{
				passwords_entires[5] = '\0';
     e14:	10 92 b6 01 	sts	0x01B6, r1
				_LCD_displayString_atCursor("SUBMIT?", 0, 25);
     e18:	82 ef       	ldi	r24, 0xF2	; 242
     e1a:	90 e0       	ldi	r25, 0x00	; 0
     e1c:	60 e0       	ldi	r22, 0x00	; 0
     e1e:	49 e1       	ldi	r20, 0x19	; 25
     e20:	0e 94 88 03 	call	0x710	; 0x710 <_LCD_displayString_atCursor>
				_LCD_displayString_atCursor("Press: Enter", 1, 20);
     e24:	8a ef       	ldi	r24, 0xFA	; 250
     e26:	90 e0       	ldi	r25, 0x00	; 0
     e28:	61 e0       	ldi	r22, 0x01	; 1
     e2a:	44 e1       	ldi	r20, 0x14	; 20
     e2c:	0e 94 88 03 	call	0x710	; 0x710 <_LCD_displayString_atCursor>
				while( __DIO_readInputPinValue(PIN_A, PA7)==HIGH );
     e30:	80 e0       	ldi	r24, 0x00	; 0
     e32:	67 e0       	ldi	r22, 0x07	; 7
     e34:	0e 94 37 01 	call	0x26e	; 0x26e <__DIO_readInputPinValue>
     e38:	81 30       	cpi	r24, 0x01	; 1
     e3a:	d1 f3       	breq	.-12     	; 0xe30 <systemUserAuthenticate+0x126>
				password_length=0;
     e3c:	10 92 a6 01 	sts	0x01A6, r1
				break;
			}
		}
	}
     e40:	cf 91       	pop	r28
     e42:	df 91       	pop	r29
     e44:	1f 91       	pop	r17
     e46:	0f 91       	pop	r16
     e48:	08 95       	ret

00000e4a <systemPasswordSetup>:


}

uint8 systemPasswordSetup(uint8 password_setup)
{
     e4a:	0f 93       	push	r16
     e4c:	1f 93       	push	r17
     e4e:	df 93       	push	r29
     e50:	cf 93       	push	r28
     e52:	00 d0       	rcall	.+0      	; 0xe54 <systemPasswordSetup+0xa>
     e54:	cd b7       	in	r28, 0x3d	; 61
     e56:	de b7       	in	r29, 0x3e	; 62
     e58:	8a 83       	std	Y+2, r24	; 0x02
	uint8 offset=0; 	
     e5a:	19 82       	std	Y+1, r1	; 0x01
	
	password_length=0;
     e5c:	10 92 a6 01 	sts	0x01A6, r1

	if( password_setup == NEW_PASSWORD_SETUP )
     e60:	8a 81       	ldd	r24, Y+2	; 0x02
     e62:	88 23       	and	r24, r24
     e64:	09 f0       	breq	.+2      	; 0xe68 <systemPasswordSetup+0x1e>
     e66:	b5 c0       	rjmp	.+362    	; 0xfd2 <systemPasswordSetup+0x188>
	{
		_LCD_displayString("     --> Welcome to DLS <--");
     e68:	87 e0       	ldi	r24, 0x07	; 7
     e6a:	91 e0       	ldi	r25, 0x01	; 1
     e6c:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <_LCD_displayString>
		APPROX_1SEC_DELAY;APPROX_1SEC_DELAY;APPROX_1SEC_DELAY;
     e70:	10 92 b0 01 	sts	0x01B0, r1
     e74:	10 92 af 01 	sts	0x01AF, r1
     e78:	09 c0       	rjmp	.+18     	; 0xe8c <systemPasswordSetup+0x42>
     e7a:	80 91 af 01 	lds	r24, 0x01AF
     e7e:	90 91 b0 01 	lds	r25, 0x01B0
     e82:	01 96       	adiw	r24, 0x01	; 1
     e84:	90 93 b0 01 	sts	0x01B0, r25
     e88:	80 93 af 01 	sts	0x01AF, r24
     e8c:	80 91 af 01 	lds	r24, 0x01AF
     e90:	90 91 b0 01 	lds	r25, 0x01B0
     e94:	2d ef       	ldi	r18, 0xFD	; 253
     e96:	88 3e       	cpi	r24, 0xE8	; 232
     e98:	92 07       	cpc	r25, r18
     e9a:	78 f3       	brcs	.-34     	; 0xe7a <systemPasswordSetup+0x30>
     e9c:	10 92 b0 01 	sts	0x01B0, r1
     ea0:	10 92 af 01 	sts	0x01AF, r1
     ea4:	09 c0       	rjmp	.+18     	; 0xeb8 <systemPasswordSetup+0x6e>
     ea6:	80 91 af 01 	lds	r24, 0x01AF
     eaa:	90 91 b0 01 	lds	r25, 0x01B0
     eae:	01 96       	adiw	r24, 0x01	; 1
     eb0:	90 93 b0 01 	sts	0x01B0, r25
     eb4:	80 93 af 01 	sts	0x01AF, r24
     eb8:	80 91 af 01 	lds	r24, 0x01AF
     ebc:	90 91 b0 01 	lds	r25, 0x01B0
     ec0:	2d ef       	ldi	r18, 0xFD	; 253
     ec2:	88 3e       	cpi	r24, 0xE8	; 232
     ec4:	92 07       	cpc	r25, r18
     ec6:	78 f3       	brcs	.-34     	; 0xea6 <systemPasswordSetup+0x5c>
     ec8:	10 92 b0 01 	sts	0x01B0, r1
     ecc:	10 92 af 01 	sts	0x01AF, r1
     ed0:	09 c0       	rjmp	.+18     	; 0xee4 <systemPasswordSetup+0x9a>
     ed2:	80 91 af 01 	lds	r24, 0x01AF
     ed6:	90 91 b0 01 	lds	r25, 0x01B0
     eda:	01 96       	adiw	r24, 0x01	; 1
     edc:	90 93 b0 01 	sts	0x01B0, r25
     ee0:	80 93 af 01 	sts	0x01AF, r24
     ee4:	80 91 af 01 	lds	r24, 0x01AF
     ee8:	90 91 b0 01 	lds	r25, 0x01B0
     eec:	2d ef       	ldi	r18, 0xFD	; 253
     eee:	88 3e       	cpi	r24, 0xE8	; 232
     ef0:	92 07       	cpc	r25, r18
     ef2:	78 f3       	brcs	.-34     	; 0xed2 <systemPasswordSetup+0x88>
		APPROX_1SEC_DELAY;APPROX_1SEC_DELAY;APPROX_1SEC_DELAY;
     ef4:	10 92 b0 01 	sts	0x01B0, r1
     ef8:	10 92 af 01 	sts	0x01AF, r1
     efc:	09 c0       	rjmp	.+18     	; 0xf10 <systemPasswordSetup+0xc6>
     efe:	80 91 af 01 	lds	r24, 0x01AF
     f02:	90 91 b0 01 	lds	r25, 0x01B0
     f06:	01 96       	adiw	r24, 0x01	; 1
     f08:	90 93 b0 01 	sts	0x01B0, r25
     f0c:	80 93 af 01 	sts	0x01AF, r24
     f10:	80 91 af 01 	lds	r24, 0x01AF
     f14:	90 91 b0 01 	lds	r25, 0x01B0
     f18:	2d ef       	ldi	r18, 0xFD	; 253
     f1a:	88 3e       	cpi	r24, 0xE8	; 232
     f1c:	92 07       	cpc	r25, r18
     f1e:	78 f3       	brcs	.-34     	; 0xefe <systemPasswordSetup+0xb4>
     f20:	10 92 b0 01 	sts	0x01B0, r1
     f24:	10 92 af 01 	sts	0x01AF, r1
     f28:	09 c0       	rjmp	.+18     	; 0xf3c <systemPasswordSetup+0xf2>
     f2a:	80 91 af 01 	lds	r24, 0x01AF
     f2e:	90 91 b0 01 	lds	r25, 0x01B0
     f32:	01 96       	adiw	r24, 0x01	; 1
     f34:	90 93 b0 01 	sts	0x01B0, r25
     f38:	80 93 af 01 	sts	0x01AF, r24
     f3c:	80 91 af 01 	lds	r24, 0x01AF
     f40:	90 91 b0 01 	lds	r25, 0x01B0
     f44:	2d ef       	ldi	r18, 0xFD	; 253
     f46:	88 3e       	cpi	r24, 0xE8	; 232
     f48:	92 07       	cpc	r25, r18
     f4a:	78 f3       	brcs	.-34     	; 0xf2a <systemPasswordSetup+0xe0>
     f4c:	10 92 b0 01 	sts	0x01B0, r1
     f50:	10 92 af 01 	sts	0x01AF, r1
     f54:	09 c0       	rjmp	.+18     	; 0xf68 <systemPasswordSetup+0x11e>
     f56:	80 91 af 01 	lds	r24, 0x01AF
     f5a:	90 91 b0 01 	lds	r25, 0x01B0
     f5e:	01 96       	adiw	r24, 0x01	; 1
     f60:	90 93 b0 01 	sts	0x01B0, r25
     f64:	80 93 af 01 	sts	0x01AF, r24
     f68:	80 91 af 01 	lds	r24, 0x01AF
     f6c:	90 91 b0 01 	lds	r25, 0x01B0
     f70:	2d ef       	ldi	r18, 0xFD	; 253
     f72:	88 3e       	cpi	r24, 0xE8	; 232
     f74:	92 07       	cpc	r25, r18
     f76:	78 f3       	brcs	.-34     	; 0xf56 <systemPasswordSetup+0x10c>
		APPROX_1SEC_DELAY;APPROX_1SEC_DELAY;
     f78:	10 92 b0 01 	sts	0x01B0, r1
     f7c:	10 92 af 01 	sts	0x01AF, r1
     f80:	09 c0       	rjmp	.+18     	; 0xf94 <systemPasswordSetup+0x14a>
     f82:	80 91 af 01 	lds	r24, 0x01AF
     f86:	90 91 b0 01 	lds	r25, 0x01B0
     f8a:	01 96       	adiw	r24, 0x01	; 1
     f8c:	90 93 b0 01 	sts	0x01B0, r25
     f90:	80 93 af 01 	sts	0x01AF, r24
     f94:	80 91 af 01 	lds	r24, 0x01AF
     f98:	90 91 b0 01 	lds	r25, 0x01B0
     f9c:	2d ef       	ldi	r18, 0xFD	; 253
     f9e:	88 3e       	cpi	r24, 0xE8	; 232
     fa0:	92 07       	cpc	r25, r18
     fa2:	78 f3       	brcs	.-34     	; 0xf82 <systemPasswordSetup+0x138>
     fa4:	10 92 b0 01 	sts	0x01B0, r1
     fa8:	10 92 af 01 	sts	0x01AF, r1
     fac:	09 c0       	rjmp	.+18     	; 0xfc0 <systemPasswordSetup+0x176>
     fae:	80 91 af 01 	lds	r24, 0x01AF
     fb2:	90 91 b0 01 	lds	r25, 0x01B0
     fb6:	01 96       	adiw	r24, 0x01	; 1
     fb8:	90 93 b0 01 	sts	0x01B0, r25
     fbc:	80 93 af 01 	sts	0x01AF, r24
     fc0:	80 91 af 01 	lds	r24, 0x01AF
     fc4:	90 91 b0 01 	lds	r25, 0x01B0
     fc8:	2d ef       	ldi	r18, 0xFD	; 253
     fca:	88 3e       	cpi	r24, 0xE8	; 232
     fcc:	92 07       	cpc	r25, r18
     fce:	78 f3       	brcs	.-34     	; 0xfae <systemPasswordSetup+0x164>
     fd0:	95 c0       	rjmp	.+298    	; 0x10fc <systemPasswordSetup+0x2b2>
	}
	else if( password_setup == CHANGE_PASSWORD_SETUP )
     fd2:	8a 81       	ldd	r24, Y+2	; 0x02
     fd4:	81 30       	cpi	r24, 0x01	; 1
     fd6:	09 f0       	breq	.+2      	; 0xfda <systemPasswordSetup+0x190>
     fd8:	91 c0       	rjmp	.+290    	; 0x10fc <systemPasswordSetup+0x2b2>
	{
		_LCD_clearScreen();
     fda:	0e 94 a1 03 	call	0x742	; 0x742 <_LCD_clearScreen>
		_LCD_displayString_atCursor( "Type Old Password:-", 0, 0);
     fde:	83 e2       	ldi	r24, 0x23	; 35
     fe0:	91 e0       	ldi	r25, 0x01	; 1
     fe2:	60 e0       	ldi	r22, 0x00	; 0
     fe4:	40 e0       	ldi	r20, 0x00	; 0
     fe6:	0e 94 88 03 	call	0x710	; 0x710 <_LCD_displayString_atCursor>
		while(FOREVER)
		{
			passwords_entires[password_length] = _KEYPAD_getCurrentPressedKey();
     fea:	80 91 a6 01 	lds	r24, 0x01A6
     fee:	08 2f       	mov	r16, r24
     ff0:	10 e0       	ldi	r17, 0x00	; 0
     ff2:	0e 94 8b 0b 	call	0x1716	; 0x1716 <_KEYPAD_getCurrentPressedKey>
     ff6:	f8 01       	movw	r30, r16
     ff8:	ef 54       	subi	r30, 0x4F	; 79
     ffa:	fe 4f       	sbci	r31, 0xFE	; 254
     ffc:	80 83       	st	Z, r24
			APPROX_1SEC_DELAY;APPROX_1SEC_DELAY;APPROX_HALF_SEC_DELAY;
     ffe:	10 92 b0 01 	sts	0x01B0, r1
    1002:	10 92 af 01 	sts	0x01AF, r1
    1006:	09 c0       	rjmp	.+18     	; 0x101a <systemPasswordSetup+0x1d0>
    1008:	80 91 af 01 	lds	r24, 0x01AF
    100c:	90 91 b0 01 	lds	r25, 0x01B0
    1010:	01 96       	adiw	r24, 0x01	; 1
    1012:	90 93 b0 01 	sts	0x01B0, r25
    1016:	80 93 af 01 	sts	0x01AF, r24
    101a:	80 91 af 01 	lds	r24, 0x01AF
    101e:	90 91 b0 01 	lds	r25, 0x01B0
    1022:	2d ef       	ldi	r18, 0xFD	; 253
    1024:	88 3e       	cpi	r24, 0xE8	; 232
    1026:	92 07       	cpc	r25, r18
    1028:	78 f3       	brcs	.-34     	; 0x1008 <systemPasswordSetup+0x1be>
    102a:	10 92 b0 01 	sts	0x01B0, r1
    102e:	10 92 af 01 	sts	0x01AF, r1
    1032:	09 c0       	rjmp	.+18     	; 0x1046 <systemPasswordSetup+0x1fc>
    1034:	80 91 af 01 	lds	r24, 0x01AF
    1038:	90 91 b0 01 	lds	r25, 0x01B0
    103c:	01 96       	adiw	r24, 0x01	; 1
    103e:	90 93 b0 01 	sts	0x01B0, r25
    1042:	80 93 af 01 	sts	0x01AF, r24
    1046:	80 91 af 01 	lds	r24, 0x01AF
    104a:	90 91 b0 01 	lds	r25, 0x01B0
    104e:	2d ef       	ldi	r18, 0xFD	; 253
    1050:	88 3e       	cpi	r24, 0xE8	; 232
    1052:	92 07       	cpc	r25, r18
    1054:	78 f3       	brcs	.-34     	; 0x1034 <systemPasswordSetup+0x1ea>
    1056:	10 92 b0 01 	sts	0x01B0, r1
    105a:	10 92 af 01 	sts	0x01AF, r1
    105e:	09 c0       	rjmp	.+18     	; 0x1072 <systemPasswordSetup+0x228>
    1060:	80 91 af 01 	lds	r24, 0x01AF
    1064:	90 91 b0 01 	lds	r25, 0x01B0
    1068:	01 96       	adiw	r24, 0x01	; 1
    106a:	90 93 b0 01 	sts	0x01B0, r25
    106e:	80 93 af 01 	sts	0x01AF, r24
    1072:	80 91 af 01 	lds	r24, 0x01AF
    1076:	90 91 b0 01 	lds	r25, 0x01B0
    107a:	28 e8       	ldi	r18, 0x88	; 136
    107c:	88 3b       	cpi	r24, 0xB8	; 184
    107e:	92 07       	cpc	r25, r18
    1080:	78 f3       	brcs	.-34     	; 0x1060 <systemPasswordSetup+0x216>
			if(passwords_entires[password_length] >= '0' && passwords_entires[password_length] <= '9')
    1082:	80 91 a6 01 	lds	r24, 0x01A6
    1086:	88 2f       	mov	r24, r24
    1088:	90 e0       	ldi	r25, 0x00	; 0
    108a:	fc 01       	movw	r30, r24
    108c:	ef 54       	subi	r30, 0x4F	; 79
    108e:	fe 4f       	sbci	r31, 0xFE	; 254
    1090:	80 81       	ld	r24, Z
    1092:	80 33       	cpi	r24, 0x30	; 48
    1094:	08 f4       	brcc	.+2      	; 0x1098 <systemPasswordSetup+0x24e>
    1096:	a9 cf       	rjmp	.-174    	; 0xfea <systemPasswordSetup+0x1a0>
    1098:	80 91 a6 01 	lds	r24, 0x01A6
    109c:	88 2f       	mov	r24, r24
    109e:	90 e0       	ldi	r25, 0x00	; 0
    10a0:	fc 01       	movw	r30, r24
    10a2:	ef 54       	subi	r30, 0x4F	; 79
    10a4:	fe 4f       	sbci	r31, 0xFE	; 254
    10a6:	80 81       	ld	r24, Z
    10a8:	8a 33       	cpi	r24, 0x3A	; 58
    10aa:	08 f0       	brcs	.+2      	; 0x10ae <systemPasswordSetup+0x264>
    10ac:	9e cf       	rjmp	.-196    	; 0xfea <systemPasswordSetup+0x1a0>
			{
				_LCD_adjustCursorPosition(1,password_length);
    10ae:	90 91 a6 01 	lds	r25, 0x01A6
    10b2:	81 e0       	ldi	r24, 0x01	; 1
    10b4:	69 2f       	mov	r22, r25
    10b6:	0e 94 46 03 	call	0x68c	; 0x68c <_LCD_adjustCursorPosition>
				_LCD_displayCharacter('*');
    10ba:	8a e2       	ldi	r24, 0x2A	; 42
    10bc:	0e 94 7f 02 	call	0x4fe	; 0x4fe <_LCD_displayCharacter>
				password_length++;
    10c0:	80 91 a6 01 	lds	r24, 0x01A6
    10c4:	8f 5f       	subi	r24, 0xFF	; 255
    10c6:	80 93 a6 01 	sts	0x01A6, r24

				if(password_length == 5)
    10ca:	80 91 a6 01 	lds	r24, 0x01A6
    10ce:	85 30       	cpi	r24, 0x05	; 5
    10d0:	09 f0       	breq	.+2      	; 0x10d4 <systemPasswordSetup+0x28a>
    10d2:	8b cf       	rjmp	.-234    	; 0xfea <systemPasswordSetup+0x1a0>
				{
					_LCD_displayString_atCursor("SUBMIT?", 0, 25);
    10d4:	82 ef       	ldi	r24, 0xF2	; 242
    10d6:	90 e0       	ldi	r25, 0x00	; 0
    10d8:	60 e0       	ldi	r22, 0x00	; 0
    10da:	49 e1       	ldi	r20, 0x19	; 25
    10dc:	0e 94 88 03 	call	0x710	; 0x710 <_LCD_displayString_atCursor>
					_LCD_displayString_atCursor("Press: Enter", 1, 20);
    10e0:	8a ef       	ldi	r24, 0xFA	; 250
    10e2:	90 e0       	ldi	r25, 0x00	; 0
    10e4:	61 e0       	ldi	r22, 0x01	; 1
    10e6:	44 e1       	ldi	r20, 0x14	; 20
    10e8:	0e 94 88 03 	call	0x710	; 0x710 <_LCD_displayString_atCursor>
					while( __DIO_readInputPinValue(PIN_A, PA7)==HIGH );
    10ec:	80 e0       	ldi	r24, 0x00	; 0
    10ee:	67 e0       	ldi	r22, 0x07	; 7
    10f0:	0e 94 37 01 	call	0x26e	; 0x26e <__DIO_readInputPinValue>
    10f4:	81 30       	cpi	r24, 0x01	; 1
    10f6:	d1 f3       	breq	.-12     	; 0x10ec <systemPasswordSetup+0x2a2>
					password_length=0;
    10f8:	10 92 a6 01 	sts	0x01A6, r1
				}
			}
		}
	}

	if(password_setup == CHANGE_PASSWORD_SETUP)
    10fc:	8a 81       	ldd	r24, Y+2	; 0x02
    10fe:	81 30       	cpi	r24, 0x01	; 1
    1100:	11 f4       	brne	.+4      	; 0x1106 <systemPasswordSetup+0x2bc>
	{
		offset = 5;
    1102:	85 e0       	ldi	r24, 0x05	; 5
    1104:	89 83       	std	Y+1, r24	; 0x01
	}

	_LCD_clearScreen();
    1106:	0e 94 a1 03 	call	0x742	; 0x742 <_LCD_clearScreen>
	_LCD_displayString_atCursor("Type New Password:-", 0, 0);
    110a:	87 e3       	ldi	r24, 0x37	; 55
    110c:	91 e0       	ldi	r25, 0x01	; 1
    110e:	60 e0       	ldi	r22, 0x00	; 0
    1110:	40 e0       	ldi	r20, 0x00	; 0
    1112:	0e 94 88 03 	call	0x710	; 0x710 <_LCD_displayString_atCursor>
	while(FOREVER)
	{
		passwords_entires[offset+password_length] = _KEYPAD_getCurrentPressedKey();
    1116:	89 81       	ldd	r24, Y+1	; 0x01
    1118:	28 2f       	mov	r18, r24
    111a:	30 e0       	ldi	r19, 0x00	; 0
    111c:	80 91 a6 01 	lds	r24, 0x01A6
    1120:	88 2f       	mov	r24, r24
    1122:	90 e0       	ldi	r25, 0x00	; 0
    1124:	89 01       	movw	r16, r18
    1126:	08 0f       	add	r16, r24
    1128:	19 1f       	adc	r17, r25
    112a:	0e 94 8b 0b 	call	0x1716	; 0x1716 <_KEYPAD_getCurrentPressedKey>
    112e:	f8 01       	movw	r30, r16
    1130:	ef 54       	subi	r30, 0x4F	; 79
    1132:	fe 4f       	sbci	r31, 0xFE	; 254
    1134:	80 83       	st	Z, r24
		APPROX_1SEC_DELAY;APPROX_1SEC_DELAY;APPROX_HALF_SEC_DELAY;
    1136:	10 92 b0 01 	sts	0x01B0, r1
    113a:	10 92 af 01 	sts	0x01AF, r1
    113e:	09 c0       	rjmp	.+18     	; 0x1152 <systemPasswordSetup+0x308>
    1140:	80 91 af 01 	lds	r24, 0x01AF
    1144:	90 91 b0 01 	lds	r25, 0x01B0
    1148:	01 96       	adiw	r24, 0x01	; 1
    114a:	90 93 b0 01 	sts	0x01B0, r25
    114e:	80 93 af 01 	sts	0x01AF, r24
    1152:	80 91 af 01 	lds	r24, 0x01AF
    1156:	90 91 b0 01 	lds	r25, 0x01B0
    115a:	2d ef       	ldi	r18, 0xFD	; 253
    115c:	88 3e       	cpi	r24, 0xE8	; 232
    115e:	92 07       	cpc	r25, r18
    1160:	78 f3       	brcs	.-34     	; 0x1140 <systemPasswordSetup+0x2f6>
    1162:	10 92 b0 01 	sts	0x01B0, r1
    1166:	10 92 af 01 	sts	0x01AF, r1
    116a:	09 c0       	rjmp	.+18     	; 0x117e <systemPasswordSetup+0x334>
    116c:	80 91 af 01 	lds	r24, 0x01AF
    1170:	90 91 b0 01 	lds	r25, 0x01B0
    1174:	01 96       	adiw	r24, 0x01	; 1
    1176:	90 93 b0 01 	sts	0x01B0, r25
    117a:	80 93 af 01 	sts	0x01AF, r24
    117e:	80 91 af 01 	lds	r24, 0x01AF
    1182:	90 91 b0 01 	lds	r25, 0x01B0
    1186:	2d ef       	ldi	r18, 0xFD	; 253
    1188:	88 3e       	cpi	r24, 0xE8	; 232
    118a:	92 07       	cpc	r25, r18
    118c:	78 f3       	brcs	.-34     	; 0x116c <systemPasswordSetup+0x322>
    118e:	10 92 b0 01 	sts	0x01B0, r1
    1192:	10 92 af 01 	sts	0x01AF, r1
    1196:	09 c0       	rjmp	.+18     	; 0x11aa <systemPasswordSetup+0x360>
    1198:	80 91 af 01 	lds	r24, 0x01AF
    119c:	90 91 b0 01 	lds	r25, 0x01B0
    11a0:	01 96       	adiw	r24, 0x01	; 1
    11a2:	90 93 b0 01 	sts	0x01B0, r25
    11a6:	80 93 af 01 	sts	0x01AF, r24
    11aa:	80 91 af 01 	lds	r24, 0x01AF
    11ae:	90 91 b0 01 	lds	r25, 0x01B0
    11b2:	28 e8       	ldi	r18, 0x88	; 136
    11b4:	88 3b       	cpi	r24, 0xB8	; 184
    11b6:	92 07       	cpc	r25, r18
    11b8:	78 f3       	brcs	.-34     	; 0x1198 <systemPasswordSetup+0x34e>
		if(passwords_entires[offset+password_length] >= '0' && passwords_entires[offset+password_length] <= '9')
    11ba:	89 81       	ldd	r24, Y+1	; 0x01
    11bc:	28 2f       	mov	r18, r24
    11be:	30 e0       	ldi	r19, 0x00	; 0
    11c0:	80 91 a6 01 	lds	r24, 0x01A6
    11c4:	88 2f       	mov	r24, r24
    11c6:	90 e0       	ldi	r25, 0x00	; 0
    11c8:	82 0f       	add	r24, r18
    11ca:	93 1f       	adc	r25, r19
    11cc:	fc 01       	movw	r30, r24
    11ce:	ef 54       	subi	r30, 0x4F	; 79
    11d0:	fe 4f       	sbci	r31, 0xFE	; 254
    11d2:	80 81       	ld	r24, Z
    11d4:	80 33       	cpi	r24, 0x30	; 48
    11d6:	08 f4       	brcc	.+2      	; 0x11da <systemPasswordSetup+0x390>
    11d8:	9e cf       	rjmp	.-196    	; 0x1116 <systemPasswordSetup+0x2cc>
    11da:	89 81       	ldd	r24, Y+1	; 0x01
    11dc:	28 2f       	mov	r18, r24
    11de:	30 e0       	ldi	r19, 0x00	; 0
    11e0:	80 91 a6 01 	lds	r24, 0x01A6
    11e4:	88 2f       	mov	r24, r24
    11e6:	90 e0       	ldi	r25, 0x00	; 0
    11e8:	82 0f       	add	r24, r18
    11ea:	93 1f       	adc	r25, r19
    11ec:	fc 01       	movw	r30, r24
    11ee:	ef 54       	subi	r30, 0x4F	; 79
    11f0:	fe 4f       	sbci	r31, 0xFE	; 254
    11f2:	80 81       	ld	r24, Z
    11f4:	8a 33       	cpi	r24, 0x3A	; 58
    11f6:	08 f0       	brcs	.+2      	; 0x11fa <systemPasswordSetup+0x3b0>
    11f8:	8e cf       	rjmp	.-228    	; 0x1116 <systemPasswordSetup+0x2cc>
		{
			_LCD_adjustCursorPosition(1,password_length);
    11fa:	90 91 a6 01 	lds	r25, 0x01A6
    11fe:	81 e0       	ldi	r24, 0x01	; 1
    1200:	69 2f       	mov	r22, r25
    1202:	0e 94 46 03 	call	0x68c	; 0x68c <_LCD_adjustCursorPosition>
			_LCD_displayCharacter('*');
    1206:	8a e2       	ldi	r24, 0x2A	; 42
    1208:	0e 94 7f 02 	call	0x4fe	; 0x4fe <_LCD_displayCharacter>
			password_length++;
    120c:	80 91 a6 01 	lds	r24, 0x01A6
    1210:	8f 5f       	subi	r24, 0xFF	; 255
    1212:	80 93 a6 01 	sts	0x01A6, r24

			if(password_length == 5)
    1216:	80 91 a6 01 	lds	r24, 0x01A6
    121a:	85 30       	cpi	r24, 0x05	; 5
    121c:	09 f0       	breq	.+2      	; 0x1220 <systemPasswordSetup+0x3d6>
    121e:	7b cf       	rjmp	.-266    	; 0x1116 <systemPasswordSetup+0x2cc>
			{
				_LCD_displayString_atCursor("SUBMIT?", 0, 25);
    1220:	82 ef       	ldi	r24, 0xF2	; 242
    1222:	90 e0       	ldi	r25, 0x00	; 0
    1224:	60 e0       	ldi	r22, 0x00	; 0
    1226:	49 e1       	ldi	r20, 0x19	; 25
    1228:	0e 94 88 03 	call	0x710	; 0x710 <_LCD_displayString_atCursor>
				_LCD_displayString_atCursor("Press: Enter", 1, 20);
    122c:	8a ef       	ldi	r24, 0xFA	; 250
    122e:	90 e0       	ldi	r25, 0x00	; 0
    1230:	61 e0       	ldi	r22, 0x01	; 1
    1232:	44 e1       	ldi	r20, 0x14	; 20
    1234:	0e 94 88 03 	call	0x710	; 0x710 <_LCD_displayString_atCursor>
				while( __DIO_readInputPinValue(PIN_A, PA7)==HIGH );
    1238:	80 e0       	ldi	r24, 0x00	; 0
    123a:	67 e0       	ldi	r22, 0x07	; 7
    123c:	0e 94 37 01 	call	0x26e	; 0x26e <__DIO_readInputPinValue>
    1240:	81 30       	cpi	r24, 0x01	; 1
    1242:	d1 f3       	breq	.-12     	; 0x1238 <systemPasswordSetup+0x3ee>
				break;
			}
		}
	}

	_LCD_clearScreen();
    1244:	0e 94 a1 03 	call	0x742	; 0x742 <_LCD_clearScreen>
	_LCD_displayString_atCursor("Re-type new Password:-", 0, 0);
    1248:	8b e4       	ldi	r24, 0x4B	; 75
    124a:	91 e0       	ldi	r25, 0x01	; 1
    124c:	60 e0       	ldi	r22, 0x00	; 0
    124e:	40 e0       	ldi	r20, 0x00	; 0
    1250:	0e 94 88 03 	call	0x710	; 0x710 <_LCD_displayString_atCursor>
	while(FOREVER)
	{
		passwords_entires[offset+password_length] = _KEYPAD_getCurrentPressedKey();
    1254:	89 81       	ldd	r24, Y+1	; 0x01
    1256:	28 2f       	mov	r18, r24
    1258:	30 e0       	ldi	r19, 0x00	; 0
    125a:	80 91 a6 01 	lds	r24, 0x01A6
    125e:	88 2f       	mov	r24, r24
    1260:	90 e0       	ldi	r25, 0x00	; 0
    1262:	89 01       	movw	r16, r18
    1264:	08 0f       	add	r16, r24
    1266:	19 1f       	adc	r17, r25
    1268:	0e 94 8b 0b 	call	0x1716	; 0x1716 <_KEYPAD_getCurrentPressedKey>
    126c:	f8 01       	movw	r30, r16
    126e:	ef 54       	subi	r30, 0x4F	; 79
    1270:	fe 4f       	sbci	r31, 0xFE	; 254
    1272:	80 83       	st	Z, r24
		APPROX_1SEC_DELAY;APPROX_1SEC_DELAY;APPROX_HALF_SEC_DELAY;
    1274:	10 92 b0 01 	sts	0x01B0, r1
    1278:	10 92 af 01 	sts	0x01AF, r1
    127c:	09 c0       	rjmp	.+18     	; 0x1290 <systemPasswordSetup+0x446>
    127e:	80 91 af 01 	lds	r24, 0x01AF
    1282:	90 91 b0 01 	lds	r25, 0x01B0
    1286:	01 96       	adiw	r24, 0x01	; 1
    1288:	90 93 b0 01 	sts	0x01B0, r25
    128c:	80 93 af 01 	sts	0x01AF, r24
    1290:	80 91 af 01 	lds	r24, 0x01AF
    1294:	90 91 b0 01 	lds	r25, 0x01B0
    1298:	2d ef       	ldi	r18, 0xFD	; 253
    129a:	88 3e       	cpi	r24, 0xE8	; 232
    129c:	92 07       	cpc	r25, r18
    129e:	78 f3       	brcs	.-34     	; 0x127e <systemPasswordSetup+0x434>
    12a0:	10 92 b0 01 	sts	0x01B0, r1
    12a4:	10 92 af 01 	sts	0x01AF, r1
    12a8:	09 c0       	rjmp	.+18     	; 0x12bc <systemPasswordSetup+0x472>
    12aa:	80 91 af 01 	lds	r24, 0x01AF
    12ae:	90 91 b0 01 	lds	r25, 0x01B0
    12b2:	01 96       	adiw	r24, 0x01	; 1
    12b4:	90 93 b0 01 	sts	0x01B0, r25
    12b8:	80 93 af 01 	sts	0x01AF, r24
    12bc:	80 91 af 01 	lds	r24, 0x01AF
    12c0:	90 91 b0 01 	lds	r25, 0x01B0
    12c4:	2d ef       	ldi	r18, 0xFD	; 253
    12c6:	88 3e       	cpi	r24, 0xE8	; 232
    12c8:	92 07       	cpc	r25, r18
    12ca:	78 f3       	brcs	.-34     	; 0x12aa <systemPasswordSetup+0x460>
    12cc:	10 92 b0 01 	sts	0x01B0, r1
    12d0:	10 92 af 01 	sts	0x01AF, r1
    12d4:	09 c0       	rjmp	.+18     	; 0x12e8 <systemPasswordSetup+0x49e>
    12d6:	80 91 af 01 	lds	r24, 0x01AF
    12da:	90 91 b0 01 	lds	r25, 0x01B0
    12de:	01 96       	adiw	r24, 0x01	; 1
    12e0:	90 93 b0 01 	sts	0x01B0, r25
    12e4:	80 93 af 01 	sts	0x01AF, r24
    12e8:	80 91 af 01 	lds	r24, 0x01AF
    12ec:	90 91 b0 01 	lds	r25, 0x01B0
    12f0:	28 e8       	ldi	r18, 0x88	; 136
    12f2:	88 3b       	cpi	r24, 0xB8	; 184
    12f4:	92 07       	cpc	r25, r18
    12f6:	78 f3       	brcs	.-34     	; 0x12d6 <systemPasswordSetup+0x48c>
		if(passwords_entires[offset+password_length] >= '0' && passwords_entires[offset+password_length] <= '9')
    12f8:	89 81       	ldd	r24, Y+1	; 0x01
    12fa:	28 2f       	mov	r18, r24
    12fc:	30 e0       	ldi	r19, 0x00	; 0
    12fe:	80 91 a6 01 	lds	r24, 0x01A6
    1302:	88 2f       	mov	r24, r24
    1304:	90 e0       	ldi	r25, 0x00	; 0
    1306:	82 0f       	add	r24, r18
    1308:	93 1f       	adc	r25, r19
    130a:	fc 01       	movw	r30, r24
    130c:	ef 54       	subi	r30, 0x4F	; 79
    130e:	fe 4f       	sbci	r31, 0xFE	; 254
    1310:	80 81       	ld	r24, Z
    1312:	80 33       	cpi	r24, 0x30	; 48
    1314:	08 f4       	brcc	.+2      	; 0x1318 <systemPasswordSetup+0x4ce>
    1316:	9e cf       	rjmp	.-196    	; 0x1254 <systemPasswordSetup+0x40a>
    1318:	89 81       	ldd	r24, Y+1	; 0x01
    131a:	28 2f       	mov	r18, r24
    131c:	30 e0       	ldi	r19, 0x00	; 0
    131e:	80 91 a6 01 	lds	r24, 0x01A6
    1322:	88 2f       	mov	r24, r24
    1324:	90 e0       	ldi	r25, 0x00	; 0
    1326:	82 0f       	add	r24, r18
    1328:	93 1f       	adc	r25, r19
    132a:	fc 01       	movw	r30, r24
    132c:	ef 54       	subi	r30, 0x4F	; 79
    132e:	fe 4f       	sbci	r31, 0xFE	; 254
    1330:	80 81       	ld	r24, Z
    1332:	8a 33       	cpi	r24, 0x3A	; 58
    1334:	08 f0       	brcs	.+2      	; 0x1338 <systemPasswordSetup+0x4ee>
    1336:	8e cf       	rjmp	.-228    	; 0x1254 <systemPasswordSetup+0x40a>
		{
			_LCD_adjustCursorPosition(1,(password_length-5));
    1338:	80 91 a6 01 	lds	r24, 0x01A6
    133c:	98 2f       	mov	r25, r24
    133e:	95 50       	subi	r25, 0x05	; 5
    1340:	81 e0       	ldi	r24, 0x01	; 1
    1342:	69 2f       	mov	r22, r25
    1344:	0e 94 46 03 	call	0x68c	; 0x68c <_LCD_adjustCursorPosition>
			_LCD_displayCharacter('*');
    1348:	8a e2       	ldi	r24, 0x2A	; 42
    134a:	0e 94 7f 02 	call	0x4fe	; 0x4fe <_LCD_displayCharacter>
			password_length++;
    134e:	80 91 a6 01 	lds	r24, 0x01A6
    1352:	8f 5f       	subi	r24, 0xFF	; 255
    1354:	80 93 a6 01 	sts	0x01A6, r24

			if(password_length == 10)
    1358:	80 91 a6 01 	lds	r24, 0x01A6
    135c:	8a 30       	cpi	r24, 0x0A	; 10
    135e:	09 f0       	breq	.+2      	; 0x1362 <systemPasswordSetup+0x518>
    1360:	79 cf       	rjmp	.-270    	; 0x1254 <systemPasswordSetup+0x40a>
			{
				passwords_entires[offset+password_length] = '\0';
    1362:	89 81       	ldd	r24, Y+1	; 0x01
    1364:	28 2f       	mov	r18, r24
    1366:	30 e0       	ldi	r19, 0x00	; 0
    1368:	80 91 a6 01 	lds	r24, 0x01A6
    136c:	88 2f       	mov	r24, r24
    136e:	90 e0       	ldi	r25, 0x00	; 0
    1370:	82 0f       	add	r24, r18
    1372:	93 1f       	adc	r25, r19
    1374:	fc 01       	movw	r30, r24
    1376:	ef 54       	subi	r30, 0x4F	; 79
    1378:	fe 4f       	sbci	r31, 0xFE	; 254
    137a:	10 82       	st	Z, r1
				_LCD_displayString_atCursor("SUBMIT?", 0, 25);
    137c:	82 ef       	ldi	r24, 0xF2	; 242
    137e:	90 e0       	ldi	r25, 0x00	; 0
    1380:	60 e0       	ldi	r22, 0x00	; 0
    1382:	49 e1       	ldi	r20, 0x19	; 25
    1384:	0e 94 88 03 	call	0x710	; 0x710 <_LCD_displayString_atCursor>
				_LCD_displayString_atCursor("Press: Enter", 1, 20);
    1388:	8a ef       	ldi	r24, 0xFA	; 250
    138a:	90 e0       	ldi	r25, 0x00	; 0
    138c:	61 e0       	ldi	r22, 0x01	; 1
    138e:	44 e1       	ldi	r20, 0x14	; 20
    1390:	0e 94 88 03 	call	0x710	; 0x710 <_LCD_displayString_atCursor>
				while( __DIO_readInputPinValue(PIN_A, PA7)==HIGH );
    1394:	80 e0       	ldi	r24, 0x00	; 0
    1396:	67 e0       	ldi	r22, 0x07	; 7
    1398:	0e 94 37 01 	call	0x26e	; 0x26e <__DIO_readInputPinValue>
    139c:	81 30       	cpi	r24, 0x01	; 1
    139e:	d1 f3       	breq	.-12     	; 0x1394 <systemPasswordSetup+0x54a>
	//	_LCD_clearScreen();
	//	_LCD_displayString_atCursor(passwords_entires, 1, 0);
	//	APPROX_1SEC_DELAY;APPROX_1SEC_DELAY;APPROX_1SEC_DELAY;APPROX_1SEC_DELAY;
	//	APPROX_1SEC_DELAY;APPROX_1SEC_DELAY;APPROX_1SEC_DELAY;APPROX_1SEC_DELAY;

	return offset+password_length;
    13a0:	90 91 a6 01 	lds	r25, 0x01A6
    13a4:	89 81       	ldd	r24, Y+1	; 0x01
    13a6:	89 0f       	add	r24, r25
}
    13a8:	0f 90       	pop	r0
    13aa:	0f 90       	pop	r0
    13ac:	cf 91       	pop	r28
    13ae:	df 91       	pop	r29
    13b0:	1f 91       	pop	r17
    13b2:	0f 91       	pop	r16
    13b4:	08 95       	ret

000013b6 <externalInterrupt1_OpenButton__ISRFunc>:


void externalInterrupt1_OpenButton__ISRFunc(void)
{
    13b6:	df 93       	push	r29
    13b8:	cf 93       	push	r28
    13ba:	cd b7       	in	r28, 0x3d	; 61
    13bc:	de b7       	in	r29, 0x3e	; 62
	if(Authenticated_FLAG)
    13be:	80 91 a5 01 	lds	r24, 0x01A5
    13c2:	88 23       	and	r24, r24
    13c4:	69 f0       	breq	.+26     	; 0x13e0 <externalInterrupt1_OpenButton__ISRFunc+0x2a>
	{
		while( __UART_receiveByte() != UART_READY );
    13c6:	0e 94 aa 04 	call	0x954	; 0x954 <__UART_receiveByte>
    13ca:	8f 3f       	cpi	r24, 0xFF	; 255
    13cc:	e1 f7       	brne	.-8      	; 0x13c6 <externalInterrupt1_OpenButton__ISRFunc+0x10>
		__UART_sendByte(OPEN_DOOR);
    13ce:	84 e0       	ldi	r24, 0x04	; 4
    13d0:	0e 94 6d 04 	call	0x8da	; 0x8da <__UART_sendByte>

		_LCD_displayString_atCursor(" >>> Door Opened!", 1, 0);
    13d4:	82 e6       	ldi	r24, 0x62	; 98
    13d6:	91 e0       	ldi	r25, 0x01	; 1
    13d8:	61 e0       	ldi	r22, 0x01	; 1
    13da:	40 e0       	ldi	r20, 0x00	; 0
    13dc:	0e 94 88 03 	call	0x710	; 0x710 <_LCD_displayString_atCursor>
	}
}
    13e0:	cf 91       	pop	r28
    13e2:	df 91       	pop	r29
    13e4:	08 95       	ret

000013e6 <externalInterrupt0_CloseButton_ISRFunc>:


void externalInterrupt0_CloseButton_ISRFunc(void)
{
    13e6:	df 93       	push	r29
    13e8:	cf 93       	push	r28
    13ea:	cd b7       	in	r28, 0x3d	; 61
    13ec:	de b7       	in	r29, 0x3e	; 62
	if(Authenticated_FLAG)
    13ee:	80 91 a5 01 	lds	r24, 0x01A5
    13f2:	88 23       	and	r24, r24
    13f4:	79 f0       	breq	.+30     	; 0x1414 <externalInterrupt0_CloseButton_ISRFunc+0x2e>
	{
		while( __UART_receiveByte() != UART_READY );
    13f6:	0e 94 aa 04 	call	0x954	; 0x954 <__UART_receiveByte>
    13fa:	8f 3f       	cpi	r24, 0xFF	; 255
    13fc:	e1 f7       	brne	.-8      	; 0x13f6 <externalInterrupt0_CloseButton_ISRFunc+0x10>
		__UART_sendByte(CLOSE_DOOR);
    13fe:	85 e0       	ldi	r24, 0x05	; 5
    1400:	0e 94 6d 04 	call	0x8da	; 0x8da <__UART_sendByte>

		_LCD_displayString_atCursor(" >>> Door Closed!", 1, 0);
    1404:	84 e7       	ldi	r24, 0x74	; 116
    1406:	91 e0       	ldi	r25, 0x01	; 1
    1408:	61 e0       	ldi	r22, 0x01	; 1
    140a:	40 e0       	ldi	r20, 0x00	; 0
    140c:	0e 94 88 03 	call	0x710	; 0x710 <_LCD_displayString_atCursor>
		Authenticated_FLAG = FALSE;
    1410:	10 92 a5 01 	sts	0x01A5, r1
	}
}
    1414:	cf 91       	pop	r28
    1416:	df 91       	pop	r29
    1418:	08 95       	ret

0000141a <__vector_1>:
#ifdef _INT0

    /*** ISR Description:-
     * ISR Call the global pointer to function to execute desired code */
    ISR(INT0_vect)
    {
    141a:	1f 92       	push	r1
    141c:	0f 92       	push	r0
    141e:	0f b6       	in	r0, 0x3f	; 63
    1420:	0f 92       	push	r0
    1422:	11 24       	eor	r1, r1
    1424:	2f 93       	push	r18
    1426:	3f 93       	push	r19
    1428:	4f 93       	push	r20
    142a:	5f 93       	push	r21
    142c:	6f 93       	push	r22
    142e:	7f 93       	push	r23
    1430:	8f 93       	push	r24
    1432:	9f 93       	push	r25
    1434:	af 93       	push	r26
    1436:	bf 93       	push	r27
    1438:	ef 93       	push	r30
    143a:	ff 93       	push	r31
    143c:	df 93       	push	r29
    143e:	cf 93       	push	r28
    1440:	cd b7       	in	r28, 0x3d	; 61
    1442:	de b7       	in	r29, 0x3e	; 62
        (*g_INT0_callBack_ptr)();
    1444:	e0 91 a7 01 	lds	r30, 0x01A7
    1448:	f0 91 a8 01 	lds	r31, 0x01A8
    144c:	09 95       	icall
    }
    144e:	cf 91       	pop	r28
    1450:	df 91       	pop	r29
    1452:	ff 91       	pop	r31
    1454:	ef 91       	pop	r30
    1456:	bf 91       	pop	r27
    1458:	af 91       	pop	r26
    145a:	9f 91       	pop	r25
    145c:	8f 91       	pop	r24
    145e:	7f 91       	pop	r23
    1460:	6f 91       	pop	r22
    1462:	5f 91       	pop	r21
    1464:	4f 91       	pop	r20
    1466:	3f 91       	pop	r19
    1468:	2f 91       	pop	r18
    146a:	0f 90       	pop	r0
    146c:	0f be       	out	0x3f, r0	; 63
    146e:	0f 90       	pop	r0
    1470:	1f 90       	pop	r1
    1472:	18 95       	reti

00001474 <__INT0_setISRCallBackFuncPointer>:

    /*** Description:-
     * Function used to set the Global Pointer called by ISR,
     * with the Developer created function */
    void __INT0_setISRCallBackFuncPointer(void (*ptr_to_func)(void))
    {
    1474:	df 93       	push	r29
    1476:	cf 93       	push	r28
    1478:	00 d0       	rcall	.+0      	; 0x147a <__INT0_setISRCallBackFuncPointer+0x6>
    147a:	cd b7       	in	r28, 0x3d	; 61
    147c:	de b7       	in	r29, 0x3e	; 62
    147e:	9a 83       	std	Y+2, r25	; 0x02
    1480:	89 83       	std	Y+1, r24	; 0x01
        g_INT0_callBack_ptr = ptr_to_func;
    1482:	89 81       	ldd	r24, Y+1	; 0x01
    1484:	9a 81       	ldd	r25, Y+2	; 0x02
    1486:	90 93 a8 01 	sts	0x01A8, r25
    148a:	80 93 a7 01 	sts	0x01A7, r24
    }
    148e:	0f 90       	pop	r0
    1490:	0f 90       	pop	r0
    1492:	cf 91       	pop	r28
    1494:	df 91       	pop	r29
    1496:	08 95       	ret

00001498 <__INT0_init>:
    /*** Description:-
     * Function To enable EXT Interrupt 0, Fu Args: "sense_control"
     * sense_control Values = LOW_LOGIC /  LOGIC_CHANGE / FALLING_EDGE / RISING_EDGE
     * pullupResistor = EN_PULLUP / DIS_PULLUP */
    void __INT0_init(uint8 sense_control, uint8 pullupResistor)
    {
    1498:	df 93       	push	r29
    149a:	cf 93       	push	r28
    149c:	00 d0       	rcall	.+0      	; 0x149e <__INT0_init+0x6>
    149e:	00 d0       	rcall	.+0      	; 0x14a0 <__INT0_init+0x8>
    14a0:	cd b7       	in	r28, 0x3d	; 61
    14a2:	de b7       	in	r29, 0x3e	; 62
    14a4:	89 83       	std	Y+1, r24	; 0x01
    14a6:	6a 83       	std	Y+2, r22	; 0x02
        /*Disable Global Interrupt Flag; Critical Section*/
        DIS_GLOBAL_INTERRUPT;
    14a8:	af e5       	ldi	r26, 0x5F	; 95
    14aa:	b0 e0       	ldi	r27, 0x00	; 0
    14ac:	ef e5       	ldi	r30, 0x5F	; 95
    14ae:	f0 e0       	ldi	r31, 0x00	; 0
    14b0:	80 81       	ld	r24, Z
    14b2:	8f 77       	andi	r24, 0x7F	; 127
    14b4:	8c 93       	st	X, r24
        /*Configure INT0/PD2 as input pin*/
        DDRD  &= (~(1<<PD2));
    14b6:	a1 e3       	ldi	r26, 0x31	; 49
    14b8:	b0 e0       	ldi	r27, 0x00	; 0
    14ba:	e1 e3       	ldi	r30, 0x31	; 49
    14bc:	f0 e0       	ldi	r31, 0x00	; 0
    14be:	80 81       	ld	r24, Z
    14c0:	8b 7f       	andi	r24, 0xFB	; 251
    14c2:	8c 93       	st	X, r24
        if(pullupResistor)
    14c4:	8a 81       	ldd	r24, Y+2	; 0x02
    14c6:	88 23       	and	r24, r24
    14c8:	39 f0       	breq	.+14     	; 0x14d8 <__INT0_init+0x40>
        {
        	PORTD |= (1<<PD2);
    14ca:	a2 e3       	ldi	r26, 0x32	; 50
    14cc:	b0 e0       	ldi	r27, 0x00	; 0
    14ce:	e2 e3       	ldi	r30, 0x32	; 50
    14d0:	f0 e0       	ldi	r31, 0x00	; 0
    14d2:	80 81       	ld	r24, Z
    14d4:	84 60       	ori	r24, 0x04	; 4
    14d6:	8c 93       	st	X, r24
        }
        /*Enable (INT0) Module Interrupt flag*/
        GICR |= (1<<INT0);
    14d8:	ab e5       	ldi	r26, 0x5B	; 91
    14da:	b0 e0       	ldi	r27, 0x00	; 0
    14dc:	eb e5       	ldi	r30, 0x5B	; 91
    14de:	f0 e0       	ldi	r31, 0x00	; 0
    14e0:	80 81       	ld	r24, Z
    14e2:	80 64       	ori	r24, 0x40	; 64
    14e4:	8c 93       	st	X, r24
        /*write ISC00 and ISC01 bits according to sense control value*/
        switch(sense_control)
    14e6:	89 81       	ldd	r24, Y+1	; 0x01
    14e8:	28 2f       	mov	r18, r24
    14ea:	30 e0       	ldi	r19, 0x00	; 0
    14ec:	3c 83       	std	Y+4, r19	; 0x04
    14ee:	2b 83       	std	Y+3, r18	; 0x03
    14f0:	8b 81       	ldd	r24, Y+3	; 0x03
    14f2:	9c 81       	ldd	r25, Y+4	; 0x04
    14f4:	81 30       	cpi	r24, 0x01	; 1
    14f6:	91 05       	cpc	r25, r1
    14f8:	e9 f0       	breq	.+58     	; 0x1534 <__INT0_init+0x9c>
    14fa:	2b 81       	ldd	r18, Y+3	; 0x03
    14fc:	3c 81       	ldd	r19, Y+4	; 0x04
    14fe:	22 30       	cpi	r18, 0x02	; 2
    1500:	31 05       	cpc	r19, r1
    1502:	2c f4       	brge	.+10     	; 0x150e <__INT0_init+0x76>
    1504:	8b 81       	ldd	r24, Y+3	; 0x03
    1506:	9c 81       	ldd	r25, Y+4	; 0x04
    1508:	00 97       	sbiw	r24, 0x00	; 0
    150a:	61 f0       	breq	.+24     	; 0x1524 <__INT0_init+0x8c>
    150c:	37 c0       	rjmp	.+110    	; 0x157c <__INT0_init+0xe4>
    150e:	2b 81       	ldd	r18, Y+3	; 0x03
    1510:	3c 81       	ldd	r19, Y+4	; 0x04
    1512:	22 30       	cpi	r18, 0x02	; 2
    1514:	31 05       	cpc	r19, r1
    1516:	e9 f0       	breq	.+58     	; 0x1552 <__INT0_init+0xba>
    1518:	8b 81       	ldd	r24, Y+3	; 0x03
    151a:	9c 81       	ldd	r25, Y+4	; 0x04
    151c:	83 30       	cpi	r24, 0x03	; 3
    151e:	91 05       	cpc	r25, r1
    1520:	39 f1       	breq	.+78     	; 0x1570 <__INT0_init+0xd8>
    1522:	2c c0       	rjmp	.+88     	; 0x157c <__INT0_init+0xe4>
        {
            case LOW_LOGIC:
                MCUCR &= (~(1<<ISC00)) & (~(1<<ISC01));
    1524:	a5 e5       	ldi	r26, 0x55	; 85
    1526:	b0 e0       	ldi	r27, 0x00	; 0
    1528:	e5 e5       	ldi	r30, 0x55	; 85
    152a:	f0 e0       	ldi	r31, 0x00	; 0
    152c:	80 81       	ld	r24, Z
    152e:	8c 7f       	andi	r24, 0xFC	; 252
    1530:	8c 93       	st	X, r24
    1532:	24 c0       	rjmp	.+72     	; 0x157c <__INT0_init+0xe4>
            break;

            case LOGIC_CHANGE:
                MCUCR |= (1<<ISC00);
    1534:	a5 e5       	ldi	r26, 0x55	; 85
    1536:	b0 e0       	ldi	r27, 0x00	; 0
    1538:	e5 e5       	ldi	r30, 0x55	; 85
    153a:	f0 e0       	ldi	r31, 0x00	; 0
    153c:	80 81       	ld	r24, Z
    153e:	81 60       	ori	r24, 0x01	; 1
    1540:	8c 93       	st	X, r24
                MCUCR &= (~(1<<ISC01));
    1542:	a5 e5       	ldi	r26, 0x55	; 85
    1544:	b0 e0       	ldi	r27, 0x00	; 0
    1546:	e5 e5       	ldi	r30, 0x55	; 85
    1548:	f0 e0       	ldi	r31, 0x00	; 0
    154a:	80 81       	ld	r24, Z
    154c:	8d 7f       	andi	r24, 0xFD	; 253
    154e:	8c 93       	st	X, r24
    1550:	15 c0       	rjmp	.+42     	; 0x157c <__INT0_init+0xe4>
            break;

            case FALLING_EDGE:
                MCUCR &= (~(1<<ISC00));
    1552:	a5 e5       	ldi	r26, 0x55	; 85
    1554:	b0 e0       	ldi	r27, 0x00	; 0
    1556:	e5 e5       	ldi	r30, 0x55	; 85
    1558:	f0 e0       	ldi	r31, 0x00	; 0
    155a:	80 81       	ld	r24, Z
    155c:	8e 7f       	andi	r24, 0xFE	; 254
    155e:	8c 93       	st	X, r24
                MCUCR |= (1<<ISC01);
    1560:	a5 e5       	ldi	r26, 0x55	; 85
    1562:	b0 e0       	ldi	r27, 0x00	; 0
    1564:	e5 e5       	ldi	r30, 0x55	; 85
    1566:	f0 e0       	ldi	r31, 0x00	; 0
    1568:	80 81       	ld	r24, Z
    156a:	82 60       	ori	r24, 0x02	; 2
    156c:	8c 93       	st	X, r24
    156e:	06 c0       	rjmp	.+12     	; 0x157c <__INT0_init+0xe4>
            break;

            case RISING_EDGE:
                MCUCR |= (1<<ISC00) & (1<<ISC01);
    1570:	e5 e5       	ldi	r30, 0x55	; 85
    1572:	f0 e0       	ldi	r31, 0x00	; 0
    1574:	a5 e5       	ldi	r26, 0x55	; 85
    1576:	b0 e0       	ldi	r27, 0x00	; 0
    1578:	8c 91       	ld	r24, X
    157a:	80 83       	st	Z, r24
            break;

            default:break;
        }
        /*Enable Global Interrupt Flag back*/
        EN_GLOBAL_INTERRUPT;
    157c:	af e5       	ldi	r26, 0x5F	; 95
    157e:	b0 e0       	ldi	r27, 0x00	; 0
    1580:	ef e5       	ldi	r30, 0x5F	; 95
    1582:	f0 e0       	ldi	r31, 0x00	; 0
    1584:	80 81       	ld	r24, Z
    1586:	80 68       	ori	r24, 0x80	; 128
    1588:	8c 93       	st	X, r24
    }
    158a:	0f 90       	pop	r0
    158c:	0f 90       	pop	r0
    158e:	0f 90       	pop	r0
    1590:	0f 90       	pop	r0
    1592:	cf 91       	pop	r28
    1594:	df 91       	pop	r29
    1596:	08 95       	ret

00001598 <__vector_2>:
#ifdef _INT1

    /*** ISR Description:-
     * ISR Call the global pointer to function to execute desired code */
    ISR(INT1_vect)
    {
    1598:	1f 92       	push	r1
    159a:	0f 92       	push	r0
    159c:	0f b6       	in	r0, 0x3f	; 63
    159e:	0f 92       	push	r0
    15a0:	11 24       	eor	r1, r1
    15a2:	2f 93       	push	r18
    15a4:	3f 93       	push	r19
    15a6:	4f 93       	push	r20
    15a8:	5f 93       	push	r21
    15aa:	6f 93       	push	r22
    15ac:	7f 93       	push	r23
    15ae:	8f 93       	push	r24
    15b0:	9f 93       	push	r25
    15b2:	af 93       	push	r26
    15b4:	bf 93       	push	r27
    15b6:	ef 93       	push	r30
    15b8:	ff 93       	push	r31
    15ba:	df 93       	push	r29
    15bc:	cf 93       	push	r28
    15be:	cd b7       	in	r28, 0x3d	; 61
    15c0:	de b7       	in	r29, 0x3e	; 62
        (*g_INT1_callBack_ptr)();
    15c2:	e0 91 a9 01 	lds	r30, 0x01A9
    15c6:	f0 91 aa 01 	lds	r31, 0x01AA
    15ca:	09 95       	icall
    }
    15cc:	cf 91       	pop	r28
    15ce:	df 91       	pop	r29
    15d0:	ff 91       	pop	r31
    15d2:	ef 91       	pop	r30
    15d4:	bf 91       	pop	r27
    15d6:	af 91       	pop	r26
    15d8:	9f 91       	pop	r25
    15da:	8f 91       	pop	r24
    15dc:	7f 91       	pop	r23
    15de:	6f 91       	pop	r22
    15e0:	5f 91       	pop	r21
    15e2:	4f 91       	pop	r20
    15e4:	3f 91       	pop	r19
    15e6:	2f 91       	pop	r18
    15e8:	0f 90       	pop	r0
    15ea:	0f be       	out	0x3f, r0	; 63
    15ec:	0f 90       	pop	r0
    15ee:	1f 90       	pop	r1
    15f0:	18 95       	reti

000015f2 <__INT1_setISRCallBackFuncPointer>:

    /*** Description:-
     * Function used to set the Global Pointer called by ISR,
     * with the Developer created function */
    void __INT1_setISRCallBackFuncPointer(void (*ptr_to_func)(void))
    {
    15f2:	df 93       	push	r29
    15f4:	cf 93       	push	r28
    15f6:	00 d0       	rcall	.+0      	; 0x15f8 <__INT1_setISRCallBackFuncPointer+0x6>
    15f8:	cd b7       	in	r28, 0x3d	; 61
    15fa:	de b7       	in	r29, 0x3e	; 62
    15fc:	9a 83       	std	Y+2, r25	; 0x02
    15fe:	89 83       	std	Y+1, r24	; 0x01
        g_INT1_callBack_ptr = ptr_to_func;
    1600:	89 81       	ldd	r24, Y+1	; 0x01
    1602:	9a 81       	ldd	r25, Y+2	; 0x02
    1604:	90 93 aa 01 	sts	0x01AA, r25
    1608:	80 93 a9 01 	sts	0x01A9, r24
    }
    160c:	0f 90       	pop	r0
    160e:	0f 90       	pop	r0
    1610:	cf 91       	pop	r28
    1612:	df 91       	pop	r29
    1614:	08 95       	ret

00001616 <__INT1_init>:
    /*** Description:-
     * Function To enable EXT Interrupt 0, Fu Args: "sense_control"
     * sense_control Values = LOW_LOGIC /  LOGIC_CHANGE / FALLING_EDGE / RISING_EDGE
     * pullupResistor = EN_PULLUP / DIS_PULLUP */
    void __INT1_init(uint8 sense_control, uint8 pullupResistor)
    {
    1616:	df 93       	push	r29
    1618:	cf 93       	push	r28
    161a:	00 d0       	rcall	.+0      	; 0x161c <__INT1_init+0x6>
    161c:	00 d0       	rcall	.+0      	; 0x161e <__INT1_init+0x8>
    161e:	cd b7       	in	r28, 0x3d	; 61
    1620:	de b7       	in	r29, 0x3e	; 62
    1622:	89 83       	std	Y+1, r24	; 0x01
    1624:	6a 83       	std	Y+2, r22	; 0x02
        /*Disable Global Interrupt Flag; Critical Section*/
        DIS_GLOBAL_INTERRUPT;
    1626:	af e5       	ldi	r26, 0x5F	; 95
    1628:	b0 e0       	ldi	r27, 0x00	; 0
    162a:	ef e5       	ldi	r30, 0x5F	; 95
    162c:	f0 e0       	ldi	r31, 0x00	; 0
    162e:	80 81       	ld	r24, Z
    1630:	8f 77       	andi	r24, 0x7F	; 127
    1632:	8c 93       	st	X, r24
        /*Configure INT1/PD3 as input pin*/
        DDRD  &= (~(1<<PD3));
    1634:	a1 e3       	ldi	r26, 0x31	; 49
    1636:	b0 e0       	ldi	r27, 0x00	; 0
    1638:	e1 e3       	ldi	r30, 0x31	; 49
    163a:	f0 e0       	ldi	r31, 0x00	; 0
    163c:	80 81       	ld	r24, Z
    163e:	87 7f       	andi	r24, 0xF7	; 247
    1640:	8c 93       	st	X, r24
        if(pullupResistor)
    1642:	8a 81       	ldd	r24, Y+2	; 0x02
    1644:	88 23       	and	r24, r24
    1646:	39 f0       	breq	.+14     	; 0x1656 <__INT1_init+0x40>
        {
        	PORTD |= (1<<PD3);
    1648:	a2 e3       	ldi	r26, 0x32	; 50
    164a:	b0 e0       	ldi	r27, 0x00	; 0
    164c:	e2 e3       	ldi	r30, 0x32	; 50
    164e:	f0 e0       	ldi	r31, 0x00	; 0
    1650:	80 81       	ld	r24, Z
    1652:	88 60       	ori	r24, 0x08	; 8
    1654:	8c 93       	st	X, r24
        }
        /*write ISC10 and ISC11 bits according to sense control value*/
        switch(sense_control)
    1656:	89 81       	ldd	r24, Y+1	; 0x01
    1658:	28 2f       	mov	r18, r24
    165a:	30 e0       	ldi	r19, 0x00	; 0
    165c:	3c 83       	std	Y+4, r19	; 0x04
    165e:	2b 83       	std	Y+3, r18	; 0x03
    1660:	8b 81       	ldd	r24, Y+3	; 0x03
    1662:	9c 81       	ldd	r25, Y+4	; 0x04
    1664:	81 30       	cpi	r24, 0x01	; 1
    1666:	91 05       	cpc	r25, r1
    1668:	e9 f0       	breq	.+58     	; 0x16a4 <__INT1_init+0x8e>
    166a:	2b 81       	ldd	r18, Y+3	; 0x03
    166c:	3c 81       	ldd	r19, Y+4	; 0x04
    166e:	22 30       	cpi	r18, 0x02	; 2
    1670:	31 05       	cpc	r19, r1
    1672:	2c f4       	brge	.+10     	; 0x167e <__INT1_init+0x68>
    1674:	8b 81       	ldd	r24, Y+3	; 0x03
    1676:	9c 81       	ldd	r25, Y+4	; 0x04
    1678:	00 97       	sbiw	r24, 0x00	; 0
    167a:	61 f0       	breq	.+24     	; 0x1694 <__INT1_init+0x7e>
    167c:	37 c0       	rjmp	.+110    	; 0x16ec <__INT1_init+0xd6>
    167e:	2b 81       	ldd	r18, Y+3	; 0x03
    1680:	3c 81       	ldd	r19, Y+4	; 0x04
    1682:	22 30       	cpi	r18, 0x02	; 2
    1684:	31 05       	cpc	r19, r1
    1686:	e9 f0       	breq	.+58     	; 0x16c2 <__INT1_init+0xac>
    1688:	8b 81       	ldd	r24, Y+3	; 0x03
    168a:	9c 81       	ldd	r25, Y+4	; 0x04
    168c:	83 30       	cpi	r24, 0x03	; 3
    168e:	91 05       	cpc	r25, r1
    1690:	39 f1       	breq	.+78     	; 0x16e0 <__INT1_init+0xca>
    1692:	2c c0       	rjmp	.+88     	; 0x16ec <__INT1_init+0xd6>
        {
            case LOW_LOGIC:
                MCUCR &= (~(1<<ISC10)) & (~(1<<ISC11));
    1694:	a5 e5       	ldi	r26, 0x55	; 85
    1696:	b0 e0       	ldi	r27, 0x00	; 0
    1698:	e5 e5       	ldi	r30, 0x55	; 85
    169a:	f0 e0       	ldi	r31, 0x00	; 0
    169c:	80 81       	ld	r24, Z
    169e:	83 7f       	andi	r24, 0xF3	; 243
    16a0:	8c 93       	st	X, r24
    16a2:	24 c0       	rjmp	.+72     	; 0x16ec <__INT1_init+0xd6>
            break;

            case LOGIC_CHANGE:
                MCUCR |= (1<<ISC10);
    16a4:	a5 e5       	ldi	r26, 0x55	; 85
    16a6:	b0 e0       	ldi	r27, 0x00	; 0
    16a8:	e5 e5       	ldi	r30, 0x55	; 85
    16aa:	f0 e0       	ldi	r31, 0x00	; 0
    16ac:	80 81       	ld	r24, Z
    16ae:	84 60       	ori	r24, 0x04	; 4
    16b0:	8c 93       	st	X, r24
                MCUCR &= (~(1<<ISC11));
    16b2:	a5 e5       	ldi	r26, 0x55	; 85
    16b4:	b0 e0       	ldi	r27, 0x00	; 0
    16b6:	e5 e5       	ldi	r30, 0x55	; 85
    16b8:	f0 e0       	ldi	r31, 0x00	; 0
    16ba:	80 81       	ld	r24, Z
    16bc:	87 7f       	andi	r24, 0xF7	; 247
    16be:	8c 93       	st	X, r24
    16c0:	15 c0       	rjmp	.+42     	; 0x16ec <__INT1_init+0xd6>
            break;

            case FALLING_EDGE:
                MCUCR &= (~(1<<ISC10));
    16c2:	a5 e5       	ldi	r26, 0x55	; 85
    16c4:	b0 e0       	ldi	r27, 0x00	; 0
    16c6:	e5 e5       	ldi	r30, 0x55	; 85
    16c8:	f0 e0       	ldi	r31, 0x00	; 0
    16ca:	80 81       	ld	r24, Z
    16cc:	8b 7f       	andi	r24, 0xFB	; 251
    16ce:	8c 93       	st	X, r24
                MCUCR |= (1<<ISC11);
    16d0:	a5 e5       	ldi	r26, 0x55	; 85
    16d2:	b0 e0       	ldi	r27, 0x00	; 0
    16d4:	e5 e5       	ldi	r30, 0x55	; 85
    16d6:	f0 e0       	ldi	r31, 0x00	; 0
    16d8:	80 81       	ld	r24, Z
    16da:	88 60       	ori	r24, 0x08	; 8
    16dc:	8c 93       	st	X, r24
    16de:	06 c0       	rjmp	.+12     	; 0x16ec <__INT1_init+0xd6>
            break;

            case RISING_EDGE:
                MCUCR |= (1<<ISC10) & (1<<ISC11);
    16e0:	e5 e5       	ldi	r30, 0x55	; 85
    16e2:	f0 e0       	ldi	r31, 0x00	; 0
    16e4:	a5 e5       	ldi	r26, 0x55	; 85
    16e6:	b0 e0       	ldi	r27, 0x00	; 0
    16e8:	8c 91       	ld	r24, X
    16ea:	80 83       	st	Z, r24
            break;

            default:break;
        }
        /*Enable (INT1) Module Interrupt flag*/
        GICR |= (1<<INT1);
    16ec:	ab e5       	ldi	r26, 0x5B	; 91
    16ee:	b0 e0       	ldi	r27, 0x00	; 0
    16f0:	eb e5       	ldi	r30, 0x5B	; 91
    16f2:	f0 e0       	ldi	r31, 0x00	; 0
    16f4:	80 81       	ld	r24, Z
    16f6:	80 68       	ori	r24, 0x80	; 128
    16f8:	8c 93       	st	X, r24
        /*Enable Global Interrupt Flag back*/
        EN_GLOBAL_INTERRUPT;
    16fa:	af e5       	ldi	r26, 0x5F	; 95
    16fc:	b0 e0       	ldi	r27, 0x00	; 0
    16fe:	ef e5       	ldi	r30, 0x5F	; 95
    1700:	f0 e0       	ldi	r31, 0x00	; 0
    1702:	80 81       	ld	r24, Z
    1704:	80 68       	ori	r24, 0x80	; 128
    1706:	8c 93       	st	X, r24
    }
    1708:	0f 90       	pop	r0
    170a:	0f 90       	pop	r0
    170c:	0f 90       	pop	r0
    170e:	0f 90       	pop	r0
    1710:	cf 91       	pop	r28
    1712:	df 91       	pop	r29
    1714:	08 95       	ret

00001716 <_KEYPAD_getCurrentPressedKey>:
/*****************************************************************************/


/** Functions Definitions ****************************************************/
uint8 _KEYPAD_getCurrentPressedKey(void)
{
    1716:	df 93       	push	r29
    1718:	cf 93       	push	r28
    171a:	00 d0       	rcall	.+0      	; 0x171c <_KEYPAD_getCurrentPressedKey+0x6>
    171c:	cd b7       	in	r28, 0x3d	; 61
    171e:	de b7       	in	r29, 0x3e	; 62
	uint8 col,row;
	while(1)
	{
		for(col=0;col<N_col;col++) /* loop for columns */
    1720:	1a 82       	std	Y+2, r1	; 0x02
    1722:	58 c0       	rjmp	.+176    	; 0x17d4 <_KEYPAD_getCurrentPressedKey+0xbe>
		{
			/* 
			 * each time only one of the column pins will be output and 
			 * the rest will be input pins include the row pins 
			 */ 
			KEYPAD_PORT_DIR = (0b00010000<<col); 
    1724:	ea e3       	ldi	r30, 0x3A	; 58
    1726:	f0 e0       	ldi	r31, 0x00	; 0
    1728:	8a 81       	ldd	r24, Y+2	; 0x02
    172a:	28 2f       	mov	r18, r24
    172c:	30 e0       	ldi	r19, 0x00	; 0
    172e:	80 e1       	ldi	r24, 0x10	; 16
    1730:	90 e0       	ldi	r25, 0x00	; 0
    1732:	02 c0       	rjmp	.+4      	; 0x1738 <_KEYPAD_getCurrentPressedKey+0x22>
    1734:	88 0f       	add	r24, r24
    1736:	99 1f       	adc	r25, r25
    1738:	2a 95       	dec	r18
    173a:	e2 f7       	brpl	.-8      	; 0x1734 <_KEYPAD_getCurrentPressedKey+0x1e>
    173c:	80 83       	st	Z, r24

			/* 
			 * clear the output pin column in this trace and enable the internal 
			 * pull up resistors for the rows pins
			 */ 
			KEYPAD_PORT_OUT = (~(0b00010000<<col));
    173e:	eb e3       	ldi	r30, 0x3B	; 59
    1740:	f0 e0       	ldi	r31, 0x00	; 0
    1742:	8a 81       	ldd	r24, Y+2	; 0x02
    1744:	28 2f       	mov	r18, r24
    1746:	30 e0       	ldi	r19, 0x00	; 0
    1748:	80 e1       	ldi	r24, 0x10	; 16
    174a:	90 e0       	ldi	r25, 0x00	; 0
    174c:	02 2e       	mov	r0, r18
    174e:	02 c0       	rjmp	.+4      	; 0x1754 <_KEYPAD_getCurrentPressedKey+0x3e>
    1750:	88 0f       	add	r24, r24
    1752:	99 1f       	adc	r25, r25
    1754:	0a 94       	dec	r0
    1756:	e2 f7       	brpl	.-8      	; 0x1750 <_KEYPAD_getCurrentPressedKey+0x3a>
    1758:	80 95       	com	r24
    175a:	80 83       	st	Z, r24

			for(row=0;row<N_row;row++) /* loop for rows */
    175c:	19 82       	std	Y+1, r1	; 0x01
    175e:	34 c0       	rjmp	.+104    	; 0x17c8 <_KEYPAD_getCurrentPressedKey+0xb2>
			{
				if(READ_BIT(KEYPAD_PORT_IN,row)==LOW) /* if the switch is press in this row */
    1760:	e9 e3       	ldi	r30, 0x39	; 57
    1762:	f0 e0       	ldi	r31, 0x00	; 0
    1764:	80 81       	ld	r24, Z
    1766:	48 2f       	mov	r20, r24
    1768:	50 e0       	ldi	r21, 0x00	; 0
    176a:	89 81       	ldd	r24, Y+1	; 0x01
    176c:	28 2f       	mov	r18, r24
    176e:	30 e0       	ldi	r19, 0x00	; 0
    1770:	81 e0       	ldi	r24, 0x01	; 1
    1772:	90 e0       	ldi	r25, 0x00	; 0
    1774:	02 c0       	rjmp	.+4      	; 0x177a <_KEYPAD_getCurrentPressedKey+0x64>
    1776:	88 0f       	add	r24, r24
    1778:	99 1f       	adc	r25, r25
    177a:	2a 95       	dec	r18
    177c:	e2 f7       	brpl	.-8      	; 0x1776 <_KEYPAD_getCurrentPressedKey+0x60>
    177e:	9a 01       	movw	r18, r20
    1780:	28 23       	and	r18, r24
    1782:	39 23       	and	r19, r25
    1784:	89 81       	ldd	r24, Y+1	; 0x01
    1786:	88 2f       	mov	r24, r24
    1788:	90 e0       	ldi	r25, 0x00	; 0
    178a:	a9 01       	movw	r20, r18
    178c:	02 c0       	rjmp	.+4      	; 0x1792 <_KEYPAD_getCurrentPressedKey+0x7c>
    178e:	55 95       	asr	r21
    1790:	47 95       	ror	r20
    1792:	8a 95       	dec	r24
    1794:	e2 f7       	brpl	.-8      	; 0x178e <_KEYPAD_getCurrentPressedKey+0x78>
    1796:	ca 01       	movw	r24, r20
    1798:	00 97       	sbiw	r24, 0x00	; 0
    179a:	99 f4       	brne	.+38     	; 0x17c2 <_KEYPAD_getCurrentPressedKey+0xac>
				{
#if (N_col == 3)
					return _KEYPAD_4x3_keyMapping((row*N_col)+col+1);
    179c:	89 81       	ldd	r24, Y+1	; 0x01
    179e:	28 2f       	mov	r18, r24
    17a0:	30 e0       	ldi	r19, 0x00	; 0
    17a2:	c9 01       	movw	r24, r18
    17a4:	88 0f       	add	r24, r24
    17a6:	99 1f       	adc	r25, r25
    17a8:	82 0f       	add	r24, r18
    17aa:	93 1f       	adc	r25, r19
    17ac:	98 2f       	mov	r25, r24
    17ae:	8a 81       	ldd	r24, Y+2	; 0x02
    17b0:	89 0f       	add	r24, r25
    17b2:	8f 5f       	subi	r24, 0xFF	; 255
    17b4:	0e 94 ef 0b 	call	0x17de	; 0x17de <_KEYPAD_4x3_keyMapping>
#endif
				}
			}
		}
	}	
}
    17b8:	0f 90       	pop	r0
    17ba:	0f 90       	pop	r0
    17bc:	cf 91       	pop	r28
    17be:	df 91       	pop	r29
    17c0:	08 95       	ret
			 * clear the output pin column in this trace and enable the internal 
			 * pull up resistors for the rows pins
			 */ 
			KEYPAD_PORT_OUT = (~(0b00010000<<col));

			for(row=0;row<N_row;row++) /* loop for rows */
    17c2:	89 81       	ldd	r24, Y+1	; 0x01
    17c4:	8f 5f       	subi	r24, 0xFF	; 255
    17c6:	89 83       	std	Y+1, r24	; 0x01
    17c8:	89 81       	ldd	r24, Y+1	; 0x01
    17ca:	84 30       	cpi	r24, 0x04	; 4
    17cc:	48 f2       	brcs	.-110    	; 0x1760 <_KEYPAD_getCurrentPressedKey+0x4a>
uint8 _KEYPAD_getCurrentPressedKey(void)
{
	uint8 col,row;
	while(1)
	{
		for(col=0;col<N_col;col++) /* loop for columns */
    17ce:	8a 81       	ldd	r24, Y+2	; 0x02
    17d0:	8f 5f       	subi	r24, 0xFF	; 255
    17d2:	8a 83       	std	Y+2, r24	; 0x02
    17d4:	8a 81       	ldd	r24, Y+2	; 0x02
    17d6:	83 30       	cpi	r24, 0x03	; 3
    17d8:	08 f4       	brcc	.+2      	; 0x17dc <_KEYPAD_getCurrentPressedKey+0xc6>
    17da:	a4 cf       	rjmp	.-184    	; 0x1724 <_KEYPAD_getCurrentPressedKey+0xe>
    17dc:	a1 cf       	rjmp	.-190    	; 0x1720 <_KEYPAD_getCurrentPressedKey+0xa>

000017de <_KEYPAD_4x3_keyMapping>:
}

#if (N_col == 3) 

static uint8 _KEYPAD_4x3_keyMapping(uint8 button_number)
{
    17de:	df 93       	push	r29
    17e0:	cf 93       	push	r28
    17e2:	00 d0       	rcall	.+0      	; 0x17e4 <_KEYPAD_4x3_keyMapping+0x6>
    17e4:	00 d0       	rcall	.+0      	; 0x17e6 <_KEYPAD_4x3_keyMapping+0x8>
    17e6:	cd b7       	in	r28, 0x3d	; 61
    17e8:	de b7       	in	r29, 0x3e	; 62
    17ea:	89 83       	std	Y+1, r24	; 0x01
	switch(button_number)
    17ec:	89 81       	ldd	r24, Y+1	; 0x01
    17ee:	28 2f       	mov	r18, r24
    17f0:	30 e0       	ldi	r19, 0x00	; 0
    17f2:	3c 83       	std	Y+4, r19	; 0x04
    17f4:	2b 83       	std	Y+3, r18	; 0x03
    17f6:	8b 81       	ldd	r24, Y+3	; 0x03
    17f8:	9c 81       	ldd	r25, Y+4	; 0x04
    17fa:	86 30       	cpi	r24, 0x06	; 6
    17fc:	91 05       	cpc	r25, r1
    17fe:	09 f4       	brne	.+2      	; 0x1802 <_KEYPAD_4x3_keyMapping+0x24>
    1800:	5a c0       	rjmp	.+180    	; 0x18b6 <_KEYPAD_4x3_keyMapping+0xd8>
    1802:	2b 81       	ldd	r18, Y+3	; 0x03
    1804:	3c 81       	ldd	r19, Y+4	; 0x04
    1806:	27 30       	cpi	r18, 0x07	; 7
    1808:	31 05       	cpc	r19, r1
    180a:	0c f5       	brge	.+66     	; 0x184e <_KEYPAD_4x3_keyMapping+0x70>
    180c:	8b 81       	ldd	r24, Y+3	; 0x03
    180e:	9c 81       	ldd	r25, Y+4	; 0x04
    1810:	83 30       	cpi	r24, 0x03	; 3
    1812:	91 05       	cpc	r25, r1
    1814:	09 f4       	brne	.+2      	; 0x1818 <_KEYPAD_4x3_keyMapping+0x3a>
    1816:	46 c0       	rjmp	.+140    	; 0x18a4 <_KEYPAD_4x3_keyMapping+0xc6>
    1818:	2b 81       	ldd	r18, Y+3	; 0x03
    181a:	3c 81       	ldd	r19, Y+4	; 0x04
    181c:	24 30       	cpi	r18, 0x04	; 4
    181e:	31 05       	cpc	r19, r1
    1820:	5c f4       	brge	.+22     	; 0x1838 <_KEYPAD_4x3_keyMapping+0x5a>
    1822:	8b 81       	ldd	r24, Y+3	; 0x03
    1824:	9c 81       	ldd	r25, Y+4	; 0x04
    1826:	81 30       	cpi	r24, 0x01	; 1
    1828:	91 05       	cpc	r25, r1
    182a:	b1 f1       	breq	.+108    	; 0x1898 <_KEYPAD_4x3_keyMapping+0xba>
    182c:	2b 81       	ldd	r18, Y+3	; 0x03
    182e:	3c 81       	ldd	r19, Y+4	; 0x04
    1830:	22 30       	cpi	r18, 0x02	; 2
    1832:	31 05       	cpc	r19, r1
    1834:	a1 f1       	breq	.+104    	; 0x189e <_KEYPAD_4x3_keyMapping+0xc0>
    1836:	54 c0       	rjmp	.+168    	; 0x18e0 <_KEYPAD_4x3_keyMapping+0x102>
    1838:	8b 81       	ldd	r24, Y+3	; 0x03
    183a:	9c 81       	ldd	r25, Y+4	; 0x04
    183c:	84 30       	cpi	r24, 0x04	; 4
    183e:	91 05       	cpc	r25, r1
    1840:	a1 f1       	breq	.+104    	; 0x18aa <_KEYPAD_4x3_keyMapping+0xcc>
    1842:	2b 81       	ldd	r18, Y+3	; 0x03
    1844:	3c 81       	ldd	r19, Y+4	; 0x04
    1846:	25 30       	cpi	r18, 0x05	; 5
    1848:	31 05       	cpc	r19, r1
    184a:	91 f1       	breq	.+100    	; 0x18b0 <_KEYPAD_4x3_keyMapping+0xd2>
    184c:	49 c0       	rjmp	.+146    	; 0x18e0 <_KEYPAD_4x3_keyMapping+0x102>
    184e:	8b 81       	ldd	r24, Y+3	; 0x03
    1850:	9c 81       	ldd	r25, Y+4	; 0x04
    1852:	89 30       	cpi	r24, 0x09	; 9
    1854:	91 05       	cpc	r25, r1
    1856:	c1 f1       	breq	.+112    	; 0x18c8 <_KEYPAD_4x3_keyMapping+0xea>
    1858:	2b 81       	ldd	r18, Y+3	; 0x03
    185a:	3c 81       	ldd	r19, Y+4	; 0x04
    185c:	2a 30       	cpi	r18, 0x0A	; 10
    185e:	31 05       	cpc	r19, r1
    1860:	5c f4       	brge	.+22     	; 0x1878 <_KEYPAD_4x3_keyMapping+0x9a>
    1862:	8b 81       	ldd	r24, Y+3	; 0x03
    1864:	9c 81       	ldd	r25, Y+4	; 0x04
    1866:	87 30       	cpi	r24, 0x07	; 7
    1868:	91 05       	cpc	r25, r1
    186a:	41 f1       	breq	.+80     	; 0x18bc <_KEYPAD_4x3_keyMapping+0xde>
    186c:	2b 81       	ldd	r18, Y+3	; 0x03
    186e:	3c 81       	ldd	r19, Y+4	; 0x04
    1870:	28 30       	cpi	r18, 0x08	; 8
    1872:	31 05       	cpc	r19, r1
    1874:	31 f1       	breq	.+76     	; 0x18c2 <_KEYPAD_4x3_keyMapping+0xe4>
    1876:	34 c0       	rjmp	.+104    	; 0x18e0 <_KEYPAD_4x3_keyMapping+0x102>
    1878:	8b 81       	ldd	r24, Y+3	; 0x03
    187a:	9c 81       	ldd	r25, Y+4	; 0x04
    187c:	8b 30       	cpi	r24, 0x0B	; 11
    187e:	91 05       	cpc	r25, r1
    1880:	49 f1       	breq	.+82     	; 0x18d4 <_KEYPAD_4x3_keyMapping+0xf6>
    1882:	2b 81       	ldd	r18, Y+3	; 0x03
    1884:	3c 81       	ldd	r19, Y+4	; 0x04
    1886:	2b 30       	cpi	r18, 0x0B	; 11
    1888:	31 05       	cpc	r19, r1
    188a:	0c f1       	brlt	.+66     	; 0x18ce <_KEYPAD_4x3_keyMapping+0xf0>
    188c:	8b 81       	ldd	r24, Y+3	; 0x03
    188e:	9c 81       	ldd	r25, Y+4	; 0x04
    1890:	8c 30       	cpi	r24, 0x0C	; 12
    1892:	91 05       	cpc	r25, r1
    1894:	11 f1       	breq	.+68     	; 0x18da <_KEYPAD_4x3_keyMapping+0xfc>
    1896:	24 c0       	rjmp	.+72     	; 0x18e0 <_KEYPAD_4x3_keyMapping+0x102>
	{
	case 1: return '1'; // ASCII Code of 1
    1898:	91 e3       	ldi	r25, 0x31	; 49
    189a:	9a 83       	std	Y+2, r25	; 0x02
    189c:	23 c0       	rjmp	.+70     	; 0x18e4 <_KEYPAD_4x3_keyMapping+0x106>
	break;
	case 2: return '2';	// ASCII Code of 2
    189e:	22 e3       	ldi	r18, 0x32	; 50
    18a0:	2a 83       	std	Y+2, r18	; 0x02
    18a2:	20 c0       	rjmp	.+64     	; 0x18e4 <_KEYPAD_4x3_keyMapping+0x106>
	break;
	case 3: return '3'; // ASCII Code of 3
    18a4:	33 e3       	ldi	r19, 0x33	; 51
    18a6:	3a 83       	std	Y+2, r19	; 0x02
    18a8:	1d c0       	rjmp	.+58     	; 0x18e4 <_KEYPAD_4x3_keyMapping+0x106>
	break;
	case 4: return '4'; // ASCII Code of 4
    18aa:	84 e3       	ldi	r24, 0x34	; 52
    18ac:	8a 83       	std	Y+2, r24	; 0x02
    18ae:	1a c0       	rjmp	.+52     	; 0x18e4 <_KEYPAD_4x3_keyMapping+0x106>
	break;
	case 5: return '5';	// ASCII Code of 5
    18b0:	95 e3       	ldi	r25, 0x35	; 53
    18b2:	9a 83       	std	Y+2, r25	; 0x02
    18b4:	17 c0       	rjmp	.+46     	; 0x18e4 <_KEYPAD_4x3_keyMapping+0x106>
	break;
	case 6: return '6'; // ASCII Code of 6
    18b6:	26 e3       	ldi	r18, 0x36	; 54
    18b8:	2a 83       	std	Y+2, r18	; 0x02
    18ba:	14 c0       	rjmp	.+40     	; 0x18e4 <_KEYPAD_4x3_keyMapping+0x106>
	break;
	case 7: return '7'; // ASCII Code of 7
    18bc:	37 e3       	ldi	r19, 0x37	; 55
    18be:	3a 83       	std	Y+2, r19	; 0x02
    18c0:	11 c0       	rjmp	.+34     	; 0x18e4 <_KEYPAD_4x3_keyMapping+0x106>
	break;
	case 8: return '8';	// ASCII Code of 8
    18c2:	88 e3       	ldi	r24, 0x38	; 56
    18c4:	8a 83       	std	Y+2, r24	; 0x02
    18c6:	0e c0       	rjmp	.+28     	; 0x18e4 <_KEYPAD_4x3_keyMapping+0x106>
	break;
	case 9: return '9'; // ASCII Code of 9
    18c8:	99 e3       	ldi	r25, 0x39	; 57
    18ca:	9a 83       	std	Y+2, r25	; 0x02
    18cc:	0b c0       	rjmp	.+22     	; 0x18e4 <_KEYPAD_4x3_keyMapping+0x106>
	break;
	case 10: return '*'; // ASCII Code of *
    18ce:	2a e2       	ldi	r18, 0x2A	; 42
    18d0:	2a 83       	std	Y+2, r18	; 0x02
    18d2:	08 c0       	rjmp	.+16     	; 0x18e4 <_KEYPAD_4x3_keyMapping+0x106>
	break;
	case 11: return '0'; // ASCII Code of 0
    18d4:	30 e3       	ldi	r19, 0x30	; 48
    18d6:	3a 83       	std	Y+2, r19	; 0x02
    18d8:	05 c0       	rjmp	.+10     	; 0x18e4 <_KEYPAD_4x3_keyMapping+0x106>
	break;
	case 12: return '#'; // ASCII Code of #
    18da:	83 e2       	ldi	r24, 0x23	; 35
    18dc:	8a 83       	std	Y+2, r24	; 0x02
    18de:	02 c0       	rjmp	.+4      	; 0x18e4 <_KEYPAD_4x3_keyMapping+0x106>
	break;
	default: return button_number;
    18e0:	99 81       	ldd	r25, Y+1	; 0x01
    18e2:	9a 83       	std	Y+2, r25	; 0x02
    18e4:	8a 81       	ldd	r24, Y+2	; 0x02
	}
} 
    18e6:	0f 90       	pop	r0
    18e8:	0f 90       	pop	r0
    18ea:	0f 90       	pop	r0
    18ec:	0f 90       	pop	r0
    18ee:	cf 91       	pop	r28
    18f0:	df 91       	pop	r29
    18f2:	08 95       	ret

000018f4 <__vector_19>:
#if(TIMER_OCx_PIN == DISABLED)

    /*** ISR Description:-
     * When Interrupt occurs the Global pointer will call the user-defined function */
    ISR(TIMER0_COMP_vect)
    {
    18f4:	1f 92       	push	r1
    18f6:	0f 92       	push	r0
    18f8:	0f b6       	in	r0, 0x3f	; 63
    18fa:	0f 92       	push	r0
    18fc:	11 24       	eor	r1, r1
    18fe:	2f 93       	push	r18
    1900:	3f 93       	push	r19
    1902:	4f 93       	push	r20
    1904:	5f 93       	push	r21
    1906:	6f 93       	push	r22
    1908:	7f 93       	push	r23
    190a:	8f 93       	push	r24
    190c:	9f 93       	push	r25
    190e:	af 93       	push	r26
    1910:	bf 93       	push	r27
    1912:	ef 93       	push	r30
    1914:	ff 93       	push	r31
    1916:	df 93       	push	r29
    1918:	cf 93       	push	r28
    191a:	cd b7       	in	r28, 0x3d	; 61
    191c:	de b7       	in	r29, 0x3e	; 62
        (*g_TIMER0_callBack_ptr)();
    191e:	e0 91 ab 01 	lds	r30, 0x01AB
    1922:	f0 91 ac 01 	lds	r31, 0x01AC
    1926:	09 95       	icall
    }
    1928:	cf 91       	pop	r28
    192a:	df 91       	pop	r29
    192c:	ff 91       	pop	r31
    192e:	ef 91       	pop	r30
    1930:	bf 91       	pop	r27
    1932:	af 91       	pop	r26
    1934:	9f 91       	pop	r25
    1936:	8f 91       	pop	r24
    1938:	7f 91       	pop	r23
    193a:	6f 91       	pop	r22
    193c:	5f 91       	pop	r21
    193e:	4f 91       	pop	r20
    1940:	3f 91       	pop	r19
    1942:	2f 91       	pop	r18
    1944:	0f 90       	pop	r0
    1946:	0f be       	out	0x3f, r0	; 63
    1948:	0f 90       	pop	r0
    194a:	1f 90       	pop	r1
    194c:	18 95       	reti

0000194e <__vector_6>:

    /*** ISR Description:-
     * When Interrupt occurs the Global pointer will call the user-defined function */
    ISR(TIMER1_COMPA_vect)
    {
    194e:	1f 92       	push	r1
    1950:	0f 92       	push	r0
    1952:	0f b6       	in	r0, 0x3f	; 63
    1954:	0f 92       	push	r0
    1956:	11 24       	eor	r1, r1
    1958:	2f 93       	push	r18
    195a:	3f 93       	push	r19
    195c:	4f 93       	push	r20
    195e:	5f 93       	push	r21
    1960:	6f 93       	push	r22
    1962:	7f 93       	push	r23
    1964:	8f 93       	push	r24
    1966:	9f 93       	push	r25
    1968:	af 93       	push	r26
    196a:	bf 93       	push	r27
    196c:	ef 93       	push	r30
    196e:	ff 93       	push	r31
    1970:	df 93       	push	r29
    1972:	cf 93       	push	r28
    1974:	cd b7       	in	r28, 0x3d	; 61
    1976:	de b7       	in	r29, 0x3e	; 62
        (*g_TIMER1_callBack_ptr)();
    1978:	e0 91 ad 01 	lds	r30, 0x01AD
    197c:	f0 91 ae 01 	lds	r31, 0x01AE
    1980:	09 95       	icall
    }
    1982:	cf 91       	pop	r28
    1984:	df 91       	pop	r29
    1986:	ff 91       	pop	r31
    1988:	ef 91       	pop	r30
    198a:	bf 91       	pop	r27
    198c:	af 91       	pop	r26
    198e:	9f 91       	pop	r25
    1990:	8f 91       	pop	r24
    1992:	7f 91       	pop	r23
    1994:	6f 91       	pop	r22
    1996:	5f 91       	pop	r21
    1998:	4f 91       	pop	r20
    199a:	3f 91       	pop	r19
    199c:	2f 91       	pop	r18
    199e:	0f 90       	pop	r0
    19a0:	0f be       	out	0x3f, r0	; 63
    19a2:	0f 90       	pop	r0
    19a4:	1f 90       	pop	r1
    19a6:	18 95       	reti

000019a8 <__TIMER_CTC_setISRCallBackFuncPointer>:

    /*** Description:-
     * Used to Set the Global Pointer with desired function which will be called by ISR 
     * Func Arg: Pass the desired function Name */
    void __TIMER_CTC_setISRCallBackFuncPointer(uint8 timer_module, void (*ptr_to_func)(void))
    {
    19a8:	df 93       	push	r29
    19aa:	cf 93       	push	r28
    19ac:	00 d0       	rcall	.+0      	; 0x19ae <__TIMER_CTC_setISRCallBackFuncPointer+0x6>
    19ae:	00 d0       	rcall	.+0      	; 0x19b0 <__TIMER_CTC_setISRCallBackFuncPointer+0x8>
    19b0:	0f 92       	push	r0
    19b2:	cd b7       	in	r28, 0x3d	; 61
    19b4:	de b7       	in	r29, 0x3e	; 62
    19b6:	89 83       	std	Y+1, r24	; 0x01
    19b8:	7b 83       	std	Y+3, r23	; 0x03
    19ba:	6a 83       	std	Y+2, r22	; 0x02
        switch(timer_module)
    19bc:	89 81       	ldd	r24, Y+1	; 0x01
    19be:	28 2f       	mov	r18, r24
    19c0:	30 e0       	ldi	r19, 0x00	; 0
    19c2:	3d 83       	std	Y+5, r19	; 0x05
    19c4:	2c 83       	std	Y+4, r18	; 0x04
    19c6:	8c 81       	ldd	r24, Y+4	; 0x04
    19c8:	9d 81       	ldd	r25, Y+5	; 0x05
    19ca:	00 97       	sbiw	r24, 0x00	; 0
    19cc:	31 f0       	breq	.+12     	; 0x19da <__TIMER_CTC_setISRCallBackFuncPointer+0x32>
    19ce:	2c 81       	ldd	r18, Y+4	; 0x04
    19d0:	3d 81       	ldd	r19, Y+5	; 0x05
    19d2:	21 30       	cpi	r18, 0x01	; 1
    19d4:	31 05       	cpc	r19, r1
    19d6:	41 f0       	breq	.+16     	; 0x19e8 <__TIMER_CTC_setISRCallBackFuncPointer+0x40>
    19d8:	0d c0       	rjmp	.+26     	; 0x19f4 <__TIMER_CTC_setISRCallBackFuncPointer+0x4c>
        {
            case TIMER0:
                g_TIMER0_callBack_ptr = ptr_to_func;
    19da:	8a 81       	ldd	r24, Y+2	; 0x02
    19dc:	9b 81       	ldd	r25, Y+3	; 0x03
    19de:	90 93 ac 01 	sts	0x01AC, r25
    19e2:	80 93 ab 01 	sts	0x01AB, r24
    19e6:	06 c0       	rjmp	.+12     	; 0x19f4 <__TIMER_CTC_setISRCallBackFuncPointer+0x4c>
            break;

            case TIMER1:
                g_TIMER1_callBack_ptr = ptr_to_func;
    19e8:	8a 81       	ldd	r24, Y+2	; 0x02
    19ea:	9b 81       	ldd	r25, Y+3	; 0x03
    19ec:	90 93 ae 01 	sts	0x01AE, r25
    19f0:	80 93 ad 01 	sts	0x01AD, r24
            break;

            case TIMER2:break;
            default:break;
        }
    }
    19f4:	0f 90       	pop	r0
    19f6:	0f 90       	pop	r0
    19f8:	0f 90       	pop	r0
    19fa:	0f 90       	pop	r0
    19fc:	0f 90       	pop	r0
    19fe:	cf 91       	pop	r28
    1a00:	df 91       	pop	r29
    1a02:	08 95       	ret

00001a04 <__TIMER_CTC_startTimer>:

/*** Description:-
 * Used to Start the Timer with the desired Configuration
 * Func Args, struct Members: timer_clock / compare_value / OC0_mode */
void __TIMER_CTC_startTimer(const configType_TIMER *t_configPointer)
{
    1a04:	df 93       	push	r29
    1a06:	cf 93       	push	r28
    1a08:	00 d0       	rcall	.+0      	; 0x1a0a <__TIMER_CTC_startTimer+0x6>
    1a0a:	00 d0       	rcall	.+0      	; 0x1a0c <__TIMER_CTC_startTimer+0x8>
    1a0c:	cd b7       	in	r28, 0x3d	; 61
    1a0e:	de b7       	in	r29, 0x3e	; 62
    1a10:	9a 83       	std	Y+2, r25	; 0x02
    1a12:	89 83       	std	Y+1, r24	; 0x01
    switch(t_configPointer->timer_module)
    1a14:	e9 81       	ldd	r30, Y+1	; 0x01
    1a16:	fa 81       	ldd	r31, Y+2	; 0x02
    1a18:	80 81       	ld	r24, Z
    1a1a:	28 2f       	mov	r18, r24
    1a1c:	30 e0       	ldi	r19, 0x00	; 0
    1a1e:	3c 83       	std	Y+4, r19	; 0x04
    1a20:	2b 83       	std	Y+3, r18	; 0x03
    1a22:	8b 81       	ldd	r24, Y+3	; 0x03
    1a24:	9c 81       	ldd	r25, Y+4	; 0x04
    1a26:	00 97       	sbiw	r24, 0x00	; 0
    1a28:	39 f0       	breq	.+14     	; 0x1a38 <__TIMER_CTC_startTimer+0x34>
    1a2a:	2b 81       	ldd	r18, Y+3	; 0x03
    1a2c:	3c 81       	ldd	r19, Y+4	; 0x04
    1a2e:	21 30       	cpi	r18, 0x01	; 1
    1a30:	31 05       	cpc	r19, r1
    1a32:	09 f4       	brne	.+2      	; 0x1a36 <__TIMER_CTC_startTimer+0x32>
    1a34:	57 c0       	rjmp	.+174    	; 0x1ae4 <__TIMER_CTC_startTimer+0xe0>
    1a36:	bf c0       	rjmp	.+382    	; 0x1bb6 <__TIMER_CTC_startTimer+0x1b2>
    {
        case TIMER0:
            /*Disable Global Interrupt flag; Entering Critical Section*/
             DIS_GLOBAL_INTERRUPT;
    1a38:	af e5       	ldi	r26, 0x5F	; 95
    1a3a:	b0 e0       	ldi	r27, 0x00	; 0
    1a3c:	ef e5       	ldi	r30, 0x5F	; 95
    1a3e:	f0 e0       	ldi	r31, 0x00	; 0
    1a40:	80 81       	ld	r24, Z
    1a42:	8f 77       	andi	r24, 0x7F	; 127
    1a44:	8c 93       	st	X, r24
            /*Initialize the TCNT0 with 0 Value*/
            TCNT0 = 0x00;
    1a46:	e2 e5       	ldi	r30, 0x52	; 82
    1a48:	f0 e0       	ldi	r31, 0x00	; 0
    1a4a:	10 82       	st	Z, r1
            /*Set Compare Register with compare value*/
            OCR0 = t_configPointer->compare_value;
    1a4c:	ac e5       	ldi	r26, 0x5C	; 92
    1a4e:	b0 e0       	ldi	r27, 0x00	; 0
    1a50:	e9 81       	ldd	r30, Y+1	; 0x01
    1a52:	fa 81       	ldd	r31, Y+2	; 0x02
    1a54:	82 81       	ldd	r24, Z+2	; 0x02
    1a56:	93 81       	ldd	r25, Z+3	; 0x03
    1a58:	8c 93       	st	X, r24
            /*Set Timer in Non PWM Mode*/
            SET_BIT(TCCR0, FOC0);
    1a5a:	a3 e5       	ldi	r26, 0x53	; 83
    1a5c:	b0 e0       	ldi	r27, 0x00	; 0
    1a5e:	e3 e5       	ldi	r30, 0x53	; 83
    1a60:	f0 e0       	ldi	r31, 0x00	; 0
    1a62:	80 81       	ld	r24, Z
    1a64:	80 68       	ori	r24, 0x80	; 128
    1a66:	8c 93       	st	X, r24
            /*Set The timer in CTC Mode: WGM00=0 / WGM01 = 1*/
            CLR_BIT(TCCR0, WGM00);
    1a68:	a3 e5       	ldi	r26, 0x53	; 83
    1a6a:	b0 e0       	ldi	r27, 0x00	; 0
    1a6c:	e3 e5       	ldi	r30, 0x53	; 83
    1a6e:	f0 e0       	ldi	r31, 0x00	; 0
    1a70:	80 81       	ld	r24, Z
    1a72:	8f 7b       	andi	r24, 0xBF	; 191
    1a74:	8c 93       	st	X, r24
            SET_BIT(TCCR0, WGM01);
    1a76:	a3 e5       	ldi	r26, 0x53	; 83
    1a78:	b0 e0       	ldi	r27, 0x00	; 0
    1a7a:	e3 e5       	ldi	r30, 0x53	; 83
    1a7c:	f0 e0       	ldi	r31, 0x00	; 0
    1a7e:	80 81       	ld	r24, Z
    1a80:	88 60       	ori	r24, 0x08	; 8
    1a82:	8c 93       	st	X, r24
            /*Enable Module Timer 0 Interrupt flag; if OC0 Pin is Disabled*/
            #if(TIMER_OCx_PIN == DISABLED)
                SET_BIT(TIMSK, OCIE0);
    1a84:	a9 e5       	ldi	r26, 0x59	; 89
    1a86:	b0 e0       	ldi	r27, 0x00	; 0
    1a88:	e9 e5       	ldi	r30, 0x59	; 89
    1a8a:	f0 e0       	ldi	r31, 0x00	; 0
    1a8c:	80 81       	ld	r24, Z
    1a8e:	82 60       	ori	r24, 0x02	; 2
    1a90:	8c 93       	st	X, r24
                CLR_BIT(TIMSK, OCIE0);
                /*Set OC0 as Output Pin*/
                SET_BIT(DDRB, PB3);
            #endif
            /*Set Compare Output Mode, non-PWM Mode Pins*/
            TCCR0 = (TCCR0&0b11001111) | (t_configPointer->OCx_mode<<4);
    1a92:	a3 e5       	ldi	r26, 0x53	; 83
    1a94:	b0 e0       	ldi	r27, 0x00	; 0
    1a96:	e3 e5       	ldi	r30, 0x53	; 83
    1a98:	f0 e0       	ldi	r31, 0x00	; 0
    1a9a:	80 81       	ld	r24, Z
    1a9c:	28 2f       	mov	r18, r24
    1a9e:	2f 7c       	andi	r18, 0xCF	; 207
    1aa0:	e9 81       	ldd	r30, Y+1	; 0x01
    1aa2:	fa 81       	ldd	r31, Y+2	; 0x02
    1aa4:	84 81       	ldd	r24, Z+4	; 0x04
    1aa6:	88 2f       	mov	r24, r24
    1aa8:	90 e0       	ldi	r25, 0x00	; 0
    1aaa:	82 95       	swap	r24
    1aac:	92 95       	swap	r25
    1aae:	90 7f       	andi	r25, 0xF0	; 240
    1ab0:	98 27       	eor	r25, r24
    1ab2:	80 7f       	andi	r24, 0xF0	; 240
    1ab4:	98 27       	eor	r25, r24
    1ab6:	82 2b       	or	r24, r18
    1ab8:	8c 93       	st	X, r24
            /*Set the Timer Clock Prescaler*/
            TCCR0 = (TCCR0&0xF8) | (t_configPointer->timer_clock&0x07);
    1aba:	a3 e5       	ldi	r26, 0x53	; 83
    1abc:	b0 e0       	ldi	r27, 0x00	; 0
    1abe:	e3 e5       	ldi	r30, 0x53	; 83
    1ac0:	f0 e0       	ldi	r31, 0x00	; 0
    1ac2:	80 81       	ld	r24, Z
    1ac4:	98 2f       	mov	r25, r24
    1ac6:	98 7f       	andi	r25, 0xF8	; 248
    1ac8:	e9 81       	ldd	r30, Y+1	; 0x01
    1aca:	fa 81       	ldd	r31, Y+2	; 0x02
    1acc:	81 81       	ldd	r24, Z+1	; 0x01
    1ace:	87 70       	andi	r24, 0x07	; 7
    1ad0:	89 2b       	or	r24, r25
    1ad2:	8c 93       	st	X, r24
            /*Enable Global Interrupt flag; Exiting Critical Section*/
            EN_GLOBAL_INTERRUPT;
    1ad4:	af e5       	ldi	r26, 0x5F	; 95
    1ad6:	b0 e0       	ldi	r27, 0x00	; 0
    1ad8:	ef e5       	ldi	r30, 0x5F	; 95
    1ada:	f0 e0       	ldi	r31, 0x00	; 0
    1adc:	80 81       	ld	r24, Z
    1ade:	80 68       	ori	r24, 0x80	; 128
    1ae0:	8c 93       	st	X, r24
    1ae2:	69 c0       	rjmp	.+210    	; 0x1bb6 <__TIMER_CTC_startTimer+0x1b2>
        break;

        case TIMER1:
            /*Disable Global Interrupt flag; Entering Critical Section*/
            DIS_GLOBAL_INTERRUPT;
    1ae4:	af e5       	ldi	r26, 0x5F	; 95
    1ae6:	b0 e0       	ldi	r27, 0x00	; 0
    1ae8:	ef e5       	ldi	r30, 0x5F	; 95
    1aea:	f0 e0       	ldi	r31, 0x00	; 0
    1aec:	80 81       	ld	r24, Z
    1aee:	8f 77       	andi	r24, 0x7F	; 127
    1af0:	8c 93       	st	X, r24
            /*Initialize the TCNT0 with 0 Value*/
            TCNT1 = 0x0000;
    1af2:	ec e4       	ldi	r30, 0x4C	; 76
    1af4:	f0 e0       	ldi	r31, 0x00	; 0
    1af6:	11 82       	std	Z+1, r1	; 0x01
    1af8:	10 82       	st	Z, r1
            /*Set Compare Register with compare value*/
            OCR1A = t_configPointer->compare_value;
    1afa:	aa e4       	ldi	r26, 0x4A	; 74
    1afc:	b0 e0       	ldi	r27, 0x00	; 0
    1afe:	e9 81       	ldd	r30, Y+1	; 0x01
    1b00:	fa 81       	ldd	r31, Y+2	; 0x02
    1b02:	82 81       	ldd	r24, Z+2	; 0x02
    1b04:	93 81       	ldd	r25, Z+3	; 0x03
    1b06:	11 96       	adiw	r26, 0x01	; 1
    1b08:	9c 93       	st	X, r25
    1b0a:	8e 93       	st	-X, r24
            /*Set Timer in Non PWM Mode*/
            SET_BIT(TCCR1A, FOC1A);
    1b0c:	af e4       	ldi	r26, 0x4F	; 79
    1b0e:	b0 e0       	ldi	r27, 0x00	; 0
    1b10:	ef e4       	ldi	r30, 0x4F	; 79
    1b12:	f0 e0       	ldi	r31, 0x00	; 0
    1b14:	80 81       	ld	r24, Z
    1b16:	88 60       	ori	r24, 0x08	; 8
    1b18:	8c 93       	st	X, r24
            /*Set The timer in CTC Mode*/
            CLR_BIT(TCCR1A, WGM10);
    1b1a:	af e4       	ldi	r26, 0x4F	; 79
    1b1c:	b0 e0       	ldi	r27, 0x00	; 0
    1b1e:	ef e4       	ldi	r30, 0x4F	; 79
    1b20:	f0 e0       	ldi	r31, 0x00	; 0
    1b22:	80 81       	ld	r24, Z
    1b24:	8e 7f       	andi	r24, 0xFE	; 254
    1b26:	8c 93       	st	X, r24
            CLR_BIT(TCCR1A, WGM11);
    1b28:	af e4       	ldi	r26, 0x4F	; 79
    1b2a:	b0 e0       	ldi	r27, 0x00	; 0
    1b2c:	ef e4       	ldi	r30, 0x4F	; 79
    1b2e:	f0 e0       	ldi	r31, 0x00	; 0
    1b30:	80 81       	ld	r24, Z
    1b32:	8d 7f       	andi	r24, 0xFD	; 253
    1b34:	8c 93       	st	X, r24
            SET_BIT(TCCR1B, WGM12);
    1b36:	ae e4       	ldi	r26, 0x4E	; 78
    1b38:	b0 e0       	ldi	r27, 0x00	; 0
    1b3a:	ee e4       	ldi	r30, 0x4E	; 78
    1b3c:	f0 e0       	ldi	r31, 0x00	; 0
    1b3e:	80 81       	ld	r24, Z
    1b40:	88 60       	ori	r24, 0x08	; 8
    1b42:	8c 93       	st	X, r24
            CLR_BIT(TCCR1B, WGM13);
    1b44:	ae e4       	ldi	r26, 0x4E	; 78
    1b46:	b0 e0       	ldi	r27, 0x00	; 0
    1b48:	ee e4       	ldi	r30, 0x4E	; 78
    1b4a:	f0 e0       	ldi	r31, 0x00	; 0
    1b4c:	80 81       	ld	r24, Z
    1b4e:	8f 7e       	andi	r24, 0xEF	; 239
    1b50:	8c 93       	st	X, r24
            /*Enable Module Timer 0 Interrupt flag; if OC0 Pin is Disabled*/
            #if(TIMER_OCx_PIN == DISABLED)
                /*Enable Interrupt Enable Module*/
                SET_BIT(TIMSK, OCIE1A);
    1b52:	a9 e5       	ldi	r26, 0x59	; 89
    1b54:	b0 e0       	ldi	r27, 0x00	; 0
    1b56:	e9 e5       	ldi	r30, 0x59	; 89
    1b58:	f0 e0       	ldi	r31, 0x00	; 0
    1b5a:	80 81       	ld	r24, Z
    1b5c:	80 61       	ori	r24, 0x10	; 16
    1b5e:	8c 93       	st	X, r24
                CLR_BIT(TIMSK, OCIE1A);
                /*Set OC0 as Output Pin*/
                SET_BIT(DDRD, PD5);
            #endif
            /*Set Compare Output Mode [non-PWM Mode] Pins*/
            TCCR1A = (TCCR1A&0b00111111) | (t_configPointer->OCx_mode<<6);
    1b60:	af e4       	ldi	r26, 0x4F	; 79
    1b62:	b0 e0       	ldi	r27, 0x00	; 0
    1b64:	ef e4       	ldi	r30, 0x4F	; 79
    1b66:	f0 e0       	ldi	r31, 0x00	; 0
    1b68:	80 81       	ld	r24, Z
    1b6a:	28 2f       	mov	r18, r24
    1b6c:	2f 73       	andi	r18, 0x3F	; 63
    1b6e:	e9 81       	ldd	r30, Y+1	; 0x01
    1b70:	fa 81       	ldd	r31, Y+2	; 0x02
    1b72:	84 81       	ldd	r24, Z+4	; 0x04
    1b74:	88 2f       	mov	r24, r24
    1b76:	90 e0       	ldi	r25, 0x00	; 0
    1b78:	00 24       	eor	r0, r0
    1b7a:	96 95       	lsr	r25
    1b7c:	87 95       	ror	r24
    1b7e:	07 94       	ror	r0
    1b80:	96 95       	lsr	r25
    1b82:	87 95       	ror	r24
    1b84:	07 94       	ror	r0
    1b86:	98 2f       	mov	r25, r24
    1b88:	80 2d       	mov	r24, r0
    1b8a:	82 2b       	or	r24, r18
    1b8c:	8c 93       	st	X, r24
            /*Set the Timer Clock Prescaler*/
            TCCR1B = (TCCR1B&0xF8) | (t_configPointer->timer_clock&0x07);
    1b8e:	ae e4       	ldi	r26, 0x4E	; 78
    1b90:	b0 e0       	ldi	r27, 0x00	; 0
    1b92:	ee e4       	ldi	r30, 0x4E	; 78
    1b94:	f0 e0       	ldi	r31, 0x00	; 0
    1b96:	80 81       	ld	r24, Z
    1b98:	98 2f       	mov	r25, r24
    1b9a:	98 7f       	andi	r25, 0xF8	; 248
    1b9c:	e9 81       	ldd	r30, Y+1	; 0x01
    1b9e:	fa 81       	ldd	r31, Y+2	; 0x02
    1ba0:	81 81       	ldd	r24, Z+1	; 0x01
    1ba2:	87 70       	andi	r24, 0x07	; 7
    1ba4:	89 2b       	or	r24, r25
    1ba6:	8c 93       	st	X, r24
            /*Enable Global Interrupt flag; Exiting Critical Section*/
            EN_GLOBAL_INTERRUPT;        
    1ba8:	af e5       	ldi	r26, 0x5F	; 95
    1baa:	b0 e0       	ldi	r27, 0x00	; 0
    1bac:	ef e5       	ldi	r30, 0x5F	; 95
    1bae:	f0 e0       	ldi	r31, 0x00	; 0
    1bb0:	80 81       	ld	r24, Z
    1bb2:	80 68       	ori	r24, 0x80	; 128
    1bb4:	8c 93       	st	X, r24
        default:break;
    }



}
    1bb6:	0f 90       	pop	r0
    1bb8:	0f 90       	pop	r0
    1bba:	0f 90       	pop	r0
    1bbc:	0f 90       	pop	r0
    1bbe:	cf 91       	pop	r28
    1bc0:	df 91       	pop	r29
    1bc2:	08 95       	ret

00001bc4 <__TIMER_CTC_stopTimer>:


/*** Description:-
 * Used to Disable the timer */
void __TIMER_CTC_stopTimer(uint8 timer_module)
{
    1bc4:	df 93       	push	r29
    1bc6:	cf 93       	push	r28
    1bc8:	00 d0       	rcall	.+0      	; 0x1bca <__TIMER_CTC_stopTimer+0x6>
    1bca:	0f 92       	push	r0
    1bcc:	cd b7       	in	r28, 0x3d	; 61
    1bce:	de b7       	in	r29, 0x3e	; 62
    1bd0:	89 83       	std	Y+1, r24	; 0x01
    switch(timer_module)
    1bd2:	89 81       	ldd	r24, Y+1	; 0x01
    1bd4:	28 2f       	mov	r18, r24
    1bd6:	30 e0       	ldi	r19, 0x00	; 0
    1bd8:	3b 83       	std	Y+3, r19	; 0x03
    1bda:	2a 83       	std	Y+2, r18	; 0x02
    1bdc:	8a 81       	ldd	r24, Y+2	; 0x02
    1bde:	9b 81       	ldd	r25, Y+3	; 0x03
    1be0:	00 97       	sbiw	r24, 0x00	; 0
    1be2:	31 f0       	breq	.+12     	; 0x1bf0 <__TIMER_CTC_stopTimer+0x2c>
    1be4:	2a 81       	ldd	r18, Y+2	; 0x02
    1be6:	3b 81       	ldd	r19, Y+3	; 0x03
    1be8:	21 30       	cpi	r18, 0x01	; 1
    1bea:	31 05       	cpc	r19, r1
    1bec:	d1 f0       	breq	.+52     	; 0x1c22 <__TIMER_CTC_stopTimer+0x5e>
    1bee:	34 c0       	rjmp	.+104    	; 0x1c58 <__TIMER_CTC_stopTimer+0x94>
    {
        case TIMER0:
            /*Disable Global Interrupt flag; Exiting Critical Section*/
            DIS_GLOBAL_INTERRUPT;
    1bf0:	af e5       	ldi	r26, 0x5F	; 95
    1bf2:	b0 e0       	ldi	r27, 0x00	; 0
    1bf4:	ef e5       	ldi	r30, 0x5F	; 95
    1bf6:	f0 e0       	ldi	r31, 0x00	; 0
    1bf8:	80 81       	ld	r24, Z
    1bfa:	8f 77       	andi	r24, 0x7F	; 127
    1bfc:	8c 93       	st	X, r24
            /*Disable Timer Clock Source: will Disable the Timer itself*/
            TCCR0 = 0x00;
    1bfe:	e3 e5       	ldi	r30, 0x53	; 83
    1c00:	f0 e0       	ldi	r31, 0x00	; 0
    1c02:	10 82       	st	Z, r1
            /*for double confirming disable module interrupt flag*/
            CLR_BIT(TIMSK, OCIE0);    //TIMSK &= ~(1<<OCIE0);
    1c04:	a9 e5       	ldi	r26, 0x59	; 89
    1c06:	b0 e0       	ldi	r27, 0x00	; 0
    1c08:	e9 e5       	ldi	r30, 0x59	; 89
    1c0a:	f0 e0       	ldi	r31, 0x00	; 0
    1c0c:	80 81       	ld	r24, Z
    1c0e:	8d 7f       	andi	r24, 0xFD	; 253
    1c10:	8c 93       	st	X, r24
            /*Enable Global Interrupt flag; Exiting Critical Section*/
            EN_GLOBAL_INTERRUPT;
    1c12:	af e5       	ldi	r26, 0x5F	; 95
    1c14:	b0 e0       	ldi	r27, 0x00	; 0
    1c16:	ef e5       	ldi	r30, 0x5F	; 95
    1c18:	f0 e0       	ldi	r31, 0x00	; 0
    1c1a:	80 81       	ld	r24, Z
    1c1c:	80 68       	ori	r24, 0x80	; 128
    1c1e:	8c 93       	st	X, r24
    1c20:	1b c0       	rjmp	.+54     	; 0x1c58 <__TIMER_CTC_stopTimer+0x94>
        break;

        case TIMER1:
            /*Disable Global Interrupt flag; Entering Critical Section*/
            DIS_GLOBAL_INTERRUPT;
    1c22:	af e5       	ldi	r26, 0x5F	; 95
    1c24:	b0 e0       	ldi	r27, 0x00	; 0
    1c26:	ef e5       	ldi	r30, 0x5F	; 95
    1c28:	f0 e0       	ldi	r31, 0x00	; 0
    1c2a:	80 81       	ld	r24, Z
    1c2c:	8f 77       	andi	r24, 0x7F	; 127
    1c2e:	8c 93       	st	X, r24
            /*Disable Timer Clock Source: will Disable the Timer itself*/
            TCCR1A = 0x00;
    1c30:	ef e4       	ldi	r30, 0x4F	; 79
    1c32:	f0 e0       	ldi	r31, 0x00	; 0
    1c34:	10 82       	st	Z, r1
            TCCR1B = 0x00;
    1c36:	ee e4       	ldi	r30, 0x4E	; 78
    1c38:	f0 e0       	ldi	r31, 0x00	; 0
    1c3a:	10 82       	st	Z, r1
            /*for double confirming disable module interrupt flag as well*/
            CLR_BIT(TIMSK, OCIE1A);
    1c3c:	a9 e5       	ldi	r26, 0x59	; 89
    1c3e:	b0 e0       	ldi	r27, 0x00	; 0
    1c40:	e9 e5       	ldi	r30, 0x59	; 89
    1c42:	f0 e0       	ldi	r31, 0x00	; 0
    1c44:	80 81       	ld	r24, Z
    1c46:	8f 7e       	andi	r24, 0xEF	; 239
    1c48:	8c 93       	st	X, r24
            /*Enable Global Interrupt flag; Exiting Critical Section*/
            EN_GLOBAL_INTERRUPT;
    1c4a:	af e5       	ldi	r26, 0x5F	; 95
    1c4c:	b0 e0       	ldi	r27, 0x00	; 0
    1c4e:	ef e5       	ldi	r30, 0x5F	; 95
    1c50:	f0 e0       	ldi	r31, 0x00	; 0
    1c52:	80 81       	ld	r24, Z
    1c54:	80 68       	ori	r24, 0x80	; 128
    1c56:	8c 93       	st	X, r24
        break;

        case TIMER2:break;
        default:break;
    }
}
    1c58:	0f 90       	pop	r0
    1c5a:	0f 90       	pop	r0
    1c5c:	0f 90       	pop	r0
    1c5e:	cf 91       	pop	r28
    1c60:	df 91       	pop	r29
    1c62:	08 95       	ret

00001c64 <__udivmodhi4>:
    1c64:	aa 1b       	sub	r26, r26
    1c66:	bb 1b       	sub	r27, r27
    1c68:	51 e1       	ldi	r21, 0x11	; 17
    1c6a:	07 c0       	rjmp	.+14     	; 0x1c7a <__udivmodhi4_ep>

00001c6c <__udivmodhi4_loop>:
    1c6c:	aa 1f       	adc	r26, r26
    1c6e:	bb 1f       	adc	r27, r27
    1c70:	a6 17       	cp	r26, r22
    1c72:	b7 07       	cpc	r27, r23
    1c74:	10 f0       	brcs	.+4      	; 0x1c7a <__udivmodhi4_ep>
    1c76:	a6 1b       	sub	r26, r22
    1c78:	b7 0b       	sbc	r27, r23

00001c7a <__udivmodhi4_ep>:
    1c7a:	88 1f       	adc	r24, r24
    1c7c:	99 1f       	adc	r25, r25
    1c7e:	5a 95       	dec	r21
    1c80:	a9 f7       	brne	.-22     	; 0x1c6c <__udivmodhi4_loop>
    1c82:	80 95       	com	r24
    1c84:	90 95       	com	r25
    1c86:	bc 01       	movw	r22, r24
    1c88:	cd 01       	movw	r24, r26
    1c8a:	08 95       	ret

00001c8c <__udivmodsi4>:
    1c8c:	a1 e2       	ldi	r26, 0x21	; 33
    1c8e:	1a 2e       	mov	r1, r26
    1c90:	aa 1b       	sub	r26, r26
    1c92:	bb 1b       	sub	r27, r27
    1c94:	fd 01       	movw	r30, r26
    1c96:	0d c0       	rjmp	.+26     	; 0x1cb2 <__udivmodsi4_ep>

00001c98 <__udivmodsi4_loop>:
    1c98:	aa 1f       	adc	r26, r26
    1c9a:	bb 1f       	adc	r27, r27
    1c9c:	ee 1f       	adc	r30, r30
    1c9e:	ff 1f       	adc	r31, r31
    1ca0:	a2 17       	cp	r26, r18
    1ca2:	b3 07       	cpc	r27, r19
    1ca4:	e4 07       	cpc	r30, r20
    1ca6:	f5 07       	cpc	r31, r21
    1ca8:	20 f0       	brcs	.+8      	; 0x1cb2 <__udivmodsi4_ep>
    1caa:	a2 1b       	sub	r26, r18
    1cac:	b3 0b       	sbc	r27, r19
    1cae:	e4 0b       	sbc	r30, r20
    1cb0:	f5 0b       	sbc	r31, r21

00001cb2 <__udivmodsi4_ep>:
    1cb2:	66 1f       	adc	r22, r22
    1cb4:	77 1f       	adc	r23, r23
    1cb6:	88 1f       	adc	r24, r24
    1cb8:	99 1f       	adc	r25, r25
    1cba:	1a 94       	dec	r1
    1cbc:	69 f7       	brne	.-38     	; 0x1c98 <__udivmodsi4_loop>
    1cbe:	60 95       	com	r22
    1cc0:	70 95       	com	r23
    1cc2:	80 95       	com	r24
    1cc4:	90 95       	com	r25
    1cc6:	9b 01       	movw	r18, r22
    1cc8:	ac 01       	movw	r20, r24
    1cca:	bd 01       	movw	r22, r26
    1ccc:	cf 01       	movw	r24, r30
    1cce:	08 95       	ret

00001cd0 <_exit>:
    1cd0:	f8 94       	cli

00001cd2 <__stop_program>:
    1cd2:	ff cf       	rjmp	.-2      	; 0x1cd2 <__stop_program>
