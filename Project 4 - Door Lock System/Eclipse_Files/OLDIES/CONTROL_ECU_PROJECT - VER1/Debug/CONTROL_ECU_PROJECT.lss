
CONTROL_ECU_PROJECT.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000194e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000022  00800060  0000194e  000019e2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000001a  00800082  00800082  00001a04  2**0
                  ALLOC
  3 .stab         00001f74  00000000  00000000  00001a04  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000011ce  00000000  00000000  00003978  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 f8 0a 	jmp	0x15f0	; 0x15f0 <__vector_6>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 cb 0a 	jmp	0x1596	; 0x1596 <__vector_19>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ee e4       	ldi	r30, 0x4E	; 78
      68:	f9 e1       	ldi	r31, 0x19	; 25
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a2 38       	cpi	r26, 0x82	; 130
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a2 e8       	ldi	r26, 0x82	; 130
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ac 39       	cpi	r26, 0x9C	; 156
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 3d 04 	call	0x87a	; 0x87a <main>
      8a:	0c 94 a5 0c 	jmp	0x194a	; 0x194a <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__DIO_setPinDirection>:
/** Functions Definitions ****************************************************/

/*** Description:-
 * Adjust the DDR_x Registers for Desired PXX with needed direction */
void  __DIO_setPinDirection(uint8 port_name,uint8 pin_name,uint8 direction)
{
      92:	df 93       	push	r29
      94:	cf 93       	push	r28
      96:	00 d0       	rcall	.+0      	; 0x98 <__DIO_setPinDirection+0x6>
      98:	0f 92       	push	r0
      9a:	cd b7       	in	r28, 0x3d	; 61
      9c:	de b7       	in	r29, 0x3e	; 62
      9e:	89 83       	std	Y+1, r24	; 0x01
      a0:	6a 83       	std	Y+2, r22	; 0x02
      a2:	4b 83       	std	Y+3, r20	; 0x03
    if( direction == OUTPUT_PIN )
      a4:	8b 81       	ldd	r24, Y+3	; 0x03
      a6:	81 30       	cpi	r24, 0x01	; 1
      a8:	29 f5       	brne	.+74     	; 0xf4 <__DIO_setPinDirection+0x62>
    {
        SET_BIT(*ddr_regs[port_name], pin_name);
      aa:	89 81       	ldd	r24, Y+1	; 0x01
      ac:	88 2f       	mov	r24, r24
      ae:	90 e0       	ldi	r25, 0x00	; 0
      b0:	88 0f       	add	r24, r24
      b2:	99 1f       	adc	r25, r25
      b4:	fc 01       	movw	r30, r24
      b6:	eb 59       	subi	r30, 0x9B	; 155
      b8:	ff 4f       	sbci	r31, 0xFF	; 255
      ba:	a0 81       	ld	r26, Z
      bc:	b1 81       	ldd	r27, Z+1	; 0x01
      be:	89 81       	ldd	r24, Y+1	; 0x01
      c0:	88 2f       	mov	r24, r24
      c2:	90 e0       	ldi	r25, 0x00	; 0
      c4:	88 0f       	add	r24, r24
      c6:	99 1f       	adc	r25, r25
      c8:	fc 01       	movw	r30, r24
      ca:	eb 59       	subi	r30, 0x9B	; 155
      cc:	ff 4f       	sbci	r31, 0xFF	; 255
      ce:	01 90       	ld	r0, Z+
      d0:	f0 81       	ld	r31, Z
      d2:	e0 2d       	mov	r30, r0
      d4:	80 81       	ld	r24, Z
      d6:	48 2f       	mov	r20, r24
      d8:	8a 81       	ldd	r24, Y+2	; 0x02
      da:	28 2f       	mov	r18, r24
      dc:	30 e0       	ldi	r19, 0x00	; 0
      de:	81 e0       	ldi	r24, 0x01	; 1
      e0:	90 e0       	ldi	r25, 0x00	; 0
      e2:	02 2e       	mov	r0, r18
      e4:	02 c0       	rjmp	.+4      	; 0xea <__DIO_setPinDirection+0x58>
      e6:	88 0f       	add	r24, r24
      e8:	99 1f       	adc	r25, r25
      ea:	0a 94       	dec	r0
      ec:	e2 f7       	brpl	.-8      	; 0xe6 <__DIO_setPinDirection+0x54>
      ee:	84 2b       	or	r24, r20
      f0:	8c 93       	st	X, r24
      f2:	28 c0       	rjmp	.+80     	; 0x144 <__DIO_setPinDirection+0xb2>
    }
    else if( direction == INPUT_PIN )
      f4:	8b 81       	ldd	r24, Y+3	; 0x03
      f6:	88 23       	and	r24, r24
      f8:	29 f5       	brne	.+74     	; 0x144 <__DIO_setPinDirection+0xb2>
    {
        CLR_BIT(*ddr_regs[port_name], pin_name);
      fa:	89 81       	ldd	r24, Y+1	; 0x01
      fc:	88 2f       	mov	r24, r24
      fe:	90 e0       	ldi	r25, 0x00	; 0
     100:	88 0f       	add	r24, r24
     102:	99 1f       	adc	r25, r25
     104:	fc 01       	movw	r30, r24
     106:	eb 59       	subi	r30, 0x9B	; 155
     108:	ff 4f       	sbci	r31, 0xFF	; 255
     10a:	a0 81       	ld	r26, Z
     10c:	b1 81       	ldd	r27, Z+1	; 0x01
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	88 2f       	mov	r24, r24
     112:	90 e0       	ldi	r25, 0x00	; 0
     114:	88 0f       	add	r24, r24
     116:	99 1f       	adc	r25, r25
     118:	fc 01       	movw	r30, r24
     11a:	eb 59       	subi	r30, 0x9B	; 155
     11c:	ff 4f       	sbci	r31, 0xFF	; 255
     11e:	01 90       	ld	r0, Z+
     120:	f0 81       	ld	r31, Z
     122:	e0 2d       	mov	r30, r0
     124:	80 81       	ld	r24, Z
     126:	48 2f       	mov	r20, r24
     128:	8a 81       	ldd	r24, Y+2	; 0x02
     12a:	28 2f       	mov	r18, r24
     12c:	30 e0       	ldi	r19, 0x00	; 0
     12e:	81 e0       	ldi	r24, 0x01	; 1
     130:	90 e0       	ldi	r25, 0x00	; 0
     132:	02 2e       	mov	r0, r18
     134:	02 c0       	rjmp	.+4      	; 0x13a <__DIO_setPinDirection+0xa8>
     136:	88 0f       	add	r24, r24
     138:	99 1f       	adc	r25, r25
     13a:	0a 94       	dec	r0
     13c:	e2 f7       	brpl	.-8      	; 0x136 <__DIO_setPinDirection+0xa4>
     13e:	80 95       	com	r24
     140:	84 23       	and	r24, r20
     142:	8c 93       	st	X, r24
    }
    else{}
}
     144:	0f 90       	pop	r0
     146:	0f 90       	pop	r0
     148:	0f 90       	pop	r0
     14a:	cf 91       	pop	r28
     14c:	df 91       	pop	r29
     14e:	08 95       	ret

00000150 <__DIO_enableInternalPullupResistance>:


/*** Description:-
 * Enable Internal Pullup Resistor for the Input Pin */
void  __DIO_enableInternalPullupResistance(uint8 port_name,uint8 pin_name)
{
     150:	df 93       	push	r29
     152:	cf 93       	push	r28
     154:	00 d0       	rcall	.+0      	; 0x156 <__DIO_enableInternalPullupResistance+0x6>
     156:	cd b7       	in	r28, 0x3d	; 61
     158:	de b7       	in	r29, 0x3e	; 62
     15a:	89 83       	std	Y+1, r24	; 0x01
     15c:	6a 83       	std	Y+2, r22	; 0x02
    SET_BIT(*port_regs[port_name], pin_name);
     15e:	89 81       	ldd	r24, Y+1	; 0x01
     160:	88 2f       	mov	r24, r24
     162:	90 e0       	ldi	r25, 0x00	; 0
     164:	88 0f       	add	r24, r24
     166:	99 1f       	adc	r25, r25
     168:	fc 01       	movw	r30, r24
     16a:	eb 58       	subi	r30, 0x8B	; 139
     16c:	ff 4f       	sbci	r31, 0xFF	; 255
     16e:	a0 81       	ld	r26, Z
     170:	b1 81       	ldd	r27, Z+1	; 0x01
     172:	89 81       	ldd	r24, Y+1	; 0x01
     174:	88 2f       	mov	r24, r24
     176:	90 e0       	ldi	r25, 0x00	; 0
     178:	88 0f       	add	r24, r24
     17a:	99 1f       	adc	r25, r25
     17c:	fc 01       	movw	r30, r24
     17e:	eb 58       	subi	r30, 0x8B	; 139
     180:	ff 4f       	sbci	r31, 0xFF	; 255
     182:	01 90       	ld	r0, Z+
     184:	f0 81       	ld	r31, Z
     186:	e0 2d       	mov	r30, r0
     188:	80 81       	ld	r24, Z
     18a:	48 2f       	mov	r20, r24
     18c:	8a 81       	ldd	r24, Y+2	; 0x02
     18e:	28 2f       	mov	r18, r24
     190:	30 e0       	ldi	r19, 0x00	; 0
     192:	81 e0       	ldi	r24, 0x01	; 1
     194:	90 e0       	ldi	r25, 0x00	; 0
     196:	02 2e       	mov	r0, r18
     198:	02 c0       	rjmp	.+4      	; 0x19e <__DIO_enableInternalPullupResistance+0x4e>
     19a:	88 0f       	add	r24, r24
     19c:	99 1f       	adc	r25, r25
     19e:	0a 94       	dec	r0
     1a0:	e2 f7       	brpl	.-8      	; 0x19a <__DIO_enableInternalPullupResistance+0x4a>
     1a2:	84 2b       	or	r24, r20
     1a4:	8c 93       	st	X, r24
}
     1a6:	0f 90       	pop	r0
     1a8:	0f 90       	pop	r0
     1aa:	cf 91       	pop	r28
     1ac:	df 91       	pop	r29
     1ae:	08 95       	ret

000001b0 <__DIO_writeOutputPinValue>:


/*** Description:-
 * Output a Digital Value over the Output Pin */
void  __DIO_writeOutputPinValue(uint8 port_name,uint8 pin_name,uint8 value)
{
     1b0:	df 93       	push	r29
     1b2:	cf 93       	push	r28
     1b4:	00 d0       	rcall	.+0      	; 0x1b6 <__DIO_writeOutputPinValue+0x6>
     1b6:	0f 92       	push	r0
     1b8:	cd b7       	in	r28, 0x3d	; 61
     1ba:	de b7       	in	r29, 0x3e	; 62
     1bc:	89 83       	std	Y+1, r24	; 0x01
     1be:	6a 83       	std	Y+2, r22	; 0x02
     1c0:	4b 83       	std	Y+3, r20	; 0x03
    if( value == HIGH )
     1c2:	8b 81       	ldd	r24, Y+3	; 0x03
     1c4:	81 30       	cpi	r24, 0x01	; 1
     1c6:	29 f5       	brne	.+74     	; 0x212 <__DIO_writeOutputPinValue+0x62>
    {
        SET_BIT(*port_regs[port_name], pin_name);
     1c8:	89 81       	ldd	r24, Y+1	; 0x01
     1ca:	88 2f       	mov	r24, r24
     1cc:	90 e0       	ldi	r25, 0x00	; 0
     1ce:	88 0f       	add	r24, r24
     1d0:	99 1f       	adc	r25, r25
     1d2:	fc 01       	movw	r30, r24
     1d4:	eb 58       	subi	r30, 0x8B	; 139
     1d6:	ff 4f       	sbci	r31, 0xFF	; 255
     1d8:	a0 81       	ld	r26, Z
     1da:	b1 81       	ldd	r27, Z+1	; 0x01
     1dc:	89 81       	ldd	r24, Y+1	; 0x01
     1de:	88 2f       	mov	r24, r24
     1e0:	90 e0       	ldi	r25, 0x00	; 0
     1e2:	88 0f       	add	r24, r24
     1e4:	99 1f       	adc	r25, r25
     1e6:	fc 01       	movw	r30, r24
     1e8:	eb 58       	subi	r30, 0x8B	; 139
     1ea:	ff 4f       	sbci	r31, 0xFF	; 255
     1ec:	01 90       	ld	r0, Z+
     1ee:	f0 81       	ld	r31, Z
     1f0:	e0 2d       	mov	r30, r0
     1f2:	80 81       	ld	r24, Z
     1f4:	48 2f       	mov	r20, r24
     1f6:	8a 81       	ldd	r24, Y+2	; 0x02
     1f8:	28 2f       	mov	r18, r24
     1fa:	30 e0       	ldi	r19, 0x00	; 0
     1fc:	81 e0       	ldi	r24, 0x01	; 1
     1fe:	90 e0       	ldi	r25, 0x00	; 0
     200:	02 2e       	mov	r0, r18
     202:	02 c0       	rjmp	.+4      	; 0x208 <__DIO_writeOutputPinValue+0x58>
     204:	88 0f       	add	r24, r24
     206:	99 1f       	adc	r25, r25
     208:	0a 94       	dec	r0
     20a:	e2 f7       	brpl	.-8      	; 0x204 <__DIO_writeOutputPinValue+0x54>
     20c:	84 2b       	or	r24, r20
     20e:	8c 93       	st	X, r24
     210:	28 c0       	rjmp	.+80     	; 0x262 <__DIO_writeOutputPinValue+0xb2>
    }
    else if( value == LOW )
     212:	8b 81       	ldd	r24, Y+3	; 0x03
     214:	88 23       	and	r24, r24
     216:	29 f5       	brne	.+74     	; 0x262 <__DIO_writeOutputPinValue+0xb2>
    {
        CLR_BIT(*port_regs[port_name], pin_name);
     218:	89 81       	ldd	r24, Y+1	; 0x01
     21a:	88 2f       	mov	r24, r24
     21c:	90 e0       	ldi	r25, 0x00	; 0
     21e:	88 0f       	add	r24, r24
     220:	99 1f       	adc	r25, r25
     222:	fc 01       	movw	r30, r24
     224:	eb 58       	subi	r30, 0x8B	; 139
     226:	ff 4f       	sbci	r31, 0xFF	; 255
     228:	a0 81       	ld	r26, Z
     22a:	b1 81       	ldd	r27, Z+1	; 0x01
     22c:	89 81       	ldd	r24, Y+1	; 0x01
     22e:	88 2f       	mov	r24, r24
     230:	90 e0       	ldi	r25, 0x00	; 0
     232:	88 0f       	add	r24, r24
     234:	99 1f       	adc	r25, r25
     236:	fc 01       	movw	r30, r24
     238:	eb 58       	subi	r30, 0x8B	; 139
     23a:	ff 4f       	sbci	r31, 0xFF	; 255
     23c:	01 90       	ld	r0, Z+
     23e:	f0 81       	ld	r31, Z
     240:	e0 2d       	mov	r30, r0
     242:	80 81       	ld	r24, Z
     244:	48 2f       	mov	r20, r24
     246:	8a 81       	ldd	r24, Y+2	; 0x02
     248:	28 2f       	mov	r18, r24
     24a:	30 e0       	ldi	r19, 0x00	; 0
     24c:	81 e0       	ldi	r24, 0x01	; 1
     24e:	90 e0       	ldi	r25, 0x00	; 0
     250:	02 2e       	mov	r0, r18
     252:	02 c0       	rjmp	.+4      	; 0x258 <__DIO_writeOutputPinValue+0xa8>
     254:	88 0f       	add	r24, r24
     256:	99 1f       	adc	r25, r25
     258:	0a 94       	dec	r0
     25a:	e2 f7       	brpl	.-8      	; 0x254 <__DIO_writeOutputPinValue+0xa4>
     25c:	80 95       	com	r24
     25e:	84 23       	and	r24, r20
     260:	8c 93       	st	X, r24
    }
    else{}
}
     262:	0f 90       	pop	r0
     264:	0f 90       	pop	r0
     266:	0f 90       	pop	r0
     268:	cf 91       	pop	r28
     26a:	df 91       	pop	r29
     26c:	08 95       	ret

0000026e <__DIO_readInputPinValue>:


/*** Description:-
 * Read and fetch the Digital Value from a Pin */
uint8 __DIO_readInputPinValue(uint8 port_name,uint8 pin_name)
{
     26e:	df 93       	push	r29
     270:	cf 93       	push	r28
     272:	00 d0       	rcall	.+0      	; 0x274 <__DIO_readInputPinValue+0x6>
     274:	cd b7       	in	r28, 0x3d	; 61
     276:	de b7       	in	r29, 0x3e	; 62
     278:	89 83       	std	Y+1, r24	; 0x01
     27a:	6a 83       	std	Y+2, r22	; 0x02
    return READ_BIT(*pin_regs[port_name], pin_name);
     27c:	89 81       	ldd	r24, Y+1	; 0x01
     27e:	88 2f       	mov	r24, r24
     280:	90 e0       	ldi	r25, 0x00	; 0
     282:	88 0f       	add	r24, r24
     284:	99 1f       	adc	r25, r25
     286:	fc 01       	movw	r30, r24
     288:	e3 59       	subi	r30, 0x93	; 147
     28a:	ff 4f       	sbci	r31, 0xFF	; 255
     28c:	01 90       	ld	r0, Z+
     28e:	f0 81       	ld	r31, Z
     290:	e0 2d       	mov	r30, r0
     292:	80 81       	ld	r24, Z
     294:	48 2f       	mov	r20, r24
     296:	50 e0       	ldi	r21, 0x00	; 0
     298:	8a 81       	ldd	r24, Y+2	; 0x02
     29a:	28 2f       	mov	r18, r24
     29c:	30 e0       	ldi	r19, 0x00	; 0
     29e:	81 e0       	ldi	r24, 0x01	; 1
     2a0:	90 e0       	ldi	r25, 0x00	; 0
     2a2:	02 c0       	rjmp	.+4      	; 0x2a8 <__DIO_readInputPinValue+0x3a>
     2a4:	88 0f       	add	r24, r24
     2a6:	99 1f       	adc	r25, r25
     2a8:	2a 95       	dec	r18
     2aa:	e2 f7       	brpl	.-8      	; 0x2a4 <__DIO_readInputPinValue+0x36>
     2ac:	9a 01       	movw	r18, r20
     2ae:	28 23       	and	r18, r24
     2b0:	39 23       	and	r19, r25
     2b2:	8a 81       	ldd	r24, Y+2	; 0x02
     2b4:	88 2f       	mov	r24, r24
     2b6:	90 e0       	ldi	r25, 0x00	; 0
     2b8:	a9 01       	movw	r20, r18
     2ba:	02 c0       	rjmp	.+4      	; 0x2c0 <__DIO_readInputPinValue+0x52>
     2bc:	55 95       	asr	r21
     2be:	47 95       	ror	r20
     2c0:	8a 95       	dec	r24
     2c2:	e2 f7       	brpl	.-8      	; 0x2bc <__DIO_readInputPinValue+0x4e>
     2c4:	ca 01       	movw	r24, r20
}
     2c6:	0f 90       	pop	r0
     2c8:	0f 90       	pop	r0
     2ca:	cf 91       	pop	r28
     2cc:	df 91       	pop	r29
     2ce:	08 95       	ret

000002d0 <__DIO_toggleOutputPinValue>:


/*** Description:-
 * Toggle the Value of Output Pin */
void  __DIO_toggleOutputPinValue(uint8 port_name,uint8 pin_name)
{
     2d0:	df 93       	push	r29
     2d2:	cf 93       	push	r28
     2d4:	00 d0       	rcall	.+0      	; 0x2d6 <__DIO_toggleOutputPinValue+0x6>
     2d6:	cd b7       	in	r28, 0x3d	; 61
     2d8:	de b7       	in	r29, 0x3e	; 62
     2da:	89 83       	std	Y+1, r24	; 0x01
     2dc:	6a 83       	std	Y+2, r22	; 0x02
    TGL_BIT(*port_regs[port_name], pin_name);
     2de:	89 81       	ldd	r24, Y+1	; 0x01
     2e0:	88 2f       	mov	r24, r24
     2e2:	90 e0       	ldi	r25, 0x00	; 0
     2e4:	88 0f       	add	r24, r24
     2e6:	99 1f       	adc	r25, r25
     2e8:	fc 01       	movw	r30, r24
     2ea:	eb 58       	subi	r30, 0x8B	; 139
     2ec:	ff 4f       	sbci	r31, 0xFF	; 255
     2ee:	a0 81       	ld	r26, Z
     2f0:	b1 81       	ldd	r27, Z+1	; 0x01
     2f2:	89 81       	ldd	r24, Y+1	; 0x01
     2f4:	88 2f       	mov	r24, r24
     2f6:	90 e0       	ldi	r25, 0x00	; 0
     2f8:	88 0f       	add	r24, r24
     2fa:	99 1f       	adc	r25, r25
     2fc:	fc 01       	movw	r30, r24
     2fe:	eb 58       	subi	r30, 0x8B	; 139
     300:	ff 4f       	sbci	r31, 0xFF	; 255
     302:	01 90       	ld	r0, Z+
     304:	f0 81       	ld	r31, Z
     306:	e0 2d       	mov	r30, r0
     308:	80 81       	ld	r24, Z
     30a:	48 2f       	mov	r20, r24
     30c:	8a 81       	ldd	r24, Y+2	; 0x02
     30e:	28 2f       	mov	r18, r24
     310:	30 e0       	ldi	r19, 0x00	; 0
     312:	81 e0       	ldi	r24, 0x01	; 1
     314:	90 e0       	ldi	r25, 0x00	; 0
     316:	02 2e       	mov	r0, r18
     318:	02 c0       	rjmp	.+4      	; 0x31e <__DIO_toggleOutputPinValue+0x4e>
     31a:	88 0f       	add	r24, r24
     31c:	99 1f       	adc	r25, r25
     31e:	0a 94       	dec	r0
     320:	e2 f7       	brpl	.-8      	; 0x31a <__DIO_toggleOutputPinValue+0x4a>
     322:	84 27       	eor	r24, r20
     324:	8c 93       	st	X, r24
}
     326:	0f 90       	pop	r0
     328:	0f 90       	pop	r0
     32a:	cf 91       	pop	r28
     32c:	df 91       	pop	r29
     32e:	08 95       	ret

00000330 <__DIO_setPortDirection>:


/*** Description:-
 * Adjust the DDR_x Registers for Whole PORT with needed direction */
void  __DIO_setPortDirection(uint8 port_name, uint8 direction)
{
     330:	df 93       	push	r29
     332:	cf 93       	push	r28
     334:	00 d0       	rcall	.+0      	; 0x336 <__DIO_setPortDirection+0x6>
     336:	cd b7       	in	r28, 0x3d	; 61
     338:	de b7       	in	r29, 0x3e	; 62
     33a:	89 83       	std	Y+1, r24	; 0x01
     33c:	6a 83       	std	Y+2, r22	; 0x02
    if( direction == OUTPUT_PORT )
     33e:	8a 81       	ldd	r24, Y+2	; 0x02
     340:	81 30       	cpi	r24, 0x01	; 1
     342:	71 f4       	brne	.+28     	; 0x360 <__DIO_setPortDirection+0x30>
    {
        *ddr_regs[port_name] = 0xFF;
     344:	89 81       	ldd	r24, Y+1	; 0x01
     346:	88 2f       	mov	r24, r24
     348:	90 e0       	ldi	r25, 0x00	; 0
     34a:	88 0f       	add	r24, r24
     34c:	99 1f       	adc	r25, r25
     34e:	fc 01       	movw	r30, r24
     350:	eb 59       	subi	r30, 0x9B	; 155
     352:	ff 4f       	sbci	r31, 0xFF	; 255
     354:	01 90       	ld	r0, Z+
     356:	f0 81       	ld	r31, Z
     358:	e0 2d       	mov	r30, r0
     35a:	8f ef       	ldi	r24, 0xFF	; 255
     35c:	80 83       	st	Z, r24
     35e:	0f c0       	rjmp	.+30     	; 0x37e <__DIO_setPortDirection+0x4e>
    }
    else if( direction == INPUT_PORT )
     360:	8a 81       	ldd	r24, Y+2	; 0x02
     362:	88 23       	and	r24, r24
     364:	61 f4       	brne	.+24     	; 0x37e <__DIO_setPortDirection+0x4e>
    {
        *ddr_regs[port_name] = 0x00;
     366:	89 81       	ldd	r24, Y+1	; 0x01
     368:	88 2f       	mov	r24, r24
     36a:	90 e0       	ldi	r25, 0x00	; 0
     36c:	88 0f       	add	r24, r24
     36e:	99 1f       	adc	r25, r25
     370:	fc 01       	movw	r30, r24
     372:	eb 59       	subi	r30, 0x9B	; 155
     374:	ff 4f       	sbci	r31, 0xFF	; 255
     376:	01 90       	ld	r0, Z+
     378:	f0 81       	ld	r31, Z
     37a:	e0 2d       	mov	r30, r0
     37c:	10 82       	st	Z, r1
    }
    else{}
}
     37e:	0f 90       	pop	r0
     380:	0f 90       	pop	r0
     382:	cf 91       	pop	r28
     384:	df 91       	pop	r29
     386:	08 95       	ret

00000388 <__DIO_enablePortInternalPullupResistance>:


/*** Description:-
 * Enable Internal Pullup Resistor for whole PORT Input Pins */
void  __DIO_enablePortInternalPullupResistance(uint8 port_name)
{
     388:	df 93       	push	r29
     38a:	cf 93       	push	r28
     38c:	0f 92       	push	r0
     38e:	cd b7       	in	r28, 0x3d	; 61
     390:	de b7       	in	r29, 0x3e	; 62
     392:	89 83       	std	Y+1, r24	; 0x01
    *port_regs[port_name] = 0xFF;
     394:	89 81       	ldd	r24, Y+1	; 0x01
     396:	88 2f       	mov	r24, r24
     398:	90 e0       	ldi	r25, 0x00	; 0
     39a:	88 0f       	add	r24, r24
     39c:	99 1f       	adc	r25, r25
     39e:	fc 01       	movw	r30, r24
     3a0:	eb 58       	subi	r30, 0x8B	; 139
     3a2:	ff 4f       	sbci	r31, 0xFF	; 255
     3a4:	01 90       	ld	r0, Z+
     3a6:	f0 81       	ld	r31, Z
     3a8:	e0 2d       	mov	r30, r0
     3aa:	8f ef       	ldi	r24, 0xFF	; 255
     3ac:	80 83       	st	Z, r24
}
     3ae:	0f 90       	pop	r0
     3b0:	cf 91       	pop	r28
     3b2:	df 91       	pop	r29
     3b4:	08 95       	ret

000003b6 <__DIO_writeOutputPortValue>:


/*** Description:-
 * Output a Digital Values over PORT Output Pins */
void  __DIO_writeOutputPortValue(uint8 port_name,uint8 value)
{
     3b6:	df 93       	push	r29
     3b8:	cf 93       	push	r28
     3ba:	00 d0       	rcall	.+0      	; 0x3bc <__DIO_writeOutputPortValue+0x6>
     3bc:	cd b7       	in	r28, 0x3d	; 61
     3be:	de b7       	in	r29, 0x3e	; 62
     3c0:	89 83       	std	Y+1, r24	; 0x01
     3c2:	6a 83       	std	Y+2, r22	; 0x02
    *port_regs[port_name] = value;
     3c4:	89 81       	ldd	r24, Y+1	; 0x01
     3c6:	88 2f       	mov	r24, r24
     3c8:	90 e0       	ldi	r25, 0x00	; 0
     3ca:	88 0f       	add	r24, r24
     3cc:	99 1f       	adc	r25, r25
     3ce:	fc 01       	movw	r30, r24
     3d0:	eb 58       	subi	r30, 0x8B	; 139
     3d2:	ff 4f       	sbci	r31, 0xFF	; 255
     3d4:	01 90       	ld	r0, Z+
     3d6:	f0 81       	ld	r31, Z
     3d8:	e0 2d       	mov	r30, r0
     3da:	8a 81       	ldd	r24, Y+2	; 0x02
     3dc:	80 83       	st	Z, r24
}
     3de:	0f 90       	pop	r0
     3e0:	0f 90       	pop	r0
     3e2:	cf 91       	pop	r28
     3e4:	df 91       	pop	r29
     3e6:	08 95       	ret

000003e8 <__DIO_readInputPortValue>:


/*** Description:-
 * Read and fetch the Digital Values from PORT Pins */
uint8 __DIO_readInputPortValue(uint8 port_name)
{
     3e8:	df 93       	push	r29
     3ea:	cf 93       	push	r28
     3ec:	0f 92       	push	r0
     3ee:	cd b7       	in	r28, 0x3d	; 61
     3f0:	de b7       	in	r29, 0x3e	; 62
     3f2:	89 83       	std	Y+1, r24	; 0x01
    return *pin_regs[port_name];
     3f4:	89 81       	ldd	r24, Y+1	; 0x01
     3f6:	88 2f       	mov	r24, r24
     3f8:	90 e0       	ldi	r25, 0x00	; 0
     3fa:	88 0f       	add	r24, r24
     3fc:	99 1f       	adc	r25, r25
     3fe:	fc 01       	movw	r30, r24
     400:	e3 59       	subi	r30, 0x93	; 147
     402:	ff 4f       	sbci	r31, 0xFF	; 255
     404:	01 90       	ld	r0, Z+
     406:	f0 81       	ld	r31, Z
     408:	e0 2d       	mov	r30, r0
     40a:	80 81       	ld	r24, Z
}
     40c:	0f 90       	pop	r0
     40e:	cf 91       	pop	r28
     410:	df 91       	pop	r29
     412:	08 95       	ret

00000414 <__TWI_init>:
 *  - Bit Rate Equation = (F_CPU/16+(2*TWBR*PRESCALE_VALUE))
 *  - TWPS_value    : PRESCALE_1 / PRESCALE_4 / PRESCALE_16 / PRESCALE_64
 *  - TWBR_value    : values from 0 to 255
 *  - TWI_myAddress : values from 0 to 128*/
void  __TWI_init(const TWI_config *p_TWI_config)
{
     414:	df 93       	push	r29
     416:	cf 93       	push	r28
     418:	00 d0       	rcall	.+0      	; 0x41a <__TWI_init+0x6>
     41a:	cd b7       	in	r28, 0x3d	; 61
     41c:	de b7       	in	r29, 0x3e	; 62
     41e:	9a 83       	std	Y+2, r25	; 0x02
     420:	89 83       	std	Y+1, r24	; 0x01
    /*Set the TWBR value for Bitrate adjusting in TWBR Register*/
    TWBR = p_TWI_config->TWBR_value;
     422:	a0 e2       	ldi	r26, 0x20	; 32
     424:	b0 e0       	ldi	r27, 0x00	; 0
     426:	e9 81       	ldd	r30, Y+1	; 0x01
     428:	fa 81       	ldd	r31, Y+2	; 0x02
     42a:	82 81       	ldd	r24, Z+2	; 0x02
     42c:	8c 93       	st	X, r24

    /*Set the TWPS value for Bitrate adjusting in TWBR Register*/
    TWSR = (TWSR&0b11111100) | (p_TWI_config->TWPS_value);
     42e:	a1 e2       	ldi	r26, 0x21	; 33
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	e1 e2       	ldi	r30, 0x21	; 33
     434:	f0 e0       	ldi	r31, 0x00	; 0
     436:	80 81       	ld	r24, Z
     438:	28 2f       	mov	r18, r24
     43a:	2c 7f       	andi	r18, 0xFC	; 252
     43c:	e9 81       	ldd	r30, Y+1	; 0x01
     43e:	fa 81       	ldd	r31, Y+2	; 0x02
     440:	80 81       	ld	r24, Z
     442:	91 81       	ldd	r25, Z+1	; 0x01
     444:	82 2b       	or	r24, r18
     446:	8c 93       	st	X, r24

    /*Set the System Module Identification Address*/
    TWAR = p_TWI_config->TWI_myAddress;
     448:	a2 e2       	ldi	r26, 0x22	; 34
     44a:	b0 e0       	ldi	r27, 0x00	; 0
     44c:	e9 81       	ldd	r30, Y+1	; 0x01
     44e:	fa 81       	ldd	r31, Y+2	; 0x02
     450:	83 81       	ldd	r24, Z+3	; 0x03
     452:	8c 93       	st	X, r24

    /*Enable TWI Module TWI Enable Pin*/
    SET_BIT(TWCR, TWEN);
     454:	a6 e5       	ldi	r26, 0x56	; 86
     456:	b0 e0       	ldi	r27, 0x00	; 0
     458:	e6 e5       	ldi	r30, 0x56	; 86
     45a:	f0 e0       	ldi	r31, 0x00	; 0
     45c:	80 81       	ld	r24, Z
     45e:	84 60       	ori	r24, 0x04	; 4
     460:	8c 93       	st	X, r24
}
     462:	0f 90       	pop	r0
     464:	0f 90       	pop	r0
     466:	cf 91       	pop	r28
     468:	df 91       	pop	r29
     46a:	08 95       	ret

0000046c <__TWI_startFrame>:

/*** Description:-
 * Function Used to send start bit for a Frame
 */
void  __TWI_startFrame(void)
{
     46c:	df 93       	push	r29
     46e:	cf 93       	push	r28
     470:	cd b7       	in	r28, 0x3d	; 61
     472:	de b7       	in	r29, 0x3e	; 62
     * - TWSTA = 1
     *Re-Enable TWI Module again
     * - TWEN = 1
     *Disable and Clear any other bit in the Register
     */
    TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN);
     474:	e6 e5       	ldi	r30, 0x56	; 86
     476:	f0 e0       	ldi	r31, 0x00	; 0
     478:	84 ea       	ldi	r24, 0xA4	; 164
     47a:	80 83       	st	Z, r24
    
    /* Wait for TWINT flag set in TWCR Register (start bit is send successfully) */
    while( READ_BIT(TWCR,TWINT)==LOW );
     47c:	e6 e5       	ldi	r30, 0x56	; 86
     47e:	f0 e0       	ldi	r31, 0x00	; 0
     480:	80 81       	ld	r24, Z
     482:	88 1f       	adc	r24, r24
     484:	88 27       	eor	r24, r24
     486:	88 1f       	adc	r24, r24
     488:	88 2f       	mov	r24, r24
     48a:	90 e0       	ldi	r25, 0x00	; 0
     48c:	90 70       	andi	r25, 0x00	; 0
     48e:	00 97       	sbiw	r24, 0x00	; 0
     490:	a9 f3       	breq	.-22     	; 0x47c <__TWI_startFrame+0x10>
}
     492:	cf 91       	pop	r28
     494:	df 91       	pop	r29
     496:	08 95       	ret

00000498 <__TWI_stopFrame>:

/*** Description:-
 *  Function Used to send stop bit for a Frame
 */
void  __TWI_stopFrame(void)
{
     498:	df 93       	push	r29
     49a:	cf 93       	push	r28
     49c:	cd b7       	in	r28, 0x3d	; 61
     49e:	de b7       	in	r29, 0x3e	; 62
     * - TWSTO = 1
     *Re-Enable TWI Module again
     * - TWEN = 1
     *Disable and Clear any other bit in the Register
     */
    TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN);
     4a0:	e6 e5       	ldi	r30, 0x56	; 86
     4a2:	f0 e0       	ldi	r31, 0x00	; 0
     4a4:	84 e9       	ldi	r24, 0x94	; 148
     4a6:	80 83       	st	Z, r24
    
    /* No Need to wait after stop frame bit, TWI won't be used */
}
     4a8:	cf 91       	pop	r28
     4aa:	df 91       	pop	r29
     4ac:	08 95       	ret

000004ae <__TWI_transmitByte>:

/*** Description:-
 * Function Used to send a Byte bit in a Frame 
 */
void  __TWI_transmitByte(uint8 data)
{
     4ae:	df 93       	push	r29
     4b0:	cf 93       	push	r28
     4b2:	0f 92       	push	r0
     4b4:	cd b7       	in	r28, 0x3d	; 61
     4b6:	de b7       	in	r29, 0x3e	; 62
     4b8:	89 83       	std	Y+1, r24	; 0x01
    /*Send data in TWDR Register to be ready for transmission*/
    TWDR = data;
     4ba:	e3 e2       	ldi	r30, 0x23	; 35
     4bc:	f0 e0       	ldi	r31, 0x00	; 0
     4be:	89 81       	ldd	r24, Y+1	; 0x01
     4c0:	80 83       	st	Z, r24
     * - TWINT = 1
     *Re-Enable TWI Module again
     * - TWEN = 1
     *Disable and Clear any other bit in the Register
     */
    TWCR = (1 << TWINT) | (1 << TWEN);
     4c2:	e6 e5       	ldi	r30, 0x56	; 86
     4c4:	f0 e0       	ldi	r31, 0x00	; 0
     4c6:	84 e8       	ldi	r24, 0x84	; 132
     4c8:	80 83       	st	Z, r24
    
    /* Wait for TWINT flag set in TWCR Register (start bit is send successfully) */
    while( READ_BIT(TWCR,TWINT)==LOW );    
     4ca:	e6 e5       	ldi	r30, 0x56	; 86
     4cc:	f0 e0       	ldi	r31, 0x00	; 0
     4ce:	80 81       	ld	r24, Z
     4d0:	88 1f       	adc	r24, r24
     4d2:	88 27       	eor	r24, r24
     4d4:	88 1f       	adc	r24, r24
     4d6:	88 2f       	mov	r24, r24
     4d8:	90 e0       	ldi	r25, 0x00	; 0
     4da:	90 70       	andi	r25, 0x00	; 0
     4dc:	00 97       	sbiw	r24, 0x00	; 0
     4de:	a9 f3       	breq	.-22     	; 0x4ca <__TWI_transmitByte+0x1c>
}
     4e0:	0f 90       	pop	r0
     4e2:	cf 91       	pop	r28
     4e4:	df 91       	pop	r29
     4e6:	08 95       	ret

000004e8 <__TWI_receiveByte_ACK>:

/*** Description:-
 * Function Used to receive a Byte bit from a Frame and send ACK
 */
uint8 __TWI_receiveByte_ACK(void)
{
     4e8:	df 93       	push	r29
     4ea:	cf 93       	push	r28
     4ec:	cd b7       	in	r28, 0x3d	; 61
     4ee:	de b7       	in	r29, 0x3e	; 62
     * - TWEA = 1
     *Re-Enable TWI Module again
     * - TWEN = 1
     *Disable and Clear any other bit in the Register
     */
    TWCR = (1 << TWINT) | (1 << TWEA) | (1 << TWEN);
     4f0:	e6 e5       	ldi	r30, 0x56	; 86
     4f2:	f0 e0       	ldi	r31, 0x00	; 0
     4f4:	84 ec       	ldi	r24, 0xC4	; 196
     4f6:	80 83       	st	Z, r24

    /* Wait for TWINT flag set in TWCR Register (start bit is send successfully) */
    while( READ_BIT(TWCR,TWINT)==LOW );
     4f8:	e6 e5       	ldi	r30, 0x56	; 86
     4fa:	f0 e0       	ldi	r31, 0x00	; 0
     4fc:	80 81       	ld	r24, Z
     4fe:	88 1f       	adc	r24, r24
     500:	88 27       	eor	r24, r24
     502:	88 1f       	adc	r24, r24
     504:	88 2f       	mov	r24, r24
     506:	90 e0       	ldi	r25, 0x00	; 0
     508:	90 70       	andi	r25, 0x00	; 0
     50a:	00 97       	sbiw	r24, 0x00	; 0
     50c:	a9 f3       	breq	.-22     	; 0x4f8 <__TWI_receiveByte_ACK+0x10>

    /*fetch the received Data*/
    return TWDR;
     50e:	e3 e2       	ldi	r30, 0x23	; 35
     510:	f0 e0       	ldi	r31, 0x00	; 0
     512:	80 81       	ld	r24, Z
}
     514:	cf 91       	pop	r28
     516:	df 91       	pop	r29
     518:	08 95       	ret

0000051a <__TWI_receiveByte_NACK>:

/*** Description:-
 * Function Used to receive a Byte bit from a Frame and DOESN'T send ACK
 */
uint8 __TWI_receiveByte_NACK(void)
{
     51a:	df 93       	push	r29
     51c:	cf 93       	push	r28
     51e:	cd b7       	in	r28, 0x3d	; 61
     520:	de b7       	in	r29, 0x3e	; 62
     * - TWINT = 1
     *Re-Enable TWI Module again
     * - TWEN = 1
     *Disable and Clear any other bit in the Register
     */
    TWCR = (1 << TWINT) | (1 << TWEN);
     522:	e6 e5       	ldi	r30, 0x56	; 86
     524:	f0 e0       	ldi	r31, 0x00	; 0
     526:	84 e8       	ldi	r24, 0x84	; 132
     528:	80 83       	st	Z, r24

    /* Wait for TWINT flag set in TWCR Register (start bit is send successfully) */
    while( READ_BIT(TWCR,TWINT)==LOW);
     52a:	e6 e5       	ldi	r30, 0x56	; 86
     52c:	f0 e0       	ldi	r31, 0x00	; 0
     52e:	80 81       	ld	r24, Z
     530:	88 1f       	adc	r24, r24
     532:	88 27       	eor	r24, r24
     534:	88 1f       	adc	r24, r24
     536:	88 2f       	mov	r24, r24
     538:	90 e0       	ldi	r25, 0x00	; 0
     53a:	90 70       	andi	r25, 0x00	; 0
     53c:	00 97       	sbiw	r24, 0x00	; 0
     53e:	a9 f3       	breq	.-22     	; 0x52a <__TWI_receiveByte_NACK+0x10>

    /*fetch the received Data*/
    return TWDR;
     540:	e3 e2       	ldi	r30, 0x23	; 35
     542:	f0 e0       	ldi	r31, 0x00	; 0
     544:	80 81       	ld	r24, Z
}
     546:	cf 91       	pop	r28
     548:	df 91       	pop	r29
     54a:	08 95       	ret

0000054c <__TWI_getStatus>:

/*** Description:-
 * Function Used to Read Status of the Action done
 */
uint8 __TWI_getStatus(void)
{
     54c:	df 93       	push	r29
     54e:	cf 93       	push	r28
     550:	0f 92       	push	r0
     552:	cd b7       	in	r28, 0x3d	; 61
     554:	de b7       	in	r29, 0x3e	; 62
    uint8 status;

    /* Masking to eliminate first 3 bits and read the HEXA Values as it is */
    status = TWSR & 0xF8;
     556:	e1 e2       	ldi	r30, 0x21	; 33
     558:	f0 e0       	ldi	r31, 0x00	; 0
     55a:	80 81       	ld	r24, Z
     55c:	88 7f       	andi	r24, 0xF8	; 248
     55e:	89 83       	std	Y+1, r24	; 0x01
    
    return status;
     560:	89 81       	ldd	r24, Y+1	; 0x01
}
     562:	0f 90       	pop	r0
     564:	cf 91       	pop	r28
     566:	df 91       	pop	r29
     568:	08 95       	ret

0000056a <__UART_init>:
 *  - baud_rate: 100 / 200 / 300 / 1200 / 2400 / 4800 / 9600 / 19200 / 38400 / 57600 / 115200
 *  - data_size: 5 / 6 / 7 / 8 / 9
 *  - stop_bit: TWO_STOP_BITS / TWO_STOP_BITS
 *  - parity: EVEN_PARITY / ODD_PARITY */
void __UART_init(const UART_config *p_uart_config)
{
     56a:	0f 93       	push	r16
     56c:	1f 93       	push	r17
     56e:	df 93       	push	r29
     570:	cf 93       	push	r28
     572:	00 d0       	rcall	.+0      	; 0x574 <__UART_init+0xa>
     574:	cd b7       	in	r28, 0x3d	; 61
     576:	de b7       	in	r29, 0x3e	; 62
     578:	9a 83       	std	Y+2, r25	; 0x02
     57a:	89 83       	std	Y+1, r24	; 0x01
    /*Enable Parity Error LED O/P for Error Indication*/
    #if(PARITY_ENABLE)
    SET_BIT(PARITY_ERROR_DDR, PARITY_ERROR_PIN);
    #endif
    /*UART Double Speed Transmission*/
    SET_BIT(UCSRA, U2X);
     57c:	ab e2       	ldi	r26, 0x2B	; 43
     57e:	b0 e0       	ldi	r27, 0x00	; 0
     580:	eb e2       	ldi	r30, 0x2B	; 43
     582:	f0 e0       	ldi	r31, 0x00	; 0
     584:	80 81       	ld	r24, Z
     586:	82 60       	ori	r24, 0x02	; 2
     588:	8c 93       	st	X, r24
    /*if module configured to Use ISR in RX mode, Enable Rx Complete Interrupt Enable bit*/
    #ifdef RX_ISR_BASED
        SET_BIT(UCSRB, RXICE);
    #endif
    /*Enable Module for Transmitting*/
    SET_BIT(UCSRB, TXEN);
     58a:	aa e2       	ldi	r26, 0x2A	; 42
     58c:	b0 e0       	ldi	r27, 0x00	; 0
     58e:	ea e2       	ldi	r30, 0x2A	; 42
     590:	f0 e0       	ldi	r31, 0x00	; 0
     592:	80 81       	ld	r24, Z
     594:	88 60       	ori	r24, 0x08	; 8
     596:	8c 93       	st	X, r24
    /*Enable Module for Receiving*/
    SET_BIT(UCSRB, RXEN);
     598:	aa e2       	ldi	r26, 0x2A	; 42
     59a:	b0 e0       	ldi	r27, 0x00	; 0
     59c:	ea e2       	ldi	r30, 0x2A	; 42
     59e:	f0 e0       	ldi	r31, 0x00	; 0
     5a0:	80 81       	ld	r24, Z
     5a2:	80 61       	ori	r24, 0x10	; 16
     5a4:	8c 93       	st	X, r24
     * USBS: Stop Bit Select: According to Function Configs.
     * UCSZ1:0: Character Size: According to Function Configs.
     * UCPOL: Clock Polarity: According to Static Config
     *****************************************************************/  
    /*Select UCSRC URSEL=1*/
    SET_BIT(UCSRC, URSEL);
     5a6:	a0 e4       	ldi	r26, 0x40	; 64
     5a8:	b0 e0       	ldi	r27, 0x00	; 0
     5aa:	e0 e4       	ldi	r30, 0x40	; 64
     5ac:	f0 e0       	ldi	r31, 0x00	; 0
     5ae:	80 81       	ld	r24, Z
     5b0:	80 68       	ori	r24, 0x80	; 128
     5b2:	8c 93       	st	X, r24
    /*Adjust Data Size in frame*/
    UCSRC = (UCSRC&0b11111001) | ((p_uart_config->data_size&0b00000011)<<1);
     5b4:	a0 e4       	ldi	r26, 0x40	; 64
     5b6:	b0 e0       	ldi	r27, 0x00	; 0
     5b8:	e0 e4       	ldi	r30, 0x40	; 64
     5ba:	f0 e0       	ldi	r31, 0x00	; 0
     5bc:	80 81       	ld	r24, Z
     5be:	28 2f       	mov	r18, r24
     5c0:	29 7f       	andi	r18, 0xF9	; 249
     5c2:	e9 81       	ldd	r30, Y+1	; 0x01
     5c4:	fa 81       	ldd	r31, Y+2	; 0x02
     5c6:	82 81       	ldd	r24, Z+2	; 0x02
     5c8:	88 2f       	mov	r24, r24
     5ca:	90 e0       	ldi	r25, 0x00	; 0
     5cc:	83 70       	andi	r24, 0x03	; 3
     5ce:	90 70       	andi	r25, 0x00	; 0
     5d0:	88 0f       	add	r24, r24
     5d2:	99 1f       	adc	r25, r25
     5d4:	82 2b       	or	r24, r18
     5d6:	8c 93       	st	X, r24
    /*Set UART in ASYNC Mode*/
    CLR_BIT(UCSRC, UMSEL);
     5d8:	a0 e4       	ldi	r26, 0x40	; 64
     5da:	b0 e0       	ldi	r27, 0x00	; 0
     5dc:	e0 e4       	ldi	r30, 0x40	; 64
     5de:	f0 e0       	ldi	r31, 0x00	; 0
     5e0:	80 81       	ld	r24, Z
     5e2:	8f 7b       	andi	r24, 0xBF	; 191
     5e4:	8c 93       	st	X, r24
    /*Set UART parity Mode*/
    UCSRC = (UCSRC&0b11001111) | ((p_uart_config->parity)<<4);
     5e6:	a0 e4       	ldi	r26, 0x40	; 64
     5e8:	b0 e0       	ldi	r27, 0x00	; 0
     5ea:	e0 e4       	ldi	r30, 0x40	; 64
     5ec:	f0 e0       	ldi	r31, 0x00	; 0
     5ee:	80 81       	ld	r24, Z
     5f0:	28 2f       	mov	r18, r24
     5f2:	2f 7c       	andi	r18, 0xCF	; 207
     5f4:	e9 81       	ldd	r30, Y+1	; 0x01
     5f6:	fa 81       	ldd	r31, Y+2	; 0x02
     5f8:	84 81       	ldd	r24, Z+4	; 0x04
     5fa:	88 2f       	mov	r24, r24
     5fc:	90 e0       	ldi	r25, 0x00	; 0
     5fe:	82 95       	swap	r24
     600:	92 95       	swap	r25
     602:	90 7f       	andi	r25, 0xF0	; 240
     604:	98 27       	eor	r25, r24
     606:	80 7f       	andi	r24, 0xF0	; 240
     608:	98 27       	eor	r25, r24
     60a:	82 2b       	or	r24, r18
     60c:	8c 93       	st	X, r24
    /*Set Stop Bit Config*/
    UCSRC = (UCSRC&0b11110111) | ((p_uart_config->stop_bit)<<3);
     60e:	a0 e4       	ldi	r26, 0x40	; 64
     610:	b0 e0       	ldi	r27, 0x00	; 0
     612:	e0 e4       	ldi	r30, 0x40	; 64
     614:	f0 e0       	ldi	r31, 0x00	; 0
     616:	80 81       	ld	r24, Z
     618:	28 2f       	mov	r18, r24
     61a:	27 7f       	andi	r18, 0xF7	; 247
     61c:	e9 81       	ldd	r30, Y+1	; 0x01
     61e:	fa 81       	ldd	r31, Y+2	; 0x02
     620:	83 81       	ldd	r24, Z+3	; 0x03
     622:	88 2f       	mov	r24, r24
     624:	90 e0       	ldi	r25, 0x00	; 0
     626:	88 0f       	add	r24, r24
     628:	99 1f       	adc	r25, r25
     62a:	88 0f       	add	r24, r24
     62c:	99 1f       	adc	r25, r25
     62e:	88 0f       	add	r24, r24
     630:	99 1f       	adc	r25, r25
     632:	82 2b       	or	r24, r18
     634:	8c 93       	st	X, r24

    /****************UBRRH and UBRRL Registers Description**************
     * The URSEL must be zero when writing the UBRRH.
     * UBRR11:0: USART Baud Rate Register, adjust 12 bit with desired baudrate
     *****************************************************************/ 
    CLR_BIT(UBRRH, URSEL);
     636:	a0 e4       	ldi	r26, 0x40	; 64
     638:	b0 e0       	ldi	r27, 0x00	; 0
     63a:	e0 e4       	ldi	r30, 0x40	; 64
     63c:	f0 e0       	ldi	r31, 0x00	; 0
     63e:	80 81       	ld	r24, Z
     640:	8f 77       	andi	r24, 0x7F	; 127
     642:	8c 93       	st	X, r24
    UBRRL = (uint8)(UBRR_VALUE_CALC(p_uart_config->baud_rate));
     644:	09 e2       	ldi	r16, 0x29	; 41
     646:	10 e0       	ldi	r17, 0x00	; 0
     648:	e9 81       	ldd	r30, Y+1	; 0x01
     64a:	fa 81       	ldd	r31, Y+2	; 0x02
     64c:	80 81       	ld	r24, Z
     64e:	91 81       	ldd	r25, Z+1	; 0x01
     650:	cc 01       	movw	r24, r24
     652:	a0 e0       	ldi	r26, 0x00	; 0
     654:	b0 e0       	ldi	r27, 0x00	; 0
     656:	88 0f       	add	r24, r24
     658:	99 1f       	adc	r25, r25
     65a:	aa 1f       	adc	r26, r26
     65c:	bb 1f       	adc	r27, r27
     65e:	88 0f       	add	r24, r24
     660:	99 1f       	adc	r25, r25
     662:	aa 1f       	adc	r26, r26
     664:	bb 1f       	adc	r27, r27
     666:	88 0f       	add	r24, r24
     668:	99 1f       	adc	r25, r25
     66a:	aa 1f       	adc	r26, r26
     66c:	bb 1f       	adc	r27, r27
     66e:	9c 01       	movw	r18, r24
     670:	ad 01       	movw	r20, r26
     672:	80 e4       	ldi	r24, 0x40	; 64
     674:	92 e4       	ldi	r25, 0x42	; 66
     676:	af e0       	ldi	r26, 0x0F	; 15
     678:	b0 e0       	ldi	r27, 0x00	; 0
     67a:	bc 01       	movw	r22, r24
     67c:	cd 01       	movw	r24, r26
     67e:	0e 94 83 0c 	call	0x1906	; 0x1906 <__udivmodsi4>
     682:	da 01       	movw	r26, r20
     684:	c9 01       	movw	r24, r18
     686:	81 50       	subi	r24, 0x01	; 1
     688:	f8 01       	movw	r30, r16
     68a:	80 83       	st	Z, r24
    UBRRH = (UBRR_VALUE_CALC(p_uart_config->baud_rate))>>8;
     68c:	00 e4       	ldi	r16, 0x40	; 64
     68e:	10 e0       	ldi	r17, 0x00	; 0
     690:	e9 81       	ldd	r30, Y+1	; 0x01
     692:	fa 81       	ldd	r31, Y+2	; 0x02
     694:	80 81       	ld	r24, Z
     696:	91 81       	ldd	r25, Z+1	; 0x01
     698:	cc 01       	movw	r24, r24
     69a:	a0 e0       	ldi	r26, 0x00	; 0
     69c:	b0 e0       	ldi	r27, 0x00	; 0
     69e:	88 0f       	add	r24, r24
     6a0:	99 1f       	adc	r25, r25
     6a2:	aa 1f       	adc	r26, r26
     6a4:	bb 1f       	adc	r27, r27
     6a6:	88 0f       	add	r24, r24
     6a8:	99 1f       	adc	r25, r25
     6aa:	aa 1f       	adc	r26, r26
     6ac:	bb 1f       	adc	r27, r27
     6ae:	88 0f       	add	r24, r24
     6b0:	99 1f       	adc	r25, r25
     6b2:	aa 1f       	adc	r26, r26
     6b4:	bb 1f       	adc	r27, r27
     6b6:	9c 01       	movw	r18, r24
     6b8:	ad 01       	movw	r20, r26
     6ba:	80 e4       	ldi	r24, 0x40	; 64
     6bc:	92 e4       	ldi	r25, 0x42	; 66
     6be:	af e0       	ldi	r26, 0x0F	; 15
     6c0:	b0 e0       	ldi	r27, 0x00	; 0
     6c2:	bc 01       	movw	r22, r24
     6c4:	cd 01       	movw	r24, r26
     6c6:	0e 94 83 0c 	call	0x1906	; 0x1906 <__udivmodsi4>
     6ca:	da 01       	movw	r26, r20
     6cc:	c9 01       	movw	r24, r18
     6ce:	01 97       	sbiw	r24, 0x01	; 1
     6d0:	a1 09       	sbc	r26, r1
     6d2:	b1 09       	sbc	r27, r1
     6d4:	89 2f       	mov	r24, r25
     6d6:	9a 2f       	mov	r25, r26
     6d8:	ab 2f       	mov	r26, r27
     6da:	bb 27       	eor	r27, r27
     6dc:	f8 01       	movw	r30, r16
     6de:	80 83       	st	Z, r24
}
     6e0:	0f 90       	pop	r0
     6e2:	0f 90       	pop	r0
     6e4:	cf 91       	pop	r28
     6e6:	df 91       	pop	r29
     6e8:	1f 91       	pop	r17
     6ea:	0f 91       	pop	r16
     6ec:	08 95       	ret

000006ee <__UART_sendByte>:


/*** Description:-
 * Function used to send a byte*/
void __UART_sendByte(const uint8 u8Data)
{
     6ee:	df 93       	push	r29
     6f0:	cf 93       	push	r28
     6f2:	0f 92       	push	r0
     6f4:	cd b7       	in	r28, 0x3d	; 61
     6f6:	de b7       	in	r29, 0x3e	; 62
     6f8:	89 83       	std	Y+1, r24	; 0x01
    /*Delay made to make sure the UDR Register is Empty before Transmitting*/
    while( READ_BIT(UCSRA, UDRE)==LOW );
     6fa:	eb e2       	ldi	r30, 0x2B	; 43
     6fc:	f0 e0       	ldi	r31, 0x00	; 0
     6fe:	80 81       	ld	r24, Z
     700:	88 2f       	mov	r24, r24
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	80 72       	andi	r24, 0x20	; 32
     706:	90 70       	andi	r25, 0x00	; 0
     708:	95 95       	asr	r25
     70a:	87 95       	ror	r24
     70c:	95 95       	asr	r25
     70e:	87 95       	ror	r24
     710:	95 95       	asr	r25
     712:	87 95       	ror	r24
     714:	95 95       	asr	r25
     716:	87 95       	ror	r24
     718:	95 95       	asr	r25
     71a:	87 95       	ror	r24
     71c:	00 97       	sbiw	r24, 0x00	; 0
     71e:	69 f3       	breq	.-38     	; 0x6fa <__UART_sendByte+0xc>
    /*Put desired message in UDR Register to be sent*/
    UDR = u8Data;
     720:	ec e2       	ldi	r30, 0x2C	; 44
     722:	f0 e0       	ldi	r31, 0x00	; 0
     724:	89 81       	ldd	r24, Y+1	; 0x01
     726:	80 83       	st	Z, r24
}
     728:	0f 90       	pop	r0
     72a:	cf 91       	pop	r28
     72c:	df 91       	pop	r29
     72e:	08 95       	ret

00000730 <__UART_sendString>:


/*** Description:-
 * Function used to send a string, pass string array_name by address*/
void __UART_sendString(const uint8 *p_string)
{
     730:	df 93       	push	r29
     732:	cf 93       	push	r28
     734:	00 d0       	rcall	.+0      	; 0x736 <__UART_sendString+0x6>
     736:	cd b7       	in	r28, 0x3d	; 61
     738:	de b7       	in	r29, 0x3e	; 62
     73a:	9a 83       	std	Y+2, r25	; 0x02
     73c:	89 83       	std	Y+1, r24	; 0x01
     73e:	0a c0       	rjmp	.+20     	; 0x754 <__UART_sendString+0x24>
    while( *p_string != '\0' )
    {
        __UART_sendByte(*p_string);
     740:	e9 81       	ldd	r30, Y+1	; 0x01
     742:	fa 81       	ldd	r31, Y+2	; 0x02
     744:	80 81       	ld	r24, Z
     746:	0e 94 77 03 	call	0x6ee	; 0x6ee <__UART_sendByte>
        p_string++;
     74a:	89 81       	ldd	r24, Y+1	; 0x01
     74c:	9a 81       	ldd	r25, Y+2	; 0x02
     74e:	01 96       	adiw	r24, 0x01	; 1
     750:	9a 83       	std	Y+2, r25	; 0x02
     752:	89 83       	std	Y+1, r24	; 0x01

/*** Description:-
 * Function used to send a string, pass string array_name by address*/
void __UART_sendString(const uint8 *p_string)
{
    while( *p_string != '\0' )
     754:	e9 81       	ldd	r30, Y+1	; 0x01
     756:	fa 81       	ldd	r31, Y+2	; 0x02
     758:	80 81       	ld	r24, Z
     75a:	88 23       	and	r24, r24
     75c:	89 f7       	brne	.-30     	; 0x740 <__UART_sendString+0x10>
    {
        __UART_sendByte(*p_string);
        p_string++;
    }
}
     75e:	0f 90       	pop	r0
     760:	0f 90       	pop	r0
     762:	cf 91       	pop	r28
     764:	df 91       	pop	r29
     766:	08 95       	ret

00000768 <__UART_receiveByte>:
#ifdef RX_POLLING_BASED 

    /*** Description:-
     * Function used to receive a byte*/
    uint8 __UART_receiveByte(void)
    {
     768:	df 93       	push	r29
     76a:	cf 93       	push	r28
     76c:	0f 92       	push	r0
     76e:	cd b7       	in	r28, 0x3d	; 61
     770:	de b7       	in	r29, 0x3e	; 62
        /*Delay made to make sure the UDR Register has unread received message*/
        while( READ_BIT(UCSRA, RXC)==LOW );
     772:	eb e2       	ldi	r30, 0x2B	; 43
     774:	f0 e0       	ldi	r31, 0x00	; 0
     776:	80 81       	ld	r24, Z
     778:	88 1f       	adc	r24, r24
     77a:	88 27       	eor	r24, r24
     77c:	88 1f       	adc	r24, r24
     77e:	88 2f       	mov	r24, r24
     780:	90 e0       	ldi	r25, 0x00	; 0
     782:	90 70       	andi	r25, 0x00	; 0
     784:	00 97       	sbiw	r24, 0x00	; 0
     786:	a9 f3       	breq	.-22     	; 0x772 <__UART_receiveByte+0xa>


        if( READ_BIT(UCSRA, PE)==LOW )
     788:	eb e2       	ldi	r30, 0x2B	; 43
     78a:	f0 e0       	ldi	r31, 0x00	; 0
     78c:	80 81       	ld	r24, Z
     78e:	88 2f       	mov	r24, r24
     790:	90 e0       	ldi	r25, 0x00	; 0
     792:	84 70       	andi	r24, 0x04	; 4
     794:	90 70       	andi	r25, 0x00	; 0
     796:	95 95       	asr	r25
     798:	87 95       	ror	r24
     79a:	95 95       	asr	r25
     79c:	87 95       	ror	r24
     79e:	00 97       	sbiw	r24, 0x00	; 0
     7a0:	29 f4       	brne	.+10     	; 0x7ac <__UART_receiveByte+0x44>
        {
            /*fetch the received message*/
            return UDR;
     7a2:	ec e2       	ldi	r30, 0x2C	; 44
     7a4:	f0 e0       	ldi	r31, 0x00	; 0
     7a6:	80 81       	ld	r24, Z
     7a8:	89 83       	std	Y+1, r24	; 0x01
     7aa:	01 c0       	rjmp	.+2      	; 0x7ae <__UART_receiveByte+0x46>
        else
        {
            #if(PARITY_ENABLE)
            SET_BIT(PARITY_ERROR_PORT, PARITY_ERROR_PIN);
            #endif
            return 0; 
     7ac:	19 82       	std	Y+1, r1	; 0x01
     7ae:	89 81       	ldd	r24, Y+1	; 0x01
        }
    }
     7b0:	0f 90       	pop	r0
     7b2:	cf 91       	pop	r28
     7b4:	df 91       	pop	r29
     7b6:	08 95       	ret

000007b8 <__UART_receiveString>:
    /*** Description:-
     * -IMPORTANT_NOTE__Send String Size at beginning before sending string
     * Function used to receive whole string, pass string{Array_name} By address 
     * and function will fill that variable with received values*/
    void __UART_receiveString(uint8 *p_string)
    {
     7b8:	df 93       	push	r29
     7ba:	cf 93       	push	r28
     7bc:	00 d0       	rcall	.+0      	; 0x7be <__UART_receiveString+0x6>
     7be:	00 d0       	rcall	.+0      	; 0x7c0 <__UART_receiveString+0x8>
     7c0:	cd b7       	in	r28, 0x3d	; 61
     7c2:	de b7       	in	r29, 0x3e	; 62
     7c4:	9c 83       	std	Y+4, r25	; 0x04
     7c6:	8b 83       	std	Y+3, r24	; 0x03
        uint8 i=0,string_size;
     7c8:	1a 82       	std	Y+2, r1	; 0x02

        /*Receive First the String Size*/
        string_size = __UART_receiveByte();
     7ca:	0e 94 b4 03 	call	0x768	; 0x768 <__UART_receiveByte>
     7ce:	89 83       	std	Y+1, r24	; 0x01

        /*Fill the passed array by address with received string*/
        for(i=0 ; i<string_size ; i++)
     7d0:	1a 82       	std	Y+2, r1	; 0x02
     7d2:	0d c0       	rjmp	.+26     	; 0x7ee <__UART_receiveString+0x36>
        {
            *p_string = __UART_receiveByte();
     7d4:	0e 94 b4 03 	call	0x768	; 0x768 <__UART_receiveByte>
     7d8:	eb 81       	ldd	r30, Y+3	; 0x03
     7da:	fc 81       	ldd	r31, Y+4	; 0x04
     7dc:	80 83       	st	Z, r24
            p_string++;
     7de:	8b 81       	ldd	r24, Y+3	; 0x03
     7e0:	9c 81       	ldd	r25, Y+4	; 0x04
     7e2:	01 96       	adiw	r24, 0x01	; 1
     7e4:	9c 83       	std	Y+4, r25	; 0x04
     7e6:	8b 83       	std	Y+3, r24	; 0x03

        /*Receive First the String Size*/
        string_size = __UART_receiveByte();

        /*Fill the passed array by address with received string*/
        for(i=0 ; i<string_size ; i++)
     7e8:	8a 81       	ldd	r24, Y+2	; 0x02
     7ea:	8f 5f       	subi	r24, 0xFF	; 255
     7ec:	8a 83       	std	Y+2, r24	; 0x02
     7ee:	9a 81       	ldd	r25, Y+2	; 0x02
     7f0:	89 81       	ldd	r24, Y+1	; 0x01
     7f2:	98 17       	cp	r25, r24
     7f4:	78 f3       	brcs	.-34     	; 0x7d4 <__UART_receiveString+0x1c>
            *p_string = __UART_receiveByte();
            p_string++;
        }

        /*Add NULL Terminator at the end of String*/
        *p_string = '\0';
     7f6:	eb 81       	ldd	r30, Y+3	; 0x03
     7f8:	fc 81       	ldd	r31, Y+4	; 0x04
     7fa:	10 82       	st	Z, r1
    }
     7fc:	0f 90       	pop	r0
     7fe:	0f 90       	pop	r0
     800:	0f 90       	pop	r0
     802:	0f 90       	pop	r0
     804:	cf 91       	pop	r28
     806:	df 91       	pop	r29
     808:	08 95       	ret

0000080a <_ALARM_init>:
#define ALARM_C_

#include "alarm.h"

void _ALARM_init(void)
{
     80a:	df 93       	push	r29
     80c:	cf 93       	push	r28
     80e:	cd b7       	in	r28, 0x3d	; 61
     810:	de b7       	in	r29, 0x3e	; 62
	__DIO_setPinDirection(ALARM_DDR, ALARM_PIN, OUTPUT_PIN);
     812:	80 e0       	ldi	r24, 0x00	; 0
     814:	60 e0       	ldi	r22, 0x00	; 0
     816:	41 e0       	ldi	r20, 0x01	; 1
     818:	0e 94 49 00 	call	0x92	; 0x92 <__DIO_setPinDirection>

	__DIO_writeOutputPinValue(ALARM_PORT, ALARM_PIN, LOW);
     81c:	80 e0       	ldi	r24, 0x00	; 0
     81e:	60 e0       	ldi	r22, 0x00	; 0
     820:	40 e0       	ldi	r20, 0x00	; 0
     822:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <__DIO_writeOutputPinValue>
}
     826:	cf 91       	pop	r28
     828:	df 91       	pop	r29
     82a:	08 95       	ret

0000082c <_ALARM_state>:

void _ALARM_state(uint8 state)
{
     82c:	df 93       	push	r29
     82e:	cf 93       	push	r28
     830:	00 d0       	rcall	.+0      	; 0x832 <_ALARM_state+0x6>
     832:	0f 92       	push	r0
     834:	cd b7       	in	r28, 0x3d	; 61
     836:	de b7       	in	r29, 0x3e	; 62
     838:	89 83       	std	Y+1, r24	; 0x01
	switch(state)
     83a:	89 81       	ldd	r24, Y+1	; 0x01
     83c:	28 2f       	mov	r18, r24
     83e:	30 e0       	ldi	r19, 0x00	; 0
     840:	3b 83       	std	Y+3, r19	; 0x03
     842:	2a 83       	std	Y+2, r18	; 0x02
     844:	8a 81       	ldd	r24, Y+2	; 0x02
     846:	9b 81       	ldd	r25, Y+3	; 0x03
     848:	00 97       	sbiw	r24, 0x00	; 0
     84a:	31 f0       	breq	.+12     	; 0x858 <_ALARM_state+0x2c>
     84c:	2a 81       	ldd	r18, Y+2	; 0x02
     84e:	3b 81       	ldd	r19, Y+3	; 0x03
     850:	21 30       	cpi	r18, 0x01	; 1
     852:	31 05       	cpc	r19, r1
     854:	39 f0       	breq	.+14     	; 0x864 <_ALARM_state+0x38>
     856:	0b c0       	rjmp	.+22     	; 0x86e <_ALARM_state+0x42>
	{
	case OFF:
		__DIO_writeOutputPinValue(ALARM_PORT, ALARM_PIN, LOW);
     858:	80 e0       	ldi	r24, 0x00	; 0
     85a:	60 e0       	ldi	r22, 0x00	; 0
     85c:	40 e0       	ldi	r20, 0x00	; 0
     85e:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <__DIO_writeOutputPinValue>
     862:	05 c0       	rjmp	.+10     	; 0x86e <_ALARM_state+0x42>
		break;


	case ON:
		__DIO_writeOutputPinValue(ALARM_PORT, ALARM_PIN, HIGH);
     864:	80 e0       	ldi	r24, 0x00	; 0
     866:	60 e0       	ldi	r22, 0x00	; 0
     868:	41 e0       	ldi	r20, 0x01	; 1
     86a:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <__DIO_writeOutputPinValue>
    
    default:
		/*Do nothing*/
		break;
	}
}
     86e:	0f 90       	pop	r0
     870:	0f 90       	pop	r0
     872:	0f 90       	pop	r0
     874:	cf 91       	pop	r28
     876:	df 91       	pop	r29
     878:	08 95       	ret

0000087a <main>:



/* APPL Software: MAIN FUNCTION ********************************************************************/
int main(void)
{
     87a:	df 93       	push	r29
     87c:	cf 93       	push	r28
     87e:	00 d0       	rcall	.+0      	; 0x880 <main+0x6>
     880:	00 d0       	rcall	.+0      	; 0x882 <main+0x8>
     882:	cd b7       	in	r28, 0x3d	; 61
     884:	de b7       	in	r29, 0x3e	; 62
    uint8 task_status, control_task;

    /* Hardware Peripherals init Functions */
	DLS_hardwarePeripheralInit();
     886:	0e 94 b8 04 	call	0x970	; 0x970 <DLS_hardwarePeripheralInit>


    while(FOREVER)
    {
    	while( __UART_receiveByte() != HMI__UART_READY );
     88a:	0e 94 b4 03 	call	0x768	; 0x768 <__UART_receiveByte>
     88e:	8f 3f       	cpi	r24, 0xFF	; 255
     890:	e1 f7       	brne	.-8      	; 0x88a <main+0x10>
        __UART_sendByte( CONT_UART_READY );
     892:	8f e7       	ldi	r24, 0x7F	; 127
     894:	0e 94 77 03 	call	0x6ee	; 0x6ee <__UART_sendByte>
        control_task = __UART_receiveByte();
     898:	0e 94 b4 03 	call	0x768	; 0x768 <__UART_receiveByte>
     89c:	89 83       	std	Y+1, r24	; 0x01

        switch(control_task)
     89e:	89 81       	ldd	r24, Y+1	; 0x01
     8a0:	28 2f       	mov	r18, r24
     8a2:	30 e0       	ldi	r19, 0x00	; 0
     8a4:	3c 83       	std	Y+4, r19	; 0x04
     8a6:	2b 83       	std	Y+3, r18	; 0x03
     8a8:	8b 81       	ldd	r24, Y+3	; 0x03
     8aa:	9c 81       	ldd	r25, Y+4	; 0x04
     8ac:	83 30       	cpi	r24, 0x03	; 3
     8ae:	91 05       	cpc	r25, r1
     8b0:	59 f1       	breq	.+86     	; 0x908 <main+0x8e>
     8b2:	2b 81       	ldd	r18, Y+3	; 0x03
     8b4:	3c 81       	ldd	r19, Y+4	; 0x04
     8b6:	24 30       	cpi	r18, 0x04	; 4
     8b8:	31 05       	cpc	r19, r1
     8ba:	34 f4       	brge	.+12     	; 0x8c8 <main+0x4e>
     8bc:	8b 81       	ldd	r24, Y+3	; 0x03
     8be:	9c 81       	ldd	r25, Y+4	; 0x04
     8c0:	81 30       	cpi	r24, 0x01	; 1
     8c2:	91 05       	cpc	r25, r1
     8c4:	61 f0       	breq	.+24     	; 0x8de <main+0x64>
     8c6:	e1 cf       	rjmp	.-62     	; 0x88a <main+0x10>
     8c8:	2b 81       	ldd	r18, Y+3	; 0x03
     8ca:	3c 81       	ldd	r19, Y+4	; 0x04
     8cc:	24 30       	cpi	r18, 0x04	; 4
     8ce:	31 05       	cpc	r19, r1
     8d0:	69 f1       	breq	.+90     	; 0x92c <main+0xb2>
     8d2:	8b 81       	ldd	r24, Y+3	; 0x03
     8d4:	9c 81       	ldd	r25, Y+4	; 0x04
     8d6:	85 30       	cpi	r24, 0x05	; 5
     8d8:	91 05       	cpc	r25, r1
     8da:	c9 f1       	breq	.+114    	; 0x94e <main+0xd4>
     8dc:	d6 cf       	rjmp	.-84     	; 0x88a <main+0x10>
        {
        /*----------------------------------------------------------------*/
        case SETUP_NEW_PASSWORD:
            
            __UART_sendByte( CONT_UART_READY );
     8de:	8f e7       	ldi	r24, 0x7F	; 127
     8e0:	0e 94 77 03 	call	0x6ee	; 0x6ee <__UART_sendByte>
            __UART_receiveString(rx_password);
     8e4:	8c e8       	ldi	r24, 0x8C	; 140
     8e6:	90 e0       	ldi	r25, 0x00	; 0
     8e8:	0e 94 dc 03 	call	0x7b8	; 0x7b8 <__UART_receiveString>
            
            task_status = DLS_setupNewPassword();
     8ec:	0e 94 10 05 	call	0xa20	; 0xa20 <DLS_setupNewPassword>
     8f0:	8a 83       	std	Y+2, r24	; 0x02

            __UART_sendByte( CONT_UART_READY );
     8f2:	8f e7       	ldi	r24, 0x7F	; 127
     8f4:	0e 94 77 03 	call	0x6ee	; 0x6ee <__UART_sendByte>
            while( __UART_receiveByte() != HMI__UART_READY );
     8f8:	0e 94 b4 03 	call	0x768	; 0x768 <__UART_receiveByte>
     8fc:	8f 3f       	cpi	r24, 0xFF	; 255
     8fe:	e1 f7       	brne	.-8      	; 0x8f8 <main+0x7e>
            __UART_sendByte(task_status);
     900:	8a 81       	ldd	r24, Y+2	; 0x02
     902:	0e 94 77 03 	call	0x6ee	; 0x6ee <__UART_sendByte>
     906:	c1 cf       	rjmp	.-126    	; 0x88a <main+0x10>

            break;
        /*----------------------------------------------------------------*/
        case CHECK_LOGIN_CREDENTIALS:

            __UART_sendByte( CONT_UART_READY );
     908:	8f e7       	ldi	r24, 0x7F	; 127
     90a:	0e 94 77 03 	call	0x6ee	; 0x6ee <__UART_sendByte>
            __UART_receiveString(rx_password);
     90e:	8c e8       	ldi	r24, 0x8C	; 140
     910:	90 e0       	ldi	r25, 0x00	; 0
     912:	0e 94 dc 03 	call	0x7b8	; 0x7b8 <__UART_receiveString>

            task_status = DLS_checkLoginCredentials();
     916:	0e 94 31 07 	call	0xe62	; 0xe62 <DLS_checkLoginCredentials>
     91a:	8a 83       	std	Y+2, r24	; 0x02

            while( __UART_receiveByte() != HMI__UART_READY );
     91c:	0e 94 b4 03 	call	0x768	; 0x768 <__UART_receiveByte>
     920:	8f 3f       	cpi	r24, 0xFF	; 255
     922:	e1 f7       	brne	.-8      	; 0x91c <main+0xa2>
            __UART_sendByte(task_status);
     924:	8a 81       	ldd	r24, Y+2	; 0x02
     926:	0e 94 77 03 	call	0x6ee	; 0x6ee <__UART_sendByte>
     92a:	af cf       	rjmp	.-162    	; 0x88a <main+0x10>

            break;
        /*----------------------------------------------------------------*/
        case OPEN_DOOR:

            _MOTORDC_rotate(CW);
     92c:	81 e0       	ldi	r24, 0x01	; 1
     92e:	0e 94 cf 09 	call	0x139e	; 0x139e <_MOTORDC_rotate>
            executeISR = MOTOR_ISR_CODE;
     932:	81 e0       	ldi	r24, 0x01	; 1
     934:	80 93 8b 00 	sts	0x008B, r24
            timer1_configs.compare_value = _4_SECONDS;
     938:	80 e0       	ldi	r24, 0x00	; 0
     93a:	9d e7       	ldi	r25, 0x7D	; 125
     93c:	90 93 63 00 	sts	0x0063, r25
     940:	80 93 62 00 	sts	0x0062, r24
			__TIMER_CTC_startTimer(&timer1_configs);
     944:	80 e6       	ldi	r24, 0x60	; 96
     946:	90 e0       	ldi	r25, 0x00	; 0
     948:	0e 94 53 0b 	call	0x16a6	; 0x16a6 <__TIMER_CTC_startTimer>
     94c:	9e cf       	rjmp	.-196    	; 0x88a <main+0x10>

            break;
        /*----------------------------------------------------------------*/
        case CLOSE_DOOR:

			_MOTORDC_rotate(CCW);
     94e:	82 e0       	ldi	r24, 0x02	; 2
     950:	0e 94 cf 09 	call	0x139e	; 0x139e <_MOTORDC_rotate>
            executeISR = MOTOR_ISR_CODE;
     954:	81 e0       	ldi	r24, 0x01	; 1
     956:	80 93 8b 00 	sts	0x008B, r24
            timer1_configs.compare_value = _4_SECONDS;
     95a:	80 e0       	ldi	r24, 0x00	; 0
     95c:	9d e7       	ldi	r25, 0x7D	; 125
     95e:	90 93 63 00 	sts	0x0063, r25
     962:	80 93 62 00 	sts	0x0062, r24
			__TIMER_CTC_startTimer(&timer1_configs);
     966:	80 e6       	ldi	r24, 0x60	; 96
     968:	90 e0       	ldi	r25, 0x00	; 0
     96a:	0e 94 53 0b 	call	0x16a6	; 0x16a6 <__TIMER_CTC_startTimer>
     96e:	8d cf       	rjmp	.-230    	; 0x88a <main+0x10>

00000970 <DLS_hardwarePeripheralInit>:
/***************************************************************************************************/


/* APPL Software: DLS_hardwarePeripheralInit FUNCTION *********************************************/
void DLS_hardwarePeripheralInit(void)
{
     970:	df 93       	push	r29
     972:	cf 93       	push	r28
     974:	cd b7       	in	r28, 0x3d	; 61
     976:	de b7       	in	r29, 0x3e	; 62
     978:	2a 97       	sbiw	r28, 0x0a	; 10
     97a:	0f b6       	in	r0, 0x3f	; 63
     97c:	f8 94       	cli
     97e:	de bf       	out	0x3e, r29	; 62
     980:	0f be       	out	0x3f, r0	; 63
     982:	cd bf       	out	0x3d, r28	; 61
    /*UART Configuration Parameters*/
	UART_config uart_configs = {9600, _8_BIT_DATA, ONE_STOP_BIT, DISABLE_PARITY};
     984:	ce 01       	movw	r24, r28
     986:	01 96       	adiw	r24, 0x01	; 1
     988:	9f 83       	std	Y+7, r25	; 0x07
     98a:	8e 83       	std	Y+6, r24	; 0x06
     98c:	ed e7       	ldi	r30, 0x7D	; 125
     98e:	f0 e0       	ldi	r31, 0x00	; 0
     990:	f9 87       	std	Y+9, r31	; 0x09
     992:	e8 87       	std	Y+8, r30	; 0x08
     994:	f5 e0       	ldi	r31, 0x05	; 5
     996:	fa 87       	std	Y+10, r31	; 0x0a
     998:	e8 85       	ldd	r30, Y+8	; 0x08
     99a:	f9 85       	ldd	r31, Y+9	; 0x09
     99c:	00 80       	ld	r0, Z
     99e:	88 85       	ldd	r24, Y+8	; 0x08
     9a0:	99 85       	ldd	r25, Y+9	; 0x09
     9a2:	01 96       	adiw	r24, 0x01	; 1
     9a4:	99 87       	std	Y+9, r25	; 0x09
     9a6:	88 87       	std	Y+8, r24	; 0x08
     9a8:	ee 81       	ldd	r30, Y+6	; 0x06
     9aa:	ff 81       	ldd	r31, Y+7	; 0x07
     9ac:	00 82       	st	Z, r0
     9ae:	8e 81       	ldd	r24, Y+6	; 0x06
     9b0:	9f 81       	ldd	r25, Y+7	; 0x07
     9b2:	01 96       	adiw	r24, 0x01	; 1
     9b4:	9f 83       	std	Y+7, r25	; 0x07
     9b6:	8e 83       	std	Y+6, r24	; 0x06
     9b8:	9a 85       	ldd	r25, Y+10	; 0x0a
     9ba:	91 50       	subi	r25, 0x01	; 1
     9bc:	9a 87       	std	Y+10, r25	; 0x0a
     9be:	ea 85       	ldd	r30, Y+10	; 0x0a
     9c0:	ee 23       	and	r30, r30
     9c2:	51 f7       	brne	.-44     	; 0x998 <DLS_hardwarePeripheralInit+0x28>

    /* Initialize the Motor Control Pins */
	_MOTORDC_init();
     9c4:	0e 94 b4 09 	call	0x1368	; 0x1368 <_MOTORDC_init>

    /* Initialize the Alarm Control Pin */
    _ALARM_init();
     9c8:	0e 94 05 04 	call	0x80a	; 0x80a <_ALARM_init>

    /* Initialize TIMER1 ISR CallBack Function */
	__TIMER_CTC_setISRCallBackFuncPointer(TIMER1, DLS_TIMER1_ISR_callBackFunction);
     9cc:	2e e7       	ldi	r18, 0x7E	; 126
     9ce:	39 e0       	ldi	r19, 0x09	; 9
     9d0:	81 e0       	ldi	r24, 0x01	; 1
     9d2:	b9 01       	movw	r22, r18
     9d4:	0e 94 25 0b 	call	0x164a	; 0x164a <__TIMER_CTC_setISRCallBackFuncPointer>

    /* Initialize EEPROM */
	_EXT_EEPROM_init(TWI_ECU_MASTER_ADDR);
     9d8:	81 e0       	ldi	r24, 0x01	; 1
     9da:	0e 94 0f 0a 	call	0x141e	; 0x141e <_EXT_EEPROM_init>

    /* Initialize UART Module */
	__UART_init(&uart_configs);
     9de:	ce 01       	movw	r24, r28
     9e0:	01 96       	adiw	r24, 0x01	; 1
     9e2:	0e 94 b5 02 	call	0x56a	; 0x56a <__UART_init>

	/*TESTING*/__DIO_setPinDirection(DDR_D, SUCCESS_LED, OUTPUT_PIN);/*TESTING*/
     9e6:	83 e0       	ldi	r24, 0x03	; 3
     9e8:	62 e0       	ldi	r22, 0x02	; 2
     9ea:	41 e0       	ldi	r20, 0x01	; 1
     9ec:	0e 94 49 00 	call	0x92	; 0x92 <__DIO_setPinDirection>
	/*TESTING*/__DIO_setPinDirection(DDR_D, FAILED_LED, OUTPUT_PIN);/*TESTING*/
     9f0:	83 e0       	ldi	r24, 0x03	; 3
     9f2:	63 e0       	ldi	r22, 0x03	; 3
     9f4:	41 e0       	ldi	r20, 0x01	; 1
     9f6:	0e 94 49 00 	call	0x92	; 0x92 <__DIO_setPinDirection>
	/*TESTING*/__DIO_writeOutputPinValue(PORT_D, SUCCESS_LED, LOW);/*TESTING*/
     9fa:	83 e0       	ldi	r24, 0x03	; 3
     9fc:	62 e0       	ldi	r22, 0x02	; 2
     9fe:	40 e0       	ldi	r20, 0x00	; 0
     a00:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <__DIO_writeOutputPinValue>
	/*TESTING*/__DIO_writeOutputPinValue(PORT_D, FAILED_LED, LOW);/*TESTING*/
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	63 e0       	ldi	r22, 0x03	; 3
     a08:	40 e0       	ldi	r20, 0x00	; 0
     a0a:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <__DIO_writeOutputPinValue>

}
     a0e:	2a 96       	adiw	r28, 0x0a	; 10
     a10:	0f b6       	in	r0, 0x3f	; 63
     a12:	f8 94       	cli
     a14:	de bf       	out	0x3e, r29	; 62
     a16:	0f be       	out	0x3f, r0	; 63
     a18:	cd bf       	out	0x3d, r28	; 61
     a1a:	cf 91       	pop	r28
     a1c:	df 91       	pop	r29
     a1e:	08 95       	ret

00000a20 <DLS_setupNewPassword>:
/**************************************************************************************************/

/* APPL Software: DLS_setupNewPassword FUNCTION ***************************************************/
uint8 DLS_setupNewPassword(void)
{
     a20:	df 93       	push	r29
     a22:	cf 93       	push	r28
     a24:	00 d0       	rcall	.+0      	; 0xa26 <DLS_setupNewPassword+0x6>
     a26:	cd b7       	in	r28, 0x3d	; 61
     a28:	de b7       	in	r29, 0x3e	; 62
    
    uint8 i;

    /* Check the Entered Passwords are identical */
    for( i=0 ; i<=3 ; i++ )
     a2a:	19 82       	std	Y+1, r1	; 0x01
     a2c:	fe c0       	rjmp	.+508    	; 0xc2a <DLS_setupNewPassword+0x20a>
    {
        /* if not identical, break func; return PASSWORD_NOT_MATCHED */
        if( rx_password[i] != rx_password[4+i] )
     a2e:	89 81       	ldd	r24, Y+1	; 0x01
     a30:	88 2f       	mov	r24, r24
     a32:	90 e0       	ldi	r25, 0x00	; 0
     a34:	fc 01       	movw	r30, r24
     a36:	e4 57       	subi	r30, 0x74	; 116
     a38:	ff 4f       	sbci	r31, 0xFF	; 255
     a3a:	20 81       	ld	r18, Z
     a3c:	89 81       	ldd	r24, Y+1	; 0x01
     a3e:	88 2f       	mov	r24, r24
     a40:	90 e0       	ldi	r25, 0x00	; 0
     a42:	04 96       	adiw	r24, 0x04	; 4
     a44:	fc 01       	movw	r30, r24
     a46:	e4 57       	subi	r30, 0x74	; 116
     a48:	ff 4f       	sbci	r31, 0xFF	; 255
     a4a:	80 81       	ld	r24, Z
     a4c:	28 17       	cp	r18, r24
     a4e:	09 f4       	brne	.+2      	; 0xa52 <DLS_setupNewPassword+0x32>
     a50:	e9 c0       	rjmp	.+466    	; 0xc24 <DLS_setupNewPassword+0x204>
        {
        	/*TESTING*/__DIO_writeOutputPinValue(PORT_D, FAILED_LED, HIGH);/*TESTING*/
     a52:	83 e0       	ldi	r24, 0x03	; 3
     a54:	63 e0       	ldi	r22, 0x03	; 3
     a56:	41 e0       	ldi	r20, 0x01	; 1
     a58:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <__DIO_writeOutputPinValue>
        	APPROX_1SEC_DELAY;APPROX_1SEC_DELAY;APPROX_1SEC_DELAY;APPROX_1SEC_DELAY;APPROX_1SEC_DELAY;
     a5c:	10 92 8a 00 	sts	0x008A, r1
     a60:	10 92 89 00 	sts	0x0089, r1
     a64:	09 c0       	rjmp	.+18     	; 0xa78 <DLS_setupNewPassword+0x58>
     a66:	80 91 89 00 	lds	r24, 0x0089
     a6a:	90 91 8a 00 	lds	r25, 0x008A
     a6e:	01 96       	adiw	r24, 0x01	; 1
     a70:	90 93 8a 00 	sts	0x008A, r25
     a74:	80 93 89 00 	sts	0x0089, r24
     a78:	80 91 89 00 	lds	r24, 0x0089
     a7c:	90 91 8a 00 	lds	r25, 0x008A
     a80:	2d ef       	ldi	r18, 0xFD	; 253
     a82:	88 3e       	cpi	r24, 0xE8	; 232
     a84:	92 07       	cpc	r25, r18
     a86:	78 f3       	brcs	.-34     	; 0xa66 <DLS_setupNewPassword+0x46>
     a88:	10 92 8a 00 	sts	0x008A, r1
     a8c:	10 92 89 00 	sts	0x0089, r1
     a90:	09 c0       	rjmp	.+18     	; 0xaa4 <DLS_setupNewPassword+0x84>
     a92:	80 91 89 00 	lds	r24, 0x0089
     a96:	90 91 8a 00 	lds	r25, 0x008A
     a9a:	01 96       	adiw	r24, 0x01	; 1
     a9c:	90 93 8a 00 	sts	0x008A, r25
     aa0:	80 93 89 00 	sts	0x0089, r24
     aa4:	80 91 89 00 	lds	r24, 0x0089
     aa8:	90 91 8a 00 	lds	r25, 0x008A
     aac:	2d ef       	ldi	r18, 0xFD	; 253
     aae:	88 3e       	cpi	r24, 0xE8	; 232
     ab0:	92 07       	cpc	r25, r18
     ab2:	78 f3       	brcs	.-34     	; 0xa92 <DLS_setupNewPassword+0x72>
     ab4:	10 92 8a 00 	sts	0x008A, r1
     ab8:	10 92 89 00 	sts	0x0089, r1
     abc:	09 c0       	rjmp	.+18     	; 0xad0 <DLS_setupNewPassword+0xb0>
     abe:	80 91 89 00 	lds	r24, 0x0089
     ac2:	90 91 8a 00 	lds	r25, 0x008A
     ac6:	01 96       	adiw	r24, 0x01	; 1
     ac8:	90 93 8a 00 	sts	0x008A, r25
     acc:	80 93 89 00 	sts	0x0089, r24
     ad0:	80 91 89 00 	lds	r24, 0x0089
     ad4:	90 91 8a 00 	lds	r25, 0x008A
     ad8:	2d ef       	ldi	r18, 0xFD	; 253
     ada:	88 3e       	cpi	r24, 0xE8	; 232
     adc:	92 07       	cpc	r25, r18
     ade:	78 f3       	brcs	.-34     	; 0xabe <DLS_setupNewPassword+0x9e>
     ae0:	10 92 8a 00 	sts	0x008A, r1
     ae4:	10 92 89 00 	sts	0x0089, r1
     ae8:	09 c0       	rjmp	.+18     	; 0xafc <DLS_setupNewPassword+0xdc>
     aea:	80 91 89 00 	lds	r24, 0x0089
     aee:	90 91 8a 00 	lds	r25, 0x008A
     af2:	01 96       	adiw	r24, 0x01	; 1
     af4:	90 93 8a 00 	sts	0x008A, r25
     af8:	80 93 89 00 	sts	0x0089, r24
     afc:	80 91 89 00 	lds	r24, 0x0089
     b00:	90 91 8a 00 	lds	r25, 0x008A
     b04:	2d ef       	ldi	r18, 0xFD	; 253
     b06:	88 3e       	cpi	r24, 0xE8	; 232
     b08:	92 07       	cpc	r25, r18
     b0a:	78 f3       	brcs	.-34     	; 0xaea <DLS_setupNewPassword+0xca>
     b0c:	10 92 8a 00 	sts	0x008A, r1
     b10:	10 92 89 00 	sts	0x0089, r1
     b14:	09 c0       	rjmp	.+18     	; 0xb28 <DLS_setupNewPassword+0x108>
     b16:	80 91 89 00 	lds	r24, 0x0089
     b1a:	90 91 8a 00 	lds	r25, 0x008A
     b1e:	01 96       	adiw	r24, 0x01	; 1
     b20:	90 93 8a 00 	sts	0x008A, r25
     b24:	80 93 89 00 	sts	0x0089, r24
     b28:	80 91 89 00 	lds	r24, 0x0089
     b2c:	90 91 8a 00 	lds	r25, 0x008A
     b30:	2d ef       	ldi	r18, 0xFD	; 253
     b32:	88 3e       	cpi	r24, 0xE8	; 232
     b34:	92 07       	cpc	r25, r18
     b36:	78 f3       	brcs	.-34     	; 0xb16 <DLS_setupNewPassword+0xf6>
        	APPROX_1SEC_DELAY;APPROX_1SEC_DELAY;APPROX_1SEC_DELAY;APPROX_1SEC_DELAY;APPROX_1SEC_DELAY;
     b38:	10 92 8a 00 	sts	0x008A, r1
     b3c:	10 92 89 00 	sts	0x0089, r1
     b40:	09 c0       	rjmp	.+18     	; 0xb54 <DLS_setupNewPassword+0x134>
     b42:	80 91 89 00 	lds	r24, 0x0089
     b46:	90 91 8a 00 	lds	r25, 0x008A
     b4a:	01 96       	adiw	r24, 0x01	; 1
     b4c:	90 93 8a 00 	sts	0x008A, r25
     b50:	80 93 89 00 	sts	0x0089, r24
     b54:	80 91 89 00 	lds	r24, 0x0089
     b58:	90 91 8a 00 	lds	r25, 0x008A
     b5c:	2d ef       	ldi	r18, 0xFD	; 253
     b5e:	88 3e       	cpi	r24, 0xE8	; 232
     b60:	92 07       	cpc	r25, r18
     b62:	78 f3       	brcs	.-34     	; 0xb42 <DLS_setupNewPassword+0x122>
     b64:	10 92 8a 00 	sts	0x008A, r1
     b68:	10 92 89 00 	sts	0x0089, r1
     b6c:	09 c0       	rjmp	.+18     	; 0xb80 <DLS_setupNewPassword+0x160>
     b6e:	80 91 89 00 	lds	r24, 0x0089
     b72:	90 91 8a 00 	lds	r25, 0x008A
     b76:	01 96       	adiw	r24, 0x01	; 1
     b78:	90 93 8a 00 	sts	0x008A, r25
     b7c:	80 93 89 00 	sts	0x0089, r24
     b80:	80 91 89 00 	lds	r24, 0x0089
     b84:	90 91 8a 00 	lds	r25, 0x008A
     b88:	2d ef       	ldi	r18, 0xFD	; 253
     b8a:	88 3e       	cpi	r24, 0xE8	; 232
     b8c:	92 07       	cpc	r25, r18
     b8e:	78 f3       	brcs	.-34     	; 0xb6e <DLS_setupNewPassword+0x14e>
     b90:	10 92 8a 00 	sts	0x008A, r1
     b94:	10 92 89 00 	sts	0x0089, r1
     b98:	09 c0       	rjmp	.+18     	; 0xbac <DLS_setupNewPassword+0x18c>
     b9a:	80 91 89 00 	lds	r24, 0x0089
     b9e:	90 91 8a 00 	lds	r25, 0x008A
     ba2:	01 96       	adiw	r24, 0x01	; 1
     ba4:	90 93 8a 00 	sts	0x008A, r25
     ba8:	80 93 89 00 	sts	0x0089, r24
     bac:	80 91 89 00 	lds	r24, 0x0089
     bb0:	90 91 8a 00 	lds	r25, 0x008A
     bb4:	2d ef       	ldi	r18, 0xFD	; 253
     bb6:	88 3e       	cpi	r24, 0xE8	; 232
     bb8:	92 07       	cpc	r25, r18
     bba:	78 f3       	brcs	.-34     	; 0xb9a <DLS_setupNewPassword+0x17a>
     bbc:	10 92 8a 00 	sts	0x008A, r1
     bc0:	10 92 89 00 	sts	0x0089, r1
     bc4:	09 c0       	rjmp	.+18     	; 0xbd8 <DLS_setupNewPassword+0x1b8>
     bc6:	80 91 89 00 	lds	r24, 0x0089
     bca:	90 91 8a 00 	lds	r25, 0x008A
     bce:	01 96       	adiw	r24, 0x01	; 1
     bd0:	90 93 8a 00 	sts	0x008A, r25
     bd4:	80 93 89 00 	sts	0x0089, r24
     bd8:	80 91 89 00 	lds	r24, 0x0089
     bdc:	90 91 8a 00 	lds	r25, 0x008A
     be0:	2d ef       	ldi	r18, 0xFD	; 253
     be2:	88 3e       	cpi	r24, 0xE8	; 232
     be4:	92 07       	cpc	r25, r18
     be6:	78 f3       	brcs	.-34     	; 0xbc6 <DLS_setupNewPassword+0x1a6>
     be8:	10 92 8a 00 	sts	0x008A, r1
     bec:	10 92 89 00 	sts	0x0089, r1
     bf0:	09 c0       	rjmp	.+18     	; 0xc04 <DLS_setupNewPassword+0x1e4>
     bf2:	80 91 89 00 	lds	r24, 0x0089
     bf6:	90 91 8a 00 	lds	r25, 0x008A
     bfa:	01 96       	adiw	r24, 0x01	; 1
     bfc:	90 93 8a 00 	sts	0x008A, r25
     c00:	80 93 89 00 	sts	0x0089, r24
     c04:	80 91 89 00 	lds	r24, 0x0089
     c08:	90 91 8a 00 	lds	r25, 0x008A
     c0c:	2d ef       	ldi	r18, 0xFD	; 253
     c0e:	88 3e       	cpi	r24, 0xE8	; 232
     c10:	92 07       	cpc	r25, r18
     c12:	78 f3       	brcs	.-34     	; 0xbf2 <DLS_setupNewPassword+0x1d2>
            /*TESTING*/__DIO_writeOutputPinValue(PORT_D, FAILED_LED, LOW);/*TESTING*/
     c14:	83 e0       	ldi	r24, 0x03	; 3
     c16:	63 e0       	ldi	r22, 0x03	; 3
     c18:	40 e0       	ldi	r20, 0x00	; 0
     c1a:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <__DIO_writeOutputPinValue>

            return PASSWORD_NOT_MATCHED;
     c1e:	81 e2       	ldi	r24, 0x21	; 33
     c20:	8a 83       	std	Y+2, r24	; 0x02
     c22:	19 c1       	rjmp	.+562    	; 0xe56 <DLS_setupNewPassword+0x436>
{
    
    uint8 i;

    /* Check the Entered Passwords are identical */
    for( i=0 ; i<=3 ; i++ )
     c24:	89 81       	ldd	r24, Y+1	; 0x01
     c26:	8f 5f       	subi	r24, 0xFF	; 255
     c28:	89 83       	std	Y+1, r24	; 0x01
     c2a:	89 81       	ldd	r24, Y+1	; 0x01
     c2c:	84 30       	cpi	r24, 0x04	; 4
     c2e:	08 f4       	brcc	.+2      	; 0xc32 <DLS_setupNewPassword+0x212>
     c30:	fe ce       	rjmp	.-516    	; 0xa2e <DLS_setupNewPassword+0xe>
            return PASSWORD_NOT_MATCHED;
        }
    }
    
    /* Save the password in EEPROM */
    for( i=0 ; i<=3 ; i++ )
     c32:	19 82       	std	Y+1, r1	; 0x01
     c34:	25 c0       	rjmp	.+74     	; 0xc80 <DLS_setupNewPassword+0x260>
    {
        _EXT_EEPROM_writeByte( USR_PASSWD_EEPROM_MEM_LOC , rx_password[i] );
     c36:	89 81       	ldd	r24, Y+1	; 0x01
     c38:	88 2f       	mov	r24, r24
     c3a:	90 e0       	ldi	r25, 0x00	; 0
     c3c:	fc 01       	movw	r30, r24
     c3e:	e4 57       	subi	r30, 0x74	; 116
     c40:	ff 4f       	sbci	r31, 0xFF	; 255
     c42:	20 81       	ld	r18, Z
     c44:	8f e0       	ldi	r24, 0x0F	; 15
     c46:	90 e0       	ldi	r25, 0x00	; 0
     c48:	62 2f       	mov	r22, r18
     c4a:	0e 94 2a 0a 	call	0x1454	; 0x1454 <_EXT_EEPROM_writeByte>
        APPROX_HALF_SEC_DELAY;
     c4e:	10 92 8a 00 	sts	0x008A, r1
     c52:	10 92 89 00 	sts	0x0089, r1
     c56:	09 c0       	rjmp	.+18     	; 0xc6a <DLS_setupNewPassword+0x24a>
     c58:	80 91 89 00 	lds	r24, 0x0089
     c5c:	90 91 8a 00 	lds	r25, 0x008A
     c60:	01 96       	adiw	r24, 0x01	; 1
     c62:	90 93 8a 00 	sts	0x008A, r25
     c66:	80 93 89 00 	sts	0x0089, r24
     c6a:	80 91 89 00 	lds	r24, 0x0089
     c6e:	90 91 8a 00 	lds	r25, 0x008A
     c72:	28 e8       	ldi	r18, 0x88	; 136
     c74:	88 3b       	cpi	r24, 0xB8	; 184
     c76:	92 07       	cpc	r25, r18
     c78:	78 f3       	brcs	.-34     	; 0xc58 <DLS_setupNewPassword+0x238>
            return PASSWORD_NOT_MATCHED;
        }
    }
    
    /* Save the password in EEPROM */
    for( i=0 ; i<=3 ; i++ )
     c7a:	89 81       	ldd	r24, Y+1	; 0x01
     c7c:	8f 5f       	subi	r24, 0xFF	; 255
     c7e:	89 83       	std	Y+1, r24	; 0x01
     c80:	89 81       	ldd	r24, Y+1	; 0x01
     c82:	84 30       	cpi	r24, 0x04	; 4
     c84:	c0 f2       	brcs	.-80     	; 0xc36 <DLS_setupNewPassword+0x216>
    {
        _EXT_EEPROM_writeByte( USR_PASSWD_EEPROM_MEM_LOC , rx_password[i] );
        APPROX_HALF_SEC_DELAY;
    }

    /*TESTING*/__DIO_writeOutputPinValue(PORT_D, SUCCESS_LED, HIGH);/*TESTING*/
     c86:	83 e0       	ldi	r24, 0x03	; 3
     c88:	62 e0       	ldi	r22, 0x02	; 2
     c8a:	41 e0       	ldi	r20, 0x01	; 1
     c8c:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <__DIO_writeOutputPinValue>
    APPROX_1SEC_DELAY;APPROX_1SEC_DELAY;APPROX_1SEC_DELAY;APPROX_1SEC_DELAY;APPROX_1SEC_DELAY;
     c90:	10 92 8a 00 	sts	0x008A, r1
     c94:	10 92 89 00 	sts	0x0089, r1
     c98:	09 c0       	rjmp	.+18     	; 0xcac <DLS_setupNewPassword+0x28c>
     c9a:	80 91 89 00 	lds	r24, 0x0089
     c9e:	90 91 8a 00 	lds	r25, 0x008A
     ca2:	01 96       	adiw	r24, 0x01	; 1
     ca4:	90 93 8a 00 	sts	0x008A, r25
     ca8:	80 93 89 00 	sts	0x0089, r24
     cac:	80 91 89 00 	lds	r24, 0x0089
     cb0:	90 91 8a 00 	lds	r25, 0x008A
     cb4:	2d ef       	ldi	r18, 0xFD	; 253
     cb6:	88 3e       	cpi	r24, 0xE8	; 232
     cb8:	92 07       	cpc	r25, r18
     cba:	78 f3       	brcs	.-34     	; 0xc9a <DLS_setupNewPassword+0x27a>
     cbc:	10 92 8a 00 	sts	0x008A, r1
     cc0:	10 92 89 00 	sts	0x0089, r1
     cc4:	09 c0       	rjmp	.+18     	; 0xcd8 <DLS_setupNewPassword+0x2b8>
     cc6:	80 91 89 00 	lds	r24, 0x0089
     cca:	90 91 8a 00 	lds	r25, 0x008A
     cce:	01 96       	adiw	r24, 0x01	; 1
     cd0:	90 93 8a 00 	sts	0x008A, r25
     cd4:	80 93 89 00 	sts	0x0089, r24
     cd8:	80 91 89 00 	lds	r24, 0x0089
     cdc:	90 91 8a 00 	lds	r25, 0x008A
     ce0:	2d ef       	ldi	r18, 0xFD	; 253
     ce2:	88 3e       	cpi	r24, 0xE8	; 232
     ce4:	92 07       	cpc	r25, r18
     ce6:	78 f3       	brcs	.-34     	; 0xcc6 <DLS_setupNewPassword+0x2a6>
     ce8:	10 92 8a 00 	sts	0x008A, r1
     cec:	10 92 89 00 	sts	0x0089, r1
     cf0:	09 c0       	rjmp	.+18     	; 0xd04 <DLS_setupNewPassword+0x2e4>
     cf2:	80 91 89 00 	lds	r24, 0x0089
     cf6:	90 91 8a 00 	lds	r25, 0x008A
     cfa:	01 96       	adiw	r24, 0x01	; 1
     cfc:	90 93 8a 00 	sts	0x008A, r25
     d00:	80 93 89 00 	sts	0x0089, r24
     d04:	80 91 89 00 	lds	r24, 0x0089
     d08:	90 91 8a 00 	lds	r25, 0x008A
     d0c:	2d ef       	ldi	r18, 0xFD	; 253
     d0e:	88 3e       	cpi	r24, 0xE8	; 232
     d10:	92 07       	cpc	r25, r18
     d12:	78 f3       	brcs	.-34     	; 0xcf2 <DLS_setupNewPassword+0x2d2>
     d14:	10 92 8a 00 	sts	0x008A, r1
     d18:	10 92 89 00 	sts	0x0089, r1
     d1c:	09 c0       	rjmp	.+18     	; 0xd30 <DLS_setupNewPassword+0x310>
     d1e:	80 91 89 00 	lds	r24, 0x0089
     d22:	90 91 8a 00 	lds	r25, 0x008A
     d26:	01 96       	adiw	r24, 0x01	; 1
     d28:	90 93 8a 00 	sts	0x008A, r25
     d2c:	80 93 89 00 	sts	0x0089, r24
     d30:	80 91 89 00 	lds	r24, 0x0089
     d34:	90 91 8a 00 	lds	r25, 0x008A
     d38:	2d ef       	ldi	r18, 0xFD	; 253
     d3a:	88 3e       	cpi	r24, 0xE8	; 232
     d3c:	92 07       	cpc	r25, r18
     d3e:	78 f3       	brcs	.-34     	; 0xd1e <DLS_setupNewPassword+0x2fe>
     d40:	10 92 8a 00 	sts	0x008A, r1
     d44:	10 92 89 00 	sts	0x0089, r1
     d48:	09 c0       	rjmp	.+18     	; 0xd5c <DLS_setupNewPassword+0x33c>
     d4a:	80 91 89 00 	lds	r24, 0x0089
     d4e:	90 91 8a 00 	lds	r25, 0x008A
     d52:	01 96       	adiw	r24, 0x01	; 1
     d54:	90 93 8a 00 	sts	0x008A, r25
     d58:	80 93 89 00 	sts	0x0089, r24
     d5c:	80 91 89 00 	lds	r24, 0x0089
     d60:	90 91 8a 00 	lds	r25, 0x008A
     d64:	2d ef       	ldi	r18, 0xFD	; 253
     d66:	88 3e       	cpi	r24, 0xE8	; 232
     d68:	92 07       	cpc	r25, r18
     d6a:	78 f3       	brcs	.-34     	; 0xd4a <DLS_setupNewPassword+0x32a>
    APPROX_1SEC_DELAY;APPROX_1SEC_DELAY;APPROX_1SEC_DELAY;APPROX_1SEC_DELAY;APPROX_1SEC_DELAY;
     d6c:	10 92 8a 00 	sts	0x008A, r1
     d70:	10 92 89 00 	sts	0x0089, r1
     d74:	09 c0       	rjmp	.+18     	; 0xd88 <DLS_setupNewPassword+0x368>
     d76:	80 91 89 00 	lds	r24, 0x0089
     d7a:	90 91 8a 00 	lds	r25, 0x008A
     d7e:	01 96       	adiw	r24, 0x01	; 1
     d80:	90 93 8a 00 	sts	0x008A, r25
     d84:	80 93 89 00 	sts	0x0089, r24
     d88:	80 91 89 00 	lds	r24, 0x0089
     d8c:	90 91 8a 00 	lds	r25, 0x008A
     d90:	2d ef       	ldi	r18, 0xFD	; 253
     d92:	88 3e       	cpi	r24, 0xE8	; 232
     d94:	92 07       	cpc	r25, r18
     d96:	78 f3       	brcs	.-34     	; 0xd76 <DLS_setupNewPassword+0x356>
     d98:	10 92 8a 00 	sts	0x008A, r1
     d9c:	10 92 89 00 	sts	0x0089, r1
     da0:	09 c0       	rjmp	.+18     	; 0xdb4 <DLS_setupNewPassword+0x394>
     da2:	80 91 89 00 	lds	r24, 0x0089
     da6:	90 91 8a 00 	lds	r25, 0x008A
     daa:	01 96       	adiw	r24, 0x01	; 1
     dac:	90 93 8a 00 	sts	0x008A, r25
     db0:	80 93 89 00 	sts	0x0089, r24
     db4:	80 91 89 00 	lds	r24, 0x0089
     db8:	90 91 8a 00 	lds	r25, 0x008A
     dbc:	2d ef       	ldi	r18, 0xFD	; 253
     dbe:	88 3e       	cpi	r24, 0xE8	; 232
     dc0:	92 07       	cpc	r25, r18
     dc2:	78 f3       	brcs	.-34     	; 0xda2 <DLS_setupNewPassword+0x382>
     dc4:	10 92 8a 00 	sts	0x008A, r1
     dc8:	10 92 89 00 	sts	0x0089, r1
     dcc:	09 c0       	rjmp	.+18     	; 0xde0 <DLS_setupNewPassword+0x3c0>
     dce:	80 91 89 00 	lds	r24, 0x0089
     dd2:	90 91 8a 00 	lds	r25, 0x008A
     dd6:	01 96       	adiw	r24, 0x01	; 1
     dd8:	90 93 8a 00 	sts	0x008A, r25
     ddc:	80 93 89 00 	sts	0x0089, r24
     de0:	80 91 89 00 	lds	r24, 0x0089
     de4:	90 91 8a 00 	lds	r25, 0x008A
     de8:	2d ef       	ldi	r18, 0xFD	; 253
     dea:	88 3e       	cpi	r24, 0xE8	; 232
     dec:	92 07       	cpc	r25, r18
     dee:	78 f3       	brcs	.-34     	; 0xdce <DLS_setupNewPassword+0x3ae>
     df0:	10 92 8a 00 	sts	0x008A, r1
     df4:	10 92 89 00 	sts	0x0089, r1
     df8:	09 c0       	rjmp	.+18     	; 0xe0c <DLS_setupNewPassword+0x3ec>
     dfa:	80 91 89 00 	lds	r24, 0x0089
     dfe:	90 91 8a 00 	lds	r25, 0x008A
     e02:	01 96       	adiw	r24, 0x01	; 1
     e04:	90 93 8a 00 	sts	0x008A, r25
     e08:	80 93 89 00 	sts	0x0089, r24
     e0c:	80 91 89 00 	lds	r24, 0x0089
     e10:	90 91 8a 00 	lds	r25, 0x008A
     e14:	2d ef       	ldi	r18, 0xFD	; 253
     e16:	88 3e       	cpi	r24, 0xE8	; 232
     e18:	92 07       	cpc	r25, r18
     e1a:	78 f3       	brcs	.-34     	; 0xdfa <DLS_setupNewPassword+0x3da>
     e1c:	10 92 8a 00 	sts	0x008A, r1
     e20:	10 92 89 00 	sts	0x0089, r1
     e24:	09 c0       	rjmp	.+18     	; 0xe38 <DLS_setupNewPassword+0x418>
     e26:	80 91 89 00 	lds	r24, 0x0089
     e2a:	90 91 8a 00 	lds	r25, 0x008A
     e2e:	01 96       	adiw	r24, 0x01	; 1
     e30:	90 93 8a 00 	sts	0x008A, r25
     e34:	80 93 89 00 	sts	0x0089, r24
     e38:	80 91 89 00 	lds	r24, 0x0089
     e3c:	90 91 8a 00 	lds	r25, 0x008A
     e40:	2d ef       	ldi	r18, 0xFD	; 253
     e42:	88 3e       	cpi	r24, 0xE8	; 232
     e44:	92 07       	cpc	r25, r18
     e46:	78 f3       	brcs	.-34     	; 0xe26 <DLS_setupNewPassword+0x406>
    /*TESTING*/__DIO_writeOutputPinValue(PORT_D, SUCCESS_LED, LOW);/*TESTING*/
     e48:	83 e0       	ldi	r24, 0x03	; 3
     e4a:	62 e0       	ldi	r22, 0x02	; 2
     e4c:	40 e0       	ldi	r20, 0x00	; 0
     e4e:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <__DIO_writeOutputPinValue>

    return PASSWORD_SAVED;
     e52:	81 e1       	ldi	r24, 0x11	; 17
     e54:	8a 83       	std	Y+2, r24	; 0x02
     e56:	8a 81       	ldd	r24, Y+2	; 0x02

}
     e58:	0f 90       	pop	r0
     e5a:	0f 90       	pop	r0
     e5c:	cf 91       	pop	r28
     e5e:	df 91       	pop	r29
     e60:	08 95       	ret

00000e62 <DLS_checkLoginCredentials>:
/**************************************************************************************************/

/* APPL Software: DLS_checkLoginCredentials FUNCTION **********************************************/
uint8 DLS_checkLoginCredentials(void)
{
     e62:	df 93       	push	r29
     e64:	cf 93       	push	r28
     e66:	cd b7       	in	r28, 0x3d	; 61
     e68:	de b7       	in	r29, 0x3e	; 62
     e6a:	27 97       	sbiw	r28, 0x07	; 7
     e6c:	0f b6       	in	r0, 0x3f	; 63
     e6e:	f8 94       	cli
     e70:	de bf       	out	0x3e, r29	; 62
     e72:	0f be       	out	0x3f, r0	; 63
     e74:	cd bf       	out	0x3d, r28	; 61

    static uint8 wrongTrialsAlarm_counter = 0;
    uint8 i, saved_password[5];

    /* Fetch saved password from EEPROM */
    for( i=0 ; i<=3 ; i++ )
     e76:	19 82       	std	Y+1, r1	; 0x01
     e78:	26 c0       	rjmp	.+76     	; 0xec6 <DLS_checkLoginCredentials+0x64>
    {
        _EXT_EEPROM_readByte( USR_PASSWD_EEPROM_MEM_LOC , saved_password+i );
     e7a:	89 81       	ldd	r24, Y+1	; 0x01
     e7c:	88 2f       	mov	r24, r24
     e7e:	90 e0       	ldi	r25, 0x00	; 0
     e80:	9e 01       	movw	r18, r28
     e82:	2e 5f       	subi	r18, 0xFE	; 254
     e84:	3f 4f       	sbci	r19, 0xFF	; 255
     e86:	28 0f       	add	r18, r24
     e88:	39 1f       	adc	r19, r25
     e8a:	8f e0       	ldi	r24, 0x0F	; 15
     e8c:	90 e0       	ldi	r25, 0x00	; 0
     e8e:	b9 01       	movw	r22, r18
     e90:	0e 94 6b 0a 	call	0x14d6	; 0x14d6 <_EXT_EEPROM_readByte>
        APPROX_HALF_SEC_DELAY;
     e94:	10 92 8a 00 	sts	0x008A, r1
     e98:	10 92 89 00 	sts	0x0089, r1
     e9c:	09 c0       	rjmp	.+18     	; 0xeb0 <DLS_checkLoginCredentials+0x4e>
     e9e:	80 91 89 00 	lds	r24, 0x0089
     ea2:	90 91 8a 00 	lds	r25, 0x008A
     ea6:	01 96       	adiw	r24, 0x01	; 1
     ea8:	90 93 8a 00 	sts	0x008A, r25
     eac:	80 93 89 00 	sts	0x0089, r24
     eb0:	80 91 89 00 	lds	r24, 0x0089
     eb4:	90 91 8a 00 	lds	r25, 0x008A
     eb8:	28 e8       	ldi	r18, 0x88	; 136
     eba:	88 3b       	cpi	r24, 0xB8	; 184
     ebc:	92 07       	cpc	r25, r18
     ebe:	78 f3       	brcs	.-34     	; 0xe9e <DLS_checkLoginCredentials+0x3c>

    static uint8 wrongTrialsAlarm_counter = 0;
    uint8 i, saved_password[5];

    /* Fetch saved password from EEPROM */
    for( i=0 ; i<=3 ; i++ )
     ec0:	89 81       	ldd	r24, Y+1	; 0x01
     ec2:	8f 5f       	subi	r24, 0xFF	; 255
     ec4:	89 83       	std	Y+1, r24	; 0x01
     ec6:	89 81       	ldd	r24, Y+1	; 0x01
     ec8:	84 30       	cpi	r24, 0x04	; 4
     eca:	b8 f2       	brcs	.-82     	; 0xe7a <DLS_checkLoginCredentials+0x18>
        _EXT_EEPROM_readByte( USR_PASSWD_EEPROM_MEM_LOC , saved_password+i );
        APPROX_HALF_SEC_DELAY;
    }

    /* Check entered credentials correctness */
    for( i=0 ; i<=3 ; i++ )
     ecc:	19 82       	std	Y+1, r1	; 0x01
     ece:	1e c1       	rjmp	.+572    	; 0x110c <DLS_checkLoginCredentials+0x2aa>
    {
        /* if not identical, break func; return PASSWORD_NOT_MATCHED */
    	if( rx_password[i] != saved_password[i] )
     ed0:	89 81       	ldd	r24, Y+1	; 0x01
     ed2:	88 2f       	mov	r24, r24
     ed4:	90 e0       	ldi	r25, 0x00	; 0
     ed6:	fc 01       	movw	r30, r24
     ed8:	e4 57       	subi	r30, 0x74	; 116
     eda:	ff 4f       	sbci	r31, 0xFF	; 255
     edc:	40 81       	ld	r20, Z
     ede:	89 81       	ldd	r24, Y+1	; 0x01
     ee0:	28 2f       	mov	r18, r24
     ee2:	30 e0       	ldi	r19, 0x00	; 0
     ee4:	ce 01       	movw	r24, r28
     ee6:	02 96       	adiw	r24, 0x02	; 2
     ee8:	fc 01       	movw	r30, r24
     eea:	e2 0f       	add	r30, r18
     eec:	f3 1f       	adc	r31, r19
     eee:	80 81       	ld	r24, Z
     ef0:	48 17       	cp	r20, r24
     ef2:	09 f4       	brne	.+2      	; 0xef6 <DLS_checkLoginCredentials+0x94>
     ef4:	08 c1       	rjmp	.+528    	; 0x1106 <DLS_checkLoginCredentials+0x2a4>
    	{
    		/*TESTING*/__DIO_writeOutputPinValue(PORT_D, FAILED_LED, HIGH);/*TESTING*/
     ef6:	83 e0       	ldi	r24, 0x03	; 3
     ef8:	63 e0       	ldi	r22, 0x03	; 3
     efa:	41 e0       	ldi	r20, 0x01	; 1
     efc:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <__DIO_writeOutputPinValue>
    		APPROX_1SEC_DELAY;APPROX_1SEC_DELAY;APPROX_1SEC_DELAY;APPROX_1SEC_DELAY;APPROX_1SEC_DELAY;
     f00:	10 92 8a 00 	sts	0x008A, r1
     f04:	10 92 89 00 	sts	0x0089, r1
     f08:	09 c0       	rjmp	.+18     	; 0xf1c <DLS_checkLoginCredentials+0xba>
     f0a:	80 91 89 00 	lds	r24, 0x0089
     f0e:	90 91 8a 00 	lds	r25, 0x008A
     f12:	01 96       	adiw	r24, 0x01	; 1
     f14:	90 93 8a 00 	sts	0x008A, r25
     f18:	80 93 89 00 	sts	0x0089, r24
     f1c:	80 91 89 00 	lds	r24, 0x0089
     f20:	90 91 8a 00 	lds	r25, 0x008A
     f24:	2d ef       	ldi	r18, 0xFD	; 253
     f26:	88 3e       	cpi	r24, 0xE8	; 232
     f28:	92 07       	cpc	r25, r18
     f2a:	78 f3       	brcs	.-34     	; 0xf0a <DLS_checkLoginCredentials+0xa8>
     f2c:	10 92 8a 00 	sts	0x008A, r1
     f30:	10 92 89 00 	sts	0x0089, r1
     f34:	09 c0       	rjmp	.+18     	; 0xf48 <DLS_checkLoginCredentials+0xe6>
     f36:	80 91 89 00 	lds	r24, 0x0089
     f3a:	90 91 8a 00 	lds	r25, 0x008A
     f3e:	01 96       	adiw	r24, 0x01	; 1
     f40:	90 93 8a 00 	sts	0x008A, r25
     f44:	80 93 89 00 	sts	0x0089, r24
     f48:	80 91 89 00 	lds	r24, 0x0089
     f4c:	90 91 8a 00 	lds	r25, 0x008A
     f50:	2d ef       	ldi	r18, 0xFD	; 253
     f52:	88 3e       	cpi	r24, 0xE8	; 232
     f54:	92 07       	cpc	r25, r18
     f56:	78 f3       	brcs	.-34     	; 0xf36 <DLS_checkLoginCredentials+0xd4>
     f58:	10 92 8a 00 	sts	0x008A, r1
     f5c:	10 92 89 00 	sts	0x0089, r1
     f60:	09 c0       	rjmp	.+18     	; 0xf74 <DLS_checkLoginCredentials+0x112>
     f62:	80 91 89 00 	lds	r24, 0x0089
     f66:	90 91 8a 00 	lds	r25, 0x008A
     f6a:	01 96       	adiw	r24, 0x01	; 1
     f6c:	90 93 8a 00 	sts	0x008A, r25
     f70:	80 93 89 00 	sts	0x0089, r24
     f74:	80 91 89 00 	lds	r24, 0x0089
     f78:	90 91 8a 00 	lds	r25, 0x008A
     f7c:	2d ef       	ldi	r18, 0xFD	; 253
     f7e:	88 3e       	cpi	r24, 0xE8	; 232
     f80:	92 07       	cpc	r25, r18
     f82:	78 f3       	brcs	.-34     	; 0xf62 <DLS_checkLoginCredentials+0x100>
     f84:	10 92 8a 00 	sts	0x008A, r1
     f88:	10 92 89 00 	sts	0x0089, r1
     f8c:	09 c0       	rjmp	.+18     	; 0xfa0 <DLS_checkLoginCredentials+0x13e>
     f8e:	80 91 89 00 	lds	r24, 0x0089
     f92:	90 91 8a 00 	lds	r25, 0x008A
     f96:	01 96       	adiw	r24, 0x01	; 1
     f98:	90 93 8a 00 	sts	0x008A, r25
     f9c:	80 93 89 00 	sts	0x0089, r24
     fa0:	80 91 89 00 	lds	r24, 0x0089
     fa4:	90 91 8a 00 	lds	r25, 0x008A
     fa8:	2d ef       	ldi	r18, 0xFD	; 253
     faa:	88 3e       	cpi	r24, 0xE8	; 232
     fac:	92 07       	cpc	r25, r18
     fae:	78 f3       	brcs	.-34     	; 0xf8e <DLS_checkLoginCredentials+0x12c>
     fb0:	10 92 8a 00 	sts	0x008A, r1
     fb4:	10 92 89 00 	sts	0x0089, r1
     fb8:	09 c0       	rjmp	.+18     	; 0xfcc <DLS_checkLoginCredentials+0x16a>
     fba:	80 91 89 00 	lds	r24, 0x0089
     fbe:	90 91 8a 00 	lds	r25, 0x008A
     fc2:	01 96       	adiw	r24, 0x01	; 1
     fc4:	90 93 8a 00 	sts	0x008A, r25
     fc8:	80 93 89 00 	sts	0x0089, r24
     fcc:	80 91 89 00 	lds	r24, 0x0089
     fd0:	90 91 8a 00 	lds	r25, 0x008A
     fd4:	2d ef       	ldi	r18, 0xFD	; 253
     fd6:	88 3e       	cpi	r24, 0xE8	; 232
     fd8:	92 07       	cpc	r25, r18
     fda:	78 f3       	brcs	.-34     	; 0xfba <DLS_checkLoginCredentials+0x158>
    		APPROX_1SEC_DELAY;APPROX_1SEC_DELAY;APPROX_1SEC_DELAY;APPROX_1SEC_DELAY;APPROX_1SEC_DELAY;
     fdc:	10 92 8a 00 	sts	0x008A, r1
     fe0:	10 92 89 00 	sts	0x0089, r1
     fe4:	09 c0       	rjmp	.+18     	; 0xff8 <DLS_checkLoginCredentials+0x196>
     fe6:	80 91 89 00 	lds	r24, 0x0089
     fea:	90 91 8a 00 	lds	r25, 0x008A
     fee:	01 96       	adiw	r24, 0x01	; 1
     ff0:	90 93 8a 00 	sts	0x008A, r25
     ff4:	80 93 89 00 	sts	0x0089, r24
     ff8:	80 91 89 00 	lds	r24, 0x0089
     ffc:	90 91 8a 00 	lds	r25, 0x008A
    1000:	2d ef       	ldi	r18, 0xFD	; 253
    1002:	88 3e       	cpi	r24, 0xE8	; 232
    1004:	92 07       	cpc	r25, r18
    1006:	78 f3       	brcs	.-34     	; 0xfe6 <DLS_checkLoginCredentials+0x184>
    1008:	10 92 8a 00 	sts	0x008A, r1
    100c:	10 92 89 00 	sts	0x0089, r1
    1010:	09 c0       	rjmp	.+18     	; 0x1024 <DLS_checkLoginCredentials+0x1c2>
    1012:	80 91 89 00 	lds	r24, 0x0089
    1016:	90 91 8a 00 	lds	r25, 0x008A
    101a:	01 96       	adiw	r24, 0x01	; 1
    101c:	90 93 8a 00 	sts	0x008A, r25
    1020:	80 93 89 00 	sts	0x0089, r24
    1024:	80 91 89 00 	lds	r24, 0x0089
    1028:	90 91 8a 00 	lds	r25, 0x008A
    102c:	2d ef       	ldi	r18, 0xFD	; 253
    102e:	88 3e       	cpi	r24, 0xE8	; 232
    1030:	92 07       	cpc	r25, r18
    1032:	78 f3       	brcs	.-34     	; 0x1012 <DLS_checkLoginCredentials+0x1b0>
    1034:	10 92 8a 00 	sts	0x008A, r1
    1038:	10 92 89 00 	sts	0x0089, r1
    103c:	09 c0       	rjmp	.+18     	; 0x1050 <DLS_checkLoginCredentials+0x1ee>
    103e:	80 91 89 00 	lds	r24, 0x0089
    1042:	90 91 8a 00 	lds	r25, 0x008A
    1046:	01 96       	adiw	r24, 0x01	; 1
    1048:	90 93 8a 00 	sts	0x008A, r25
    104c:	80 93 89 00 	sts	0x0089, r24
    1050:	80 91 89 00 	lds	r24, 0x0089
    1054:	90 91 8a 00 	lds	r25, 0x008A
    1058:	2d ef       	ldi	r18, 0xFD	; 253
    105a:	88 3e       	cpi	r24, 0xE8	; 232
    105c:	92 07       	cpc	r25, r18
    105e:	78 f3       	brcs	.-34     	; 0x103e <DLS_checkLoginCredentials+0x1dc>
    1060:	10 92 8a 00 	sts	0x008A, r1
    1064:	10 92 89 00 	sts	0x0089, r1
    1068:	09 c0       	rjmp	.+18     	; 0x107c <DLS_checkLoginCredentials+0x21a>
    106a:	80 91 89 00 	lds	r24, 0x0089
    106e:	90 91 8a 00 	lds	r25, 0x008A
    1072:	01 96       	adiw	r24, 0x01	; 1
    1074:	90 93 8a 00 	sts	0x008A, r25
    1078:	80 93 89 00 	sts	0x0089, r24
    107c:	80 91 89 00 	lds	r24, 0x0089
    1080:	90 91 8a 00 	lds	r25, 0x008A
    1084:	2d ef       	ldi	r18, 0xFD	; 253
    1086:	88 3e       	cpi	r24, 0xE8	; 232
    1088:	92 07       	cpc	r25, r18
    108a:	78 f3       	brcs	.-34     	; 0x106a <DLS_checkLoginCredentials+0x208>
    108c:	10 92 8a 00 	sts	0x008A, r1
    1090:	10 92 89 00 	sts	0x0089, r1
    1094:	09 c0       	rjmp	.+18     	; 0x10a8 <DLS_checkLoginCredentials+0x246>
    1096:	80 91 89 00 	lds	r24, 0x0089
    109a:	90 91 8a 00 	lds	r25, 0x008A
    109e:	01 96       	adiw	r24, 0x01	; 1
    10a0:	90 93 8a 00 	sts	0x008A, r25
    10a4:	80 93 89 00 	sts	0x0089, r24
    10a8:	80 91 89 00 	lds	r24, 0x0089
    10ac:	90 91 8a 00 	lds	r25, 0x008A
    10b0:	2d ef       	ldi	r18, 0xFD	; 253
    10b2:	88 3e       	cpi	r24, 0xE8	; 232
    10b4:	92 07       	cpc	r25, r18
    10b6:	78 f3       	brcs	.-34     	; 0x1096 <DLS_checkLoginCredentials+0x234>
    		/*TESTING*/__DIO_writeOutputPinValue(PORT_D, FAILED_LED, LOW);/*TESTING*/
    10b8:	83 e0       	ldi	r24, 0x03	; 3
    10ba:	63 e0       	ldi	r22, 0x03	; 3
    10bc:	40 e0       	ldi	r20, 0x00	; 0
    10be:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <__DIO_writeOutputPinValue>

            wrongTrialsAlarm_counter++;
    10c2:	80 91 83 00 	lds	r24, 0x0083
    10c6:	8f 5f       	subi	r24, 0xFF	; 255
    10c8:	80 93 83 00 	sts	0x0083, r24
            if( wrongTrialsAlarm_counter == 2 ) // If 2 failed trials were entered Alarm will operate
    10cc:	80 91 83 00 	lds	r24, 0x0083
    10d0:	82 30       	cpi	r24, 0x02	; 2
    10d2:	b1 f4       	brne	.+44     	; 0x1100 <DLS_checkLoginCredentials+0x29e>
            {
                executeISR = ALARM_ISR_CODE;
    10d4:	82 e0       	ldi	r24, 0x02	; 2
    10d6:	80 93 8b 00 	sts	0x008B, r24
                timer1_configs.compare_value = _QUAR_SECOND;
    10da:	80 ed       	ldi	r24, 0xD0	; 208
    10dc:	97 e0       	ldi	r25, 0x07	; 7
    10de:	90 93 63 00 	sts	0x0063, r25
    10e2:	80 93 62 00 	sts	0x0062, r24
                __TIMER_CTC_startTimer(&timer1_configs);
    10e6:	80 e6       	ldi	r24, 0x60	; 96
    10e8:	90 e0       	ldi	r25, 0x00	; 0
    10ea:	0e 94 53 0b 	call	0x16a6	; 0x16a6 <__TIMER_CTC_startTimer>
                
                code_blocking_flag = TRUE;
    10ee:	81 e0       	ldi	r24, 0x01	; 1
    10f0:	80 93 82 00 	sts	0x0082, r24
                while(code_blocking_flag);
    10f4:	80 91 82 00 	lds	r24, 0x0082
    10f8:	88 23       	and	r24, r24
    10fa:	e1 f7       	brne	.-8      	; 0x10f4 <DLS_checkLoginCredentials+0x292>

                wrongTrialsAlarm_counter = 0;
    10fc:	10 92 83 00 	sts	0x0083, r1
            }

    		return PASSWORD_NOT_MATCHED;
    1100:	81 e2       	ldi	r24, 0x21	; 33
    1102:	8f 83       	std	Y+7, r24	; 0x07
    1104:	f1 c0       	rjmp	.+482    	; 0x12e8 <DLS_checkLoginCredentials+0x486>
        _EXT_EEPROM_readByte( USR_PASSWD_EEPROM_MEM_LOC , saved_password+i );
        APPROX_HALF_SEC_DELAY;
    }

    /* Check entered credentials correctness */
    for( i=0 ; i<=3 ; i++ )
    1106:	89 81       	ldd	r24, Y+1	; 0x01
    1108:	8f 5f       	subi	r24, 0xFF	; 255
    110a:	89 83       	std	Y+1, r24	; 0x01
    110c:	89 81       	ldd	r24, Y+1	; 0x01
    110e:	84 30       	cpi	r24, 0x04	; 4
    1110:	08 f4       	brcc	.+2      	; 0x1114 <DLS_checkLoginCredentials+0x2b2>
    1112:	de ce       	rjmp	.-580    	; 0xed0 <DLS_checkLoginCredentials+0x6e>

    		return PASSWORD_NOT_MATCHED;
    	}
    }

    /*TESTING*/__DIO_writeOutputPinValue(PORT_D, SUCCESS_LED, HIGH);/*TESTING*/
    1114:	83 e0       	ldi	r24, 0x03	; 3
    1116:	62 e0       	ldi	r22, 0x02	; 2
    1118:	41 e0       	ldi	r20, 0x01	; 1
    111a:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <__DIO_writeOutputPinValue>
    APPROX_1SEC_DELAY;APPROX_1SEC_DELAY;APPROX_1SEC_DELAY;APPROX_1SEC_DELAY;APPROX_1SEC_DELAY;
    111e:	10 92 8a 00 	sts	0x008A, r1
    1122:	10 92 89 00 	sts	0x0089, r1
    1126:	09 c0       	rjmp	.+18     	; 0x113a <DLS_checkLoginCredentials+0x2d8>
    1128:	80 91 89 00 	lds	r24, 0x0089
    112c:	90 91 8a 00 	lds	r25, 0x008A
    1130:	01 96       	adiw	r24, 0x01	; 1
    1132:	90 93 8a 00 	sts	0x008A, r25
    1136:	80 93 89 00 	sts	0x0089, r24
    113a:	80 91 89 00 	lds	r24, 0x0089
    113e:	90 91 8a 00 	lds	r25, 0x008A
    1142:	2d ef       	ldi	r18, 0xFD	; 253
    1144:	88 3e       	cpi	r24, 0xE8	; 232
    1146:	92 07       	cpc	r25, r18
    1148:	78 f3       	brcs	.-34     	; 0x1128 <DLS_checkLoginCredentials+0x2c6>
    114a:	10 92 8a 00 	sts	0x008A, r1
    114e:	10 92 89 00 	sts	0x0089, r1
    1152:	09 c0       	rjmp	.+18     	; 0x1166 <DLS_checkLoginCredentials+0x304>
    1154:	80 91 89 00 	lds	r24, 0x0089
    1158:	90 91 8a 00 	lds	r25, 0x008A
    115c:	01 96       	adiw	r24, 0x01	; 1
    115e:	90 93 8a 00 	sts	0x008A, r25
    1162:	80 93 89 00 	sts	0x0089, r24
    1166:	80 91 89 00 	lds	r24, 0x0089
    116a:	90 91 8a 00 	lds	r25, 0x008A
    116e:	2d ef       	ldi	r18, 0xFD	; 253
    1170:	88 3e       	cpi	r24, 0xE8	; 232
    1172:	92 07       	cpc	r25, r18
    1174:	78 f3       	brcs	.-34     	; 0x1154 <DLS_checkLoginCredentials+0x2f2>
    1176:	10 92 8a 00 	sts	0x008A, r1
    117a:	10 92 89 00 	sts	0x0089, r1
    117e:	09 c0       	rjmp	.+18     	; 0x1192 <DLS_checkLoginCredentials+0x330>
    1180:	80 91 89 00 	lds	r24, 0x0089
    1184:	90 91 8a 00 	lds	r25, 0x008A
    1188:	01 96       	adiw	r24, 0x01	; 1
    118a:	90 93 8a 00 	sts	0x008A, r25
    118e:	80 93 89 00 	sts	0x0089, r24
    1192:	80 91 89 00 	lds	r24, 0x0089
    1196:	90 91 8a 00 	lds	r25, 0x008A
    119a:	2d ef       	ldi	r18, 0xFD	; 253
    119c:	88 3e       	cpi	r24, 0xE8	; 232
    119e:	92 07       	cpc	r25, r18
    11a0:	78 f3       	brcs	.-34     	; 0x1180 <DLS_checkLoginCredentials+0x31e>
    11a2:	10 92 8a 00 	sts	0x008A, r1
    11a6:	10 92 89 00 	sts	0x0089, r1
    11aa:	09 c0       	rjmp	.+18     	; 0x11be <DLS_checkLoginCredentials+0x35c>
    11ac:	80 91 89 00 	lds	r24, 0x0089
    11b0:	90 91 8a 00 	lds	r25, 0x008A
    11b4:	01 96       	adiw	r24, 0x01	; 1
    11b6:	90 93 8a 00 	sts	0x008A, r25
    11ba:	80 93 89 00 	sts	0x0089, r24
    11be:	80 91 89 00 	lds	r24, 0x0089
    11c2:	90 91 8a 00 	lds	r25, 0x008A
    11c6:	2d ef       	ldi	r18, 0xFD	; 253
    11c8:	88 3e       	cpi	r24, 0xE8	; 232
    11ca:	92 07       	cpc	r25, r18
    11cc:	78 f3       	brcs	.-34     	; 0x11ac <DLS_checkLoginCredentials+0x34a>
    11ce:	10 92 8a 00 	sts	0x008A, r1
    11d2:	10 92 89 00 	sts	0x0089, r1
    11d6:	09 c0       	rjmp	.+18     	; 0x11ea <DLS_checkLoginCredentials+0x388>
    11d8:	80 91 89 00 	lds	r24, 0x0089
    11dc:	90 91 8a 00 	lds	r25, 0x008A
    11e0:	01 96       	adiw	r24, 0x01	; 1
    11e2:	90 93 8a 00 	sts	0x008A, r25
    11e6:	80 93 89 00 	sts	0x0089, r24
    11ea:	80 91 89 00 	lds	r24, 0x0089
    11ee:	90 91 8a 00 	lds	r25, 0x008A
    11f2:	2d ef       	ldi	r18, 0xFD	; 253
    11f4:	88 3e       	cpi	r24, 0xE8	; 232
    11f6:	92 07       	cpc	r25, r18
    11f8:	78 f3       	brcs	.-34     	; 0x11d8 <DLS_checkLoginCredentials+0x376>
    APPROX_1SEC_DELAY;APPROX_1SEC_DELAY;APPROX_1SEC_DELAY;APPROX_1SEC_DELAY;APPROX_1SEC_DELAY;
    11fa:	10 92 8a 00 	sts	0x008A, r1
    11fe:	10 92 89 00 	sts	0x0089, r1
    1202:	09 c0       	rjmp	.+18     	; 0x1216 <DLS_checkLoginCredentials+0x3b4>
    1204:	80 91 89 00 	lds	r24, 0x0089
    1208:	90 91 8a 00 	lds	r25, 0x008A
    120c:	01 96       	adiw	r24, 0x01	; 1
    120e:	90 93 8a 00 	sts	0x008A, r25
    1212:	80 93 89 00 	sts	0x0089, r24
    1216:	80 91 89 00 	lds	r24, 0x0089
    121a:	90 91 8a 00 	lds	r25, 0x008A
    121e:	2d ef       	ldi	r18, 0xFD	; 253
    1220:	88 3e       	cpi	r24, 0xE8	; 232
    1222:	92 07       	cpc	r25, r18
    1224:	78 f3       	brcs	.-34     	; 0x1204 <DLS_checkLoginCredentials+0x3a2>
    1226:	10 92 8a 00 	sts	0x008A, r1
    122a:	10 92 89 00 	sts	0x0089, r1
    122e:	09 c0       	rjmp	.+18     	; 0x1242 <DLS_checkLoginCredentials+0x3e0>
    1230:	80 91 89 00 	lds	r24, 0x0089
    1234:	90 91 8a 00 	lds	r25, 0x008A
    1238:	01 96       	adiw	r24, 0x01	; 1
    123a:	90 93 8a 00 	sts	0x008A, r25
    123e:	80 93 89 00 	sts	0x0089, r24
    1242:	80 91 89 00 	lds	r24, 0x0089
    1246:	90 91 8a 00 	lds	r25, 0x008A
    124a:	2d ef       	ldi	r18, 0xFD	; 253
    124c:	88 3e       	cpi	r24, 0xE8	; 232
    124e:	92 07       	cpc	r25, r18
    1250:	78 f3       	brcs	.-34     	; 0x1230 <DLS_checkLoginCredentials+0x3ce>
    1252:	10 92 8a 00 	sts	0x008A, r1
    1256:	10 92 89 00 	sts	0x0089, r1
    125a:	09 c0       	rjmp	.+18     	; 0x126e <DLS_checkLoginCredentials+0x40c>
    125c:	80 91 89 00 	lds	r24, 0x0089
    1260:	90 91 8a 00 	lds	r25, 0x008A
    1264:	01 96       	adiw	r24, 0x01	; 1
    1266:	90 93 8a 00 	sts	0x008A, r25
    126a:	80 93 89 00 	sts	0x0089, r24
    126e:	80 91 89 00 	lds	r24, 0x0089
    1272:	90 91 8a 00 	lds	r25, 0x008A
    1276:	2d ef       	ldi	r18, 0xFD	; 253
    1278:	88 3e       	cpi	r24, 0xE8	; 232
    127a:	92 07       	cpc	r25, r18
    127c:	78 f3       	brcs	.-34     	; 0x125c <DLS_checkLoginCredentials+0x3fa>
    127e:	10 92 8a 00 	sts	0x008A, r1
    1282:	10 92 89 00 	sts	0x0089, r1
    1286:	09 c0       	rjmp	.+18     	; 0x129a <DLS_checkLoginCredentials+0x438>
    1288:	80 91 89 00 	lds	r24, 0x0089
    128c:	90 91 8a 00 	lds	r25, 0x008A
    1290:	01 96       	adiw	r24, 0x01	; 1
    1292:	90 93 8a 00 	sts	0x008A, r25
    1296:	80 93 89 00 	sts	0x0089, r24
    129a:	80 91 89 00 	lds	r24, 0x0089
    129e:	90 91 8a 00 	lds	r25, 0x008A
    12a2:	2d ef       	ldi	r18, 0xFD	; 253
    12a4:	88 3e       	cpi	r24, 0xE8	; 232
    12a6:	92 07       	cpc	r25, r18
    12a8:	78 f3       	brcs	.-34     	; 0x1288 <DLS_checkLoginCredentials+0x426>
    12aa:	10 92 8a 00 	sts	0x008A, r1
    12ae:	10 92 89 00 	sts	0x0089, r1
    12b2:	09 c0       	rjmp	.+18     	; 0x12c6 <DLS_checkLoginCredentials+0x464>
    12b4:	80 91 89 00 	lds	r24, 0x0089
    12b8:	90 91 8a 00 	lds	r25, 0x008A
    12bc:	01 96       	adiw	r24, 0x01	; 1
    12be:	90 93 8a 00 	sts	0x008A, r25
    12c2:	80 93 89 00 	sts	0x0089, r24
    12c6:	80 91 89 00 	lds	r24, 0x0089
    12ca:	90 91 8a 00 	lds	r25, 0x008A
    12ce:	2d ef       	ldi	r18, 0xFD	; 253
    12d0:	88 3e       	cpi	r24, 0xE8	; 232
    12d2:	92 07       	cpc	r25, r18
    12d4:	78 f3       	brcs	.-34     	; 0x12b4 <DLS_checkLoginCredentials+0x452>
    /*TESTING*/__DIO_writeOutputPinValue(PORT_D, SUCCESS_LED, LOW);/*TESTING*/
    12d6:	83 e0       	ldi	r24, 0x03	; 3
    12d8:	62 e0       	ldi	r22, 0x02	; 2
    12da:	40 e0       	ldi	r20, 0x00	; 0
    12dc:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <__DIO_writeOutputPinValue>

    wrongTrialsAlarm_counter = FALSE;
    12e0:	10 92 83 00 	sts	0x0083, r1

    return USER_AUTHENTICATED;
    12e4:	82 e1       	ldi	r24, 0x12	; 18
    12e6:	8f 83       	std	Y+7, r24	; 0x07
    12e8:	8f 81       	ldd	r24, Y+7	; 0x07

}
    12ea:	27 96       	adiw	r28, 0x07	; 7
    12ec:	0f b6       	in	r0, 0x3f	; 63
    12ee:	f8 94       	cli
    12f0:	de bf       	out	0x3e, r29	; 62
    12f2:	0f be       	out	0x3f, r0	; 63
    12f4:	cd bf       	out	0x3d, r28	; 61
    12f6:	cf 91       	pop	r28
    12f8:	df 91       	pop	r29
    12fa:	08 95       	ret

000012fc <DLS_TIMER1_ISR_callBackFunction>:
/**************************************************************************************************/


/* APPL Software: DLS_TIMER1_ISR_callBackFunction FUNCTION ****************************************/
void DLS_TIMER1_ISR_callBackFunction(void)
{
    12fc:	df 93       	push	r29
    12fe:	cf 93       	push	r28
    1300:	cd b7       	in	r28, 0x3d	; 61
    1302:	de b7       	in	r29, 0x3e	; 62
    static uint8 alarm_counter = 0;
    
    if( executeISR == MOTOR_ISR_CODE )
    1304:	80 91 8b 00 	lds	r24, 0x008B
    1308:	81 30       	cpi	r24, 0x01	; 1
    130a:	39 f4       	brne	.+14     	; 0x131a <DLS_TIMER1_ISR_callBackFunction+0x1e>
    {
        __TIMER_CTC_stopTimer(TIMER1);
    130c:	81 e0       	ldi	r24, 0x01	; 1
    130e:	0e 94 33 0c 	call	0x1866	; 0x1866 <__TIMER_CTC_stopTimer>
        _MOTORDC_rotate(OFF);
    1312:	80 e0       	ldi	r24, 0x00	; 0
    1314:	0e 94 cf 09 	call	0x139e	; 0x139e <_MOTORDC_rotate>
    1318:	24 c0       	rjmp	.+72     	; 0x1362 <DLS_TIMER1_ISR_callBackFunction+0x66>
    }
    else if( executeISR == ALARM_ISR_CODE )
    131a:	80 91 8b 00 	lds	r24, 0x008B
    131e:	82 30       	cpi	r24, 0x02	; 2
    1320:	01 f5       	brne	.+64     	; 0x1362 <DLS_TIMER1_ISR_callBackFunction+0x66>
    {

        if( alarm_counter == 12)
    1322:	80 91 84 00 	lds	r24, 0x0084
    1326:	8c 30       	cpi	r24, 0x0C	; 12
    1328:	41 f4       	brne	.+16     	; 0x133a <DLS_TIMER1_ISR_callBackFunction+0x3e>
        {
            __TIMER_CTC_stopTimer(TIMER1);  //stop the Alarm Timer
    132a:	81 e0       	ldi	r24, 0x01	; 1
    132c:	0e 94 33 0c 	call	0x1866	; 0x1866 <__TIMER_CTC_stopTimer>
            code_blocking_flag = FALSE;     //to Break the Code Blocking while loop
    1330:	10 92 82 00 	sts	0x0082, r1
            alarm_counter = 0;
    1334:	10 92 84 00 	sts	0x0084, r1
    1338:	14 c0       	rjmp	.+40     	; 0x1362 <DLS_TIMER1_ISR_callBackFunction+0x66>
            return;
        }

        if( alarm_counter%2 == 0)
    133a:	80 91 84 00 	lds	r24, 0x0084
    133e:	88 2f       	mov	r24, r24
    1340:	90 e0       	ldi	r25, 0x00	; 0
    1342:	81 70       	andi	r24, 0x01	; 1
    1344:	90 70       	andi	r25, 0x00	; 0
    1346:	00 97       	sbiw	r24, 0x00	; 0
    1348:	21 f4       	brne	.+8      	; 0x1352 <DLS_TIMER1_ISR_callBackFunction+0x56>
        {
            _ALARM_state(ON);
    134a:	81 e0       	ldi	r24, 0x01	; 1
    134c:	0e 94 16 04 	call	0x82c	; 0x82c <_ALARM_state>
    1350:	03 c0       	rjmp	.+6      	; 0x1358 <DLS_TIMER1_ISR_callBackFunction+0x5c>
        }
        else
        {
            _ALARM_state(OFF);
    1352:	80 e0       	ldi	r24, 0x00	; 0
    1354:	0e 94 16 04 	call	0x82c	; 0x82c <_ALARM_state>
        }

        alarm_counter++;
    1358:	80 91 84 00 	lds	r24, 0x0084
    135c:	8f 5f       	subi	r24, 0xFF	; 255
    135e:	80 93 84 00 	sts	0x0084, r24

    }
    
}
    1362:	cf 91       	pop	r28
    1364:	df 91       	pop	r29
    1366:	08 95       	ret

00001368 <_MOTORDC_init>:
#define DC_MOTOR_C_

#include "dc_motor.h"

void _MOTORDC_init(void)
{
    1368:	df 93       	push	r29
    136a:	cf 93       	push	r28
    136c:	cd b7       	in	r28, 0x3d	; 61
    136e:	de b7       	in	r29, 0x3e	; 62
	__DIO_setPinDirection(MOTOR_DDR, MOTOR_PIN1, OUTPUT_PIN);
    1370:	81 e0       	ldi	r24, 0x01	; 1
    1372:	66 e0       	ldi	r22, 0x06	; 6
    1374:	41 e0       	ldi	r20, 0x01	; 1
    1376:	0e 94 49 00 	call	0x92	; 0x92 <__DIO_setPinDirection>
	__DIO_setPinDirection(MOTOR_DDR, MOTOR_PIN2, OUTPUT_PIN);
    137a:	81 e0       	ldi	r24, 0x01	; 1
    137c:	67 e0       	ldi	r22, 0x07	; 7
    137e:	41 e0       	ldi	r20, 0x01	; 1
    1380:	0e 94 49 00 	call	0x92	; 0x92 <__DIO_setPinDirection>

	__DIO_writeOutputPinValue(MOTOR_PORT, MOTOR_PIN1, LOW);
    1384:	81 e0       	ldi	r24, 0x01	; 1
    1386:	66 e0       	ldi	r22, 0x06	; 6
    1388:	40 e0       	ldi	r20, 0x00	; 0
    138a:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <__DIO_writeOutputPinValue>
	__DIO_writeOutputPinValue(MOTOR_PORT, MOTOR_PIN2, LOW);
    138e:	81 e0       	ldi	r24, 0x01	; 1
    1390:	67 e0       	ldi	r22, 0x07	; 7
    1392:	40 e0       	ldi	r20, 0x00	; 0
    1394:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <__DIO_writeOutputPinValue>
}
    1398:	cf 91       	pop	r28
    139a:	df 91       	pop	r29
    139c:	08 95       	ret

0000139e <_MOTORDC_rotate>:

void _MOTORDC_rotate(uint8 motor_state)
{
    139e:	df 93       	push	r29
    13a0:	cf 93       	push	r28
    13a2:	00 d0       	rcall	.+0      	; 0x13a4 <_MOTORDC_rotate+0x6>
    13a4:	0f 92       	push	r0
    13a6:	cd b7       	in	r28, 0x3d	; 61
    13a8:	de b7       	in	r29, 0x3e	; 62
    13aa:	89 83       	std	Y+1, r24	; 0x01
	switch(motor_state)
    13ac:	89 81       	ldd	r24, Y+1	; 0x01
    13ae:	28 2f       	mov	r18, r24
    13b0:	30 e0       	ldi	r19, 0x00	; 0
    13b2:	3b 83       	std	Y+3, r19	; 0x03
    13b4:	2a 83       	std	Y+2, r18	; 0x02
    13b6:	8a 81       	ldd	r24, Y+2	; 0x02
    13b8:	9b 81       	ldd	r25, Y+3	; 0x03
    13ba:	81 30       	cpi	r24, 0x01	; 1
    13bc:	91 05       	cpc	r25, r1
    13be:	a1 f0       	breq	.+40     	; 0x13e8 <_MOTORDC_rotate+0x4a>
    13c0:	2a 81       	ldd	r18, Y+2	; 0x02
    13c2:	3b 81       	ldd	r19, Y+3	; 0x03
    13c4:	22 30       	cpi	r18, 0x02	; 2
    13c6:	31 05       	cpc	r19, r1
    13c8:	d1 f0       	breq	.+52     	; 0x13fe <_MOTORDC_rotate+0x60>
    13ca:	8a 81       	ldd	r24, Y+2	; 0x02
    13cc:	9b 81       	ldd	r25, Y+3	; 0x03
    13ce:	00 97       	sbiw	r24, 0x00	; 0
    13d0:	01 f5       	brne	.+64     	; 0x1412 <_MOTORDC_rotate+0x74>
	{
	case OFF:
		__DIO_writeOutputPinValue(MOTOR_PORT, MOTOR_PIN1, LOW);
    13d2:	81 e0       	ldi	r24, 0x01	; 1
    13d4:	66 e0       	ldi	r22, 0x06	; 6
    13d6:	40 e0       	ldi	r20, 0x00	; 0
    13d8:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <__DIO_writeOutputPinValue>
		__DIO_writeOutputPinValue(MOTOR_PORT, MOTOR_PIN2, LOW);
    13dc:	81 e0       	ldi	r24, 0x01	; 1
    13de:	67 e0       	ldi	r22, 0x07	; 7
    13e0:	40 e0       	ldi	r20, 0x00	; 0
    13e2:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <__DIO_writeOutputPinValue>
    13e6:	15 c0       	rjmp	.+42     	; 0x1412 <_MOTORDC_rotate+0x74>
		break;
	case CW:
		__DIO_writeOutputPinValue(MOTOR_PORT, MOTOR_PIN1, HIGH);
    13e8:	81 e0       	ldi	r24, 0x01	; 1
    13ea:	66 e0       	ldi	r22, 0x06	; 6
    13ec:	41 e0       	ldi	r20, 0x01	; 1
    13ee:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <__DIO_writeOutputPinValue>
		__DIO_writeOutputPinValue(MOTOR_PORT, MOTOR_PIN2, LOW);
    13f2:	81 e0       	ldi	r24, 0x01	; 1
    13f4:	67 e0       	ldi	r22, 0x07	; 7
    13f6:	40 e0       	ldi	r20, 0x00	; 0
    13f8:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <__DIO_writeOutputPinValue>
    13fc:	0a c0       	rjmp	.+20     	; 0x1412 <_MOTORDC_rotate+0x74>
		break;
	case CCW:
		__DIO_writeOutputPinValue(MOTOR_PORT, MOTOR_PIN1, LOW);
    13fe:	81 e0       	ldi	r24, 0x01	; 1
    1400:	66 e0       	ldi	r22, 0x06	; 6
    1402:	40 e0       	ldi	r20, 0x00	; 0
    1404:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <__DIO_writeOutputPinValue>
		__DIO_writeOutputPinValue(MOTOR_PORT, MOTOR_PIN2, HIGH);
    1408:	81 e0       	ldi	r24, 0x01	; 1
    140a:	67 e0       	ldi	r22, 0x07	; 7
    140c:	41 e0       	ldi	r20, 0x01	; 1
    140e:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <__DIO_writeOutputPinValue>
		break;
	}
}
    1412:	0f 90       	pop	r0
    1414:	0f 90       	pop	r0
    1416:	0f 90       	pop	r0
    1418:	cf 91       	pop	r28
    141a:	df 91       	pop	r29
    141c:	08 95       	ret

0000141e <_EXT_EEPROM_init>:

/*** Description:-
 * Function Used to send start bit for a Frame
 */
void  _EXT_EEPROM_init(uint8 master_addr)
{
    141e:	df 93       	push	r29
    1420:	cf 93       	push	r28
    1422:	00 d0       	rcall	.+0      	; 0x1424 <_EXT_EEPROM_init+0x6>
    1424:	00 d0       	rcall	.+0      	; 0x1426 <_EXT_EEPROM_init+0x8>
    1426:	0f 92       	push	r0
    1428:	cd b7       	in	r28, 0x3d	; 61
    142a:	de b7       	in	r29, 0x3e	; 62
    142c:	8d 83       	std	Y+5, r24	; 0x05
    /*Define the TWI Configuration Parameters*/
    TWI_config eeprom_twi_config = {EEPROM_TWPS_VALUE, EEPROM_TWBR_VALUE, 0x00};
    142e:	1a 82       	std	Y+2, r1	; 0x02
    1430:	19 82       	std	Y+1, r1	; 0x01
    1432:	82 e0       	ldi	r24, 0x02	; 2
    1434:	8b 83       	std	Y+3, r24	; 0x03
    1436:	1c 82       	std	Y+4, r1	; 0x04
    eeprom_twi_config.TWI_myAddress = master_addr;
    1438:	8d 81       	ldd	r24, Y+5	; 0x05
    143a:	8c 83       	std	Y+4, r24	; 0x04

    /*Init the TWI Module*/
    __TWI_init(&eeprom_twi_config);
    143c:	ce 01       	movw	r24, r28
    143e:	01 96       	adiw	r24, 0x01	; 1
    1440:	0e 94 0a 02 	call	0x414	; 0x414 <__TWI_init>
}
    1444:	0f 90       	pop	r0
    1446:	0f 90       	pop	r0
    1448:	0f 90       	pop	r0
    144a:	0f 90       	pop	r0
    144c:	0f 90       	pop	r0
    144e:	cf 91       	pop	r28
    1450:	df 91       	pop	r29
    1452:	08 95       	ret

00001454 <_EXT_EEPROM_writeByte>:
 *  +-------+-------------------------------------+-----+---------------+-----+--------+-----+------+
 *  | Start | MEM_ID + addr10 + addr9 + addr8 + W | ACK | addr7...addr0 | ACK | u8Data | ACK | STOP |
 *  +-------+-------------------------------------+-----+---------------+-----+--------+-----+------+
 */
uint8  _EXT_EEPROM_writeByte(uint16 mem_u16addr, uint8 u8Data)
{
    1454:	df 93       	push	r29
    1456:	cf 93       	push	r28
    1458:	00 d0       	rcall	.+0      	; 0x145a <_EXT_EEPROM_writeByte+0x6>
    145a:	00 d0       	rcall	.+0      	; 0x145c <_EXT_EEPROM_writeByte+0x8>
    145c:	cd b7       	in	r28, 0x3d	; 61
    145e:	de b7       	in	r29, 0x3e	; 62
    1460:	9a 83       	std	Y+2, r25	; 0x02
    1462:	89 83       	std	Y+1, r24	; 0x01
    1464:	6b 83       	std	Y+3, r22	; 0x03
    __TWI_startFrame();
    1466:	0e 94 36 02 	call	0x46c	; 0x46c <__TWI_startFrame>
    if( __TWI_getStatus() != TWI_START_SENT )
    146a:	0e 94 a6 02 	call	0x54c	; 0x54c <__TWI_getStatus>
    146e:	88 30       	cpi	r24, 0x08	; 8
    1470:	11 f0       	breq	.+4      	; 0x1476 <_EXT_EEPROM_writeByte+0x22>
    {
        return TWI_ERROR;
    1472:	1c 82       	std	Y+4, r1	; 0x04
    1474:	28 c0       	rjmp	.+80     	; 0x14c6 <_EXT_EEPROM_writeByte+0x72>
    }

    __TWI_transmitByte( (uint8)((0xA0) | ((mem_u16addr & 0x0700)>>7)) );
    1476:	89 81       	ldd	r24, Y+1	; 0x01
    1478:	9a 81       	ldd	r25, Y+2	; 0x02
    147a:	80 70       	andi	r24, 0x00	; 0
    147c:	97 70       	andi	r25, 0x07	; 7
    147e:	88 0f       	add	r24, r24
    1480:	89 2f       	mov	r24, r25
    1482:	88 1f       	adc	r24, r24
    1484:	99 0b       	sbc	r25, r25
    1486:	91 95       	neg	r25
    1488:	80 6a       	ori	r24, 0xA0	; 160
    148a:	0e 94 57 02 	call	0x4ae	; 0x4ae <__TWI_transmitByte>
    if( __TWI_getStatus() != TWI_MAS_TRAN_SLA_ADR_WRTIE_ACK )
    148e:	0e 94 a6 02 	call	0x54c	; 0x54c <__TWI_getStatus>
    1492:	88 31       	cpi	r24, 0x18	; 24
    1494:	11 f0       	breq	.+4      	; 0x149a <_EXT_EEPROM_writeByte+0x46>
    {
        return TWI_ERROR;
    1496:	1c 82       	std	Y+4, r1	; 0x04
    1498:	16 c0       	rjmp	.+44     	; 0x14c6 <_EXT_EEPROM_writeByte+0x72>
    }

    __TWI_transmitByte( (uint8)(mem_u16addr) );
    149a:	89 81       	ldd	r24, Y+1	; 0x01
    149c:	0e 94 57 02 	call	0x4ae	; 0x4ae <__TWI_transmitByte>
    if( __TWI_getStatus() != TWI_MAS_TRAN_DATA_ACK )
    14a0:	0e 94 a6 02 	call	0x54c	; 0x54c <__TWI_getStatus>
    14a4:	88 32       	cpi	r24, 0x28	; 40
    14a6:	11 f0       	breq	.+4      	; 0x14ac <_EXT_EEPROM_writeByte+0x58>
    {
        return TWI_ERROR;
    14a8:	1c 82       	std	Y+4, r1	; 0x04
    14aa:	0d c0       	rjmp	.+26     	; 0x14c6 <_EXT_EEPROM_writeByte+0x72>
    }

    __TWI_transmitByte(u8Data);
    14ac:	8b 81       	ldd	r24, Y+3	; 0x03
    14ae:	0e 94 57 02 	call	0x4ae	; 0x4ae <__TWI_transmitByte>
    if( __TWI_getStatus() != TWI_MAS_TRAN_DATA_ACK )
    14b2:	0e 94 a6 02 	call	0x54c	; 0x54c <__TWI_getStatus>
    14b6:	88 32       	cpi	r24, 0x28	; 40
    14b8:	11 f0       	breq	.+4      	; 0x14be <_EXT_EEPROM_writeByte+0x6a>
    {
        return TWI_ERROR;
    14ba:	1c 82       	std	Y+4, r1	; 0x04
    14bc:	04 c0       	rjmp	.+8      	; 0x14c6 <_EXT_EEPROM_writeByte+0x72>
    }

    __TWI_stopFrame();
    14be:	0e 94 4c 02 	call	0x498	; 0x498 <__TWI_stopFrame>

    return TWI_SUCCESS;
    14c2:	81 e0       	ldi	r24, 0x01	; 1
    14c4:	8c 83       	std	Y+4, r24	; 0x04
    14c6:	8c 81       	ldd	r24, Y+4	; 0x04
}
    14c8:	0f 90       	pop	r0
    14ca:	0f 90       	pop	r0
    14cc:	0f 90       	pop	r0
    14ce:	0f 90       	pop	r0
    14d0:	cf 91       	pop	r28
    14d2:	df 91       	pop	r29
    14d4:	08 95       	ret

000014d6 <_EXT_EEPROM_readByte>:
 *  +------------+-------------------------------------+-----+---------------+-----+------+
 *  | Rep. Start | MEM_ID + addr10 + addr9 + addr8 + R | ACK |     Data      | ACK | Stop |
 *  +------------+-------------------------------------+-----+---------------+-----+------+
 */
uint8  _EXT_EEPROM_readByte(uint16 mem_u16addr, uint8 *p_u8Data)
{
    14d6:	df 93       	push	r29
    14d8:	cf 93       	push	r28
    14da:	00 d0       	rcall	.+0      	; 0x14dc <_EXT_EEPROM_readByte+0x6>
    14dc:	00 d0       	rcall	.+0      	; 0x14de <_EXT_EEPROM_readByte+0x8>
    14de:	0f 92       	push	r0
    14e0:	cd b7       	in	r28, 0x3d	; 61
    14e2:	de b7       	in	r29, 0x3e	; 62
    14e4:	9a 83       	std	Y+2, r25	; 0x02
    14e6:	89 83       	std	Y+1, r24	; 0x01
    14e8:	7c 83       	std	Y+4, r23	; 0x04
    14ea:	6b 83       	std	Y+3, r22	; 0x03
    __TWI_startFrame();
    14ec:	0e 94 36 02 	call	0x46c	; 0x46c <__TWI_startFrame>
    if( __TWI_getStatus() != TWI_START_SENT )
    14f0:	0e 94 a6 02 	call	0x54c	; 0x54c <__TWI_getStatus>
    14f4:	88 30       	cpi	r24, 0x08	; 8
    14f6:	11 f0       	breq	.+4      	; 0x14fc <_EXT_EEPROM_readByte+0x26>
    {
        return TWI_ERROR;
    14f8:	1d 82       	std	Y+5, r1	; 0x05
    14fa:	44 c0       	rjmp	.+136    	; 0x1584 <_EXT_EEPROM_readByte+0xae>
    }

    __TWI_transmitByte( (uint8)(((mem_u16addr & 0x0700)>>7)) | (0xA0));
    14fc:	89 81       	ldd	r24, Y+1	; 0x01
    14fe:	9a 81       	ldd	r25, Y+2	; 0x02
    1500:	80 70       	andi	r24, 0x00	; 0
    1502:	97 70       	andi	r25, 0x07	; 7
    1504:	88 0f       	add	r24, r24
    1506:	89 2f       	mov	r24, r25
    1508:	88 1f       	adc	r24, r24
    150a:	99 0b       	sbc	r25, r25
    150c:	91 95       	neg	r25
    150e:	80 6a       	ori	r24, 0xA0	; 160
    1510:	0e 94 57 02 	call	0x4ae	; 0x4ae <__TWI_transmitByte>
    if( __TWI_getStatus() != TWI_MAS_TRAN_SLA_ADR_WRTIE_ACK )
    1514:	0e 94 a6 02 	call	0x54c	; 0x54c <__TWI_getStatus>
    1518:	88 31       	cpi	r24, 0x18	; 24
    151a:	11 f0       	breq	.+4      	; 0x1520 <_EXT_EEPROM_readByte+0x4a>
    {
        return TWI_ERROR;
    151c:	1d 82       	std	Y+5, r1	; 0x05
    151e:	32 c0       	rjmp	.+100    	; 0x1584 <_EXT_EEPROM_readByte+0xae>
    }

    __TWI_transmitByte( (uint8)(mem_u16addr) );
    1520:	89 81       	ldd	r24, Y+1	; 0x01
    1522:	0e 94 57 02 	call	0x4ae	; 0x4ae <__TWI_transmitByte>
    if( __TWI_getStatus() != TWI_MAS_TRAN_DATA_ACK )
    1526:	0e 94 a6 02 	call	0x54c	; 0x54c <__TWI_getStatus>
    152a:	88 32       	cpi	r24, 0x28	; 40
    152c:	11 f0       	breq	.+4      	; 0x1532 <_EXT_EEPROM_readByte+0x5c>
    {
        return TWI_ERROR;
    152e:	1d 82       	std	Y+5, r1	; 0x05
    1530:	29 c0       	rjmp	.+82     	; 0x1584 <_EXT_EEPROM_readByte+0xae>
    }

    __TWI_startFrame();
    1532:	0e 94 36 02 	call	0x46c	; 0x46c <__TWI_startFrame>
    if( __TWI_getStatus() != TWI_REP_START_SENT )
    1536:	0e 94 a6 02 	call	0x54c	; 0x54c <__TWI_getStatus>
    153a:	80 31       	cpi	r24, 0x10	; 16
    153c:	11 f0       	breq	.+4      	; 0x1542 <_EXT_EEPROM_readByte+0x6c>
    {
        return TWI_ERROR;
    153e:	1d 82       	std	Y+5, r1	; 0x05
    1540:	21 c0       	rjmp	.+66     	; 0x1584 <_EXT_EEPROM_readByte+0xae>
    }

    __TWI_transmitByte( (uint8)(((mem_u16addr & 0x0700)>>7)) | (0xA0) | 1);
    1542:	89 81       	ldd	r24, Y+1	; 0x01
    1544:	9a 81       	ldd	r25, Y+2	; 0x02
    1546:	80 70       	andi	r24, 0x00	; 0
    1548:	97 70       	andi	r25, 0x07	; 7
    154a:	88 0f       	add	r24, r24
    154c:	89 2f       	mov	r24, r25
    154e:	88 1f       	adc	r24, r24
    1550:	99 0b       	sbc	r25, r25
    1552:	91 95       	neg	r25
    1554:	81 6a       	ori	r24, 0xA1	; 161
    1556:	0e 94 57 02 	call	0x4ae	; 0x4ae <__TWI_transmitByte>
    if( __TWI_getStatus() != TWI_MAS_TRAN_SLA_ADR_READ_ACK )
    155a:	0e 94 a6 02 	call	0x54c	; 0x54c <__TWI_getStatus>
    155e:	80 34       	cpi	r24, 0x40	; 64
    1560:	11 f0       	breq	.+4      	; 0x1566 <_EXT_EEPROM_readByte+0x90>
    {
        return TWI_ERROR;
    1562:	1d 82       	std	Y+5, r1	; 0x05
    1564:	0f c0       	rjmp	.+30     	; 0x1584 <_EXT_EEPROM_readByte+0xae>
    }

    *p_u8Data = __TWI_receiveByte_NACK();
    1566:	0e 94 8d 02 	call	0x51a	; 0x51a <__TWI_receiveByte_NACK>
    156a:	eb 81       	ldd	r30, Y+3	; 0x03
    156c:	fc 81       	ldd	r31, Y+4	; 0x04
    156e:	80 83       	st	Z, r24
    if( __TWI_getStatus() != TWI_MAS_RECE_DATA_NACK )
    1570:	0e 94 a6 02 	call	0x54c	; 0x54c <__TWI_getStatus>
    1574:	88 35       	cpi	r24, 0x58	; 88
    1576:	11 f0       	breq	.+4      	; 0x157c <_EXT_EEPROM_readByte+0xa6>
    {
        return TWI_ERROR;
    1578:	1d 82       	std	Y+5, r1	; 0x05
    157a:	04 c0       	rjmp	.+8      	; 0x1584 <_EXT_EEPROM_readByte+0xae>
    }

    __TWI_stopFrame();
    157c:	0e 94 4c 02 	call	0x498	; 0x498 <__TWI_stopFrame>

    return TWI_SUCCESS;    
    1580:	81 e0       	ldi	r24, 0x01	; 1
    1582:	8d 83       	std	Y+5, r24	; 0x05
    1584:	8d 81       	ldd	r24, Y+5	; 0x05
}
    1586:	0f 90       	pop	r0
    1588:	0f 90       	pop	r0
    158a:	0f 90       	pop	r0
    158c:	0f 90       	pop	r0
    158e:	0f 90       	pop	r0
    1590:	cf 91       	pop	r28
    1592:	df 91       	pop	r29
    1594:	08 95       	ret

00001596 <__vector_19>:
#if(TIMER_OCx_PIN == DISABLED)

    /*** ISR Description:-
     * When Interrupt occurs the Global pointer will call the user-defined function */
    ISR(TIMER0_COMP_vect)
    {
    1596:	1f 92       	push	r1
    1598:	0f 92       	push	r0
    159a:	0f b6       	in	r0, 0x3f	; 63
    159c:	0f 92       	push	r0
    159e:	11 24       	eor	r1, r1
    15a0:	2f 93       	push	r18
    15a2:	3f 93       	push	r19
    15a4:	4f 93       	push	r20
    15a6:	5f 93       	push	r21
    15a8:	6f 93       	push	r22
    15aa:	7f 93       	push	r23
    15ac:	8f 93       	push	r24
    15ae:	9f 93       	push	r25
    15b0:	af 93       	push	r26
    15b2:	bf 93       	push	r27
    15b4:	ef 93       	push	r30
    15b6:	ff 93       	push	r31
    15b8:	df 93       	push	r29
    15ba:	cf 93       	push	r28
    15bc:	cd b7       	in	r28, 0x3d	; 61
    15be:	de b7       	in	r29, 0x3e	; 62
        (*g_TIMER0_callBack_ptr)();
    15c0:	e0 91 85 00 	lds	r30, 0x0085
    15c4:	f0 91 86 00 	lds	r31, 0x0086
    15c8:	09 95       	icall
    }
    15ca:	cf 91       	pop	r28
    15cc:	df 91       	pop	r29
    15ce:	ff 91       	pop	r31
    15d0:	ef 91       	pop	r30
    15d2:	bf 91       	pop	r27
    15d4:	af 91       	pop	r26
    15d6:	9f 91       	pop	r25
    15d8:	8f 91       	pop	r24
    15da:	7f 91       	pop	r23
    15dc:	6f 91       	pop	r22
    15de:	5f 91       	pop	r21
    15e0:	4f 91       	pop	r20
    15e2:	3f 91       	pop	r19
    15e4:	2f 91       	pop	r18
    15e6:	0f 90       	pop	r0
    15e8:	0f be       	out	0x3f, r0	; 63
    15ea:	0f 90       	pop	r0
    15ec:	1f 90       	pop	r1
    15ee:	18 95       	reti

000015f0 <__vector_6>:

    /*** ISR Description:-
     * When Interrupt occurs the Global pointer will call the user-defined function */
    ISR(TIMER1_COMPA_vect)
    {
    15f0:	1f 92       	push	r1
    15f2:	0f 92       	push	r0
    15f4:	0f b6       	in	r0, 0x3f	; 63
    15f6:	0f 92       	push	r0
    15f8:	11 24       	eor	r1, r1
    15fa:	2f 93       	push	r18
    15fc:	3f 93       	push	r19
    15fe:	4f 93       	push	r20
    1600:	5f 93       	push	r21
    1602:	6f 93       	push	r22
    1604:	7f 93       	push	r23
    1606:	8f 93       	push	r24
    1608:	9f 93       	push	r25
    160a:	af 93       	push	r26
    160c:	bf 93       	push	r27
    160e:	ef 93       	push	r30
    1610:	ff 93       	push	r31
    1612:	df 93       	push	r29
    1614:	cf 93       	push	r28
    1616:	cd b7       	in	r28, 0x3d	; 61
    1618:	de b7       	in	r29, 0x3e	; 62
        (*g_TIMER1_callBack_ptr)();
    161a:	e0 91 87 00 	lds	r30, 0x0087
    161e:	f0 91 88 00 	lds	r31, 0x0088
    1622:	09 95       	icall
    }
    1624:	cf 91       	pop	r28
    1626:	df 91       	pop	r29
    1628:	ff 91       	pop	r31
    162a:	ef 91       	pop	r30
    162c:	bf 91       	pop	r27
    162e:	af 91       	pop	r26
    1630:	9f 91       	pop	r25
    1632:	8f 91       	pop	r24
    1634:	7f 91       	pop	r23
    1636:	6f 91       	pop	r22
    1638:	5f 91       	pop	r21
    163a:	4f 91       	pop	r20
    163c:	3f 91       	pop	r19
    163e:	2f 91       	pop	r18
    1640:	0f 90       	pop	r0
    1642:	0f be       	out	0x3f, r0	; 63
    1644:	0f 90       	pop	r0
    1646:	1f 90       	pop	r1
    1648:	18 95       	reti

0000164a <__TIMER_CTC_setISRCallBackFuncPointer>:

    /*** Description:-
     * Used to Set the Global Pointer with desired function which will be called by ISR 
     * Func Arg: Pass the desired function Name */
    void __TIMER_CTC_setISRCallBackFuncPointer(uint8 timer_module, void (*ptr_to_func)(void))
    {
    164a:	df 93       	push	r29
    164c:	cf 93       	push	r28
    164e:	00 d0       	rcall	.+0      	; 0x1650 <__TIMER_CTC_setISRCallBackFuncPointer+0x6>
    1650:	00 d0       	rcall	.+0      	; 0x1652 <__TIMER_CTC_setISRCallBackFuncPointer+0x8>
    1652:	0f 92       	push	r0
    1654:	cd b7       	in	r28, 0x3d	; 61
    1656:	de b7       	in	r29, 0x3e	; 62
    1658:	89 83       	std	Y+1, r24	; 0x01
    165a:	7b 83       	std	Y+3, r23	; 0x03
    165c:	6a 83       	std	Y+2, r22	; 0x02
        switch(timer_module)
    165e:	89 81       	ldd	r24, Y+1	; 0x01
    1660:	28 2f       	mov	r18, r24
    1662:	30 e0       	ldi	r19, 0x00	; 0
    1664:	3d 83       	std	Y+5, r19	; 0x05
    1666:	2c 83       	std	Y+4, r18	; 0x04
    1668:	8c 81       	ldd	r24, Y+4	; 0x04
    166a:	9d 81       	ldd	r25, Y+5	; 0x05
    166c:	00 97       	sbiw	r24, 0x00	; 0
    166e:	31 f0       	breq	.+12     	; 0x167c <__TIMER_CTC_setISRCallBackFuncPointer+0x32>
    1670:	2c 81       	ldd	r18, Y+4	; 0x04
    1672:	3d 81       	ldd	r19, Y+5	; 0x05
    1674:	21 30       	cpi	r18, 0x01	; 1
    1676:	31 05       	cpc	r19, r1
    1678:	41 f0       	breq	.+16     	; 0x168a <__TIMER_CTC_setISRCallBackFuncPointer+0x40>
    167a:	0d c0       	rjmp	.+26     	; 0x1696 <__TIMER_CTC_setISRCallBackFuncPointer+0x4c>
        {
            case TIMER0:
                g_TIMER0_callBack_ptr = ptr_to_func;
    167c:	8a 81       	ldd	r24, Y+2	; 0x02
    167e:	9b 81       	ldd	r25, Y+3	; 0x03
    1680:	90 93 86 00 	sts	0x0086, r25
    1684:	80 93 85 00 	sts	0x0085, r24
    1688:	06 c0       	rjmp	.+12     	; 0x1696 <__TIMER_CTC_setISRCallBackFuncPointer+0x4c>
            break;

            case TIMER1:
                g_TIMER1_callBack_ptr = ptr_to_func;
    168a:	8a 81       	ldd	r24, Y+2	; 0x02
    168c:	9b 81       	ldd	r25, Y+3	; 0x03
    168e:	90 93 88 00 	sts	0x0088, r25
    1692:	80 93 87 00 	sts	0x0087, r24
            break;

            case TIMER2:break;
            default:break;
        }
    }
    1696:	0f 90       	pop	r0
    1698:	0f 90       	pop	r0
    169a:	0f 90       	pop	r0
    169c:	0f 90       	pop	r0
    169e:	0f 90       	pop	r0
    16a0:	cf 91       	pop	r28
    16a2:	df 91       	pop	r29
    16a4:	08 95       	ret

000016a6 <__TIMER_CTC_startTimer>:

/*** Description:-
 * Used to Start the Timer with the desired Configuration
 * Func Args, struct Members: timer_clock / compare_value / OC0_mode */
void __TIMER_CTC_startTimer(const configType_TIMER *t_configPointer)
{
    16a6:	df 93       	push	r29
    16a8:	cf 93       	push	r28
    16aa:	00 d0       	rcall	.+0      	; 0x16ac <__TIMER_CTC_startTimer+0x6>
    16ac:	00 d0       	rcall	.+0      	; 0x16ae <__TIMER_CTC_startTimer+0x8>
    16ae:	cd b7       	in	r28, 0x3d	; 61
    16b0:	de b7       	in	r29, 0x3e	; 62
    16b2:	9a 83       	std	Y+2, r25	; 0x02
    16b4:	89 83       	std	Y+1, r24	; 0x01
    switch(t_configPointer->timer_module)
    16b6:	e9 81       	ldd	r30, Y+1	; 0x01
    16b8:	fa 81       	ldd	r31, Y+2	; 0x02
    16ba:	80 81       	ld	r24, Z
    16bc:	28 2f       	mov	r18, r24
    16be:	30 e0       	ldi	r19, 0x00	; 0
    16c0:	3c 83       	std	Y+4, r19	; 0x04
    16c2:	2b 83       	std	Y+3, r18	; 0x03
    16c4:	8b 81       	ldd	r24, Y+3	; 0x03
    16c6:	9c 81       	ldd	r25, Y+4	; 0x04
    16c8:	00 97       	sbiw	r24, 0x00	; 0
    16ca:	39 f0       	breq	.+14     	; 0x16da <__TIMER_CTC_startTimer+0x34>
    16cc:	2b 81       	ldd	r18, Y+3	; 0x03
    16ce:	3c 81       	ldd	r19, Y+4	; 0x04
    16d0:	21 30       	cpi	r18, 0x01	; 1
    16d2:	31 05       	cpc	r19, r1
    16d4:	09 f4       	brne	.+2      	; 0x16d8 <__TIMER_CTC_startTimer+0x32>
    16d6:	57 c0       	rjmp	.+174    	; 0x1786 <__TIMER_CTC_startTimer+0xe0>
    16d8:	bf c0       	rjmp	.+382    	; 0x1858 <__TIMER_CTC_startTimer+0x1b2>
    {
        case TIMER0:
            /*Disable Global Interrupt flag; Entering Critical Section*/
             DIS_GLOBAL_INTERRUPT;
    16da:	af e5       	ldi	r26, 0x5F	; 95
    16dc:	b0 e0       	ldi	r27, 0x00	; 0
    16de:	ef e5       	ldi	r30, 0x5F	; 95
    16e0:	f0 e0       	ldi	r31, 0x00	; 0
    16e2:	80 81       	ld	r24, Z
    16e4:	8f 77       	andi	r24, 0x7F	; 127
    16e6:	8c 93       	st	X, r24
            /*Initialize the TCNT0 with 0 Value*/
            TCNT0 = 0x00;
    16e8:	e2 e5       	ldi	r30, 0x52	; 82
    16ea:	f0 e0       	ldi	r31, 0x00	; 0
    16ec:	10 82       	st	Z, r1
            /*Set Compare Register with compare value*/
            OCR0 = t_configPointer->compare_value;
    16ee:	ac e5       	ldi	r26, 0x5C	; 92
    16f0:	b0 e0       	ldi	r27, 0x00	; 0
    16f2:	e9 81       	ldd	r30, Y+1	; 0x01
    16f4:	fa 81       	ldd	r31, Y+2	; 0x02
    16f6:	82 81       	ldd	r24, Z+2	; 0x02
    16f8:	93 81       	ldd	r25, Z+3	; 0x03
    16fa:	8c 93       	st	X, r24
            /*Set Timer in Non PWM Mode*/
            SET_BIT(TCCR0, FOC0);
    16fc:	a3 e5       	ldi	r26, 0x53	; 83
    16fe:	b0 e0       	ldi	r27, 0x00	; 0
    1700:	e3 e5       	ldi	r30, 0x53	; 83
    1702:	f0 e0       	ldi	r31, 0x00	; 0
    1704:	80 81       	ld	r24, Z
    1706:	80 68       	ori	r24, 0x80	; 128
    1708:	8c 93       	st	X, r24
            /*Set The timer in CTC Mode: WGM00=0 / WGM01 = 1*/
            CLR_BIT(TCCR0, WGM00);
    170a:	a3 e5       	ldi	r26, 0x53	; 83
    170c:	b0 e0       	ldi	r27, 0x00	; 0
    170e:	e3 e5       	ldi	r30, 0x53	; 83
    1710:	f0 e0       	ldi	r31, 0x00	; 0
    1712:	80 81       	ld	r24, Z
    1714:	8f 7b       	andi	r24, 0xBF	; 191
    1716:	8c 93       	st	X, r24
            SET_BIT(TCCR0, WGM01);
    1718:	a3 e5       	ldi	r26, 0x53	; 83
    171a:	b0 e0       	ldi	r27, 0x00	; 0
    171c:	e3 e5       	ldi	r30, 0x53	; 83
    171e:	f0 e0       	ldi	r31, 0x00	; 0
    1720:	80 81       	ld	r24, Z
    1722:	88 60       	ori	r24, 0x08	; 8
    1724:	8c 93       	st	X, r24
            /*Enable Module Timer 0 Interrupt flag; if OC0 Pin is Disabled*/
            #if(TIMER_OCx_PIN == DISABLED)
                SET_BIT(TIMSK, OCIE0);
    1726:	a9 e5       	ldi	r26, 0x59	; 89
    1728:	b0 e0       	ldi	r27, 0x00	; 0
    172a:	e9 e5       	ldi	r30, 0x59	; 89
    172c:	f0 e0       	ldi	r31, 0x00	; 0
    172e:	80 81       	ld	r24, Z
    1730:	82 60       	ori	r24, 0x02	; 2
    1732:	8c 93       	st	X, r24
                CLR_BIT(TIMSK, OCIE0);
                /*Set OC0 as Output Pin*/
                SET_BIT(DDRB, PB3);
            #endif
            /*Set Compare Output Mode, non-PWM Mode Pins*/
            TCCR0 = (TCCR0&0b11001111) | (t_configPointer->OCx_mode<<4);
    1734:	a3 e5       	ldi	r26, 0x53	; 83
    1736:	b0 e0       	ldi	r27, 0x00	; 0
    1738:	e3 e5       	ldi	r30, 0x53	; 83
    173a:	f0 e0       	ldi	r31, 0x00	; 0
    173c:	80 81       	ld	r24, Z
    173e:	28 2f       	mov	r18, r24
    1740:	2f 7c       	andi	r18, 0xCF	; 207
    1742:	e9 81       	ldd	r30, Y+1	; 0x01
    1744:	fa 81       	ldd	r31, Y+2	; 0x02
    1746:	84 81       	ldd	r24, Z+4	; 0x04
    1748:	88 2f       	mov	r24, r24
    174a:	90 e0       	ldi	r25, 0x00	; 0
    174c:	82 95       	swap	r24
    174e:	92 95       	swap	r25
    1750:	90 7f       	andi	r25, 0xF0	; 240
    1752:	98 27       	eor	r25, r24
    1754:	80 7f       	andi	r24, 0xF0	; 240
    1756:	98 27       	eor	r25, r24
    1758:	82 2b       	or	r24, r18
    175a:	8c 93       	st	X, r24
            /*Set the Timer Clock Prescaler*/
            TCCR0 = (TCCR0&0xF8) | (t_configPointer->timer_clock&0x07);
    175c:	a3 e5       	ldi	r26, 0x53	; 83
    175e:	b0 e0       	ldi	r27, 0x00	; 0
    1760:	e3 e5       	ldi	r30, 0x53	; 83
    1762:	f0 e0       	ldi	r31, 0x00	; 0
    1764:	80 81       	ld	r24, Z
    1766:	98 2f       	mov	r25, r24
    1768:	98 7f       	andi	r25, 0xF8	; 248
    176a:	e9 81       	ldd	r30, Y+1	; 0x01
    176c:	fa 81       	ldd	r31, Y+2	; 0x02
    176e:	81 81       	ldd	r24, Z+1	; 0x01
    1770:	87 70       	andi	r24, 0x07	; 7
    1772:	89 2b       	or	r24, r25
    1774:	8c 93       	st	X, r24
            /*Enable Global Interrupt flag; Exiting Critical Section*/
            EN_GLOBAL_INTERRUPT;
    1776:	af e5       	ldi	r26, 0x5F	; 95
    1778:	b0 e0       	ldi	r27, 0x00	; 0
    177a:	ef e5       	ldi	r30, 0x5F	; 95
    177c:	f0 e0       	ldi	r31, 0x00	; 0
    177e:	80 81       	ld	r24, Z
    1780:	80 68       	ori	r24, 0x80	; 128
    1782:	8c 93       	st	X, r24
    1784:	69 c0       	rjmp	.+210    	; 0x1858 <__TIMER_CTC_startTimer+0x1b2>
        break;

        case TIMER1:
            /*Disable Global Interrupt flag; Entering Critical Section*/
            DIS_GLOBAL_INTERRUPT;
    1786:	af e5       	ldi	r26, 0x5F	; 95
    1788:	b0 e0       	ldi	r27, 0x00	; 0
    178a:	ef e5       	ldi	r30, 0x5F	; 95
    178c:	f0 e0       	ldi	r31, 0x00	; 0
    178e:	80 81       	ld	r24, Z
    1790:	8f 77       	andi	r24, 0x7F	; 127
    1792:	8c 93       	st	X, r24
            /*Initialize the TCNT0 with 0 Value*/
            TCNT1 = 0x0000;
    1794:	ec e4       	ldi	r30, 0x4C	; 76
    1796:	f0 e0       	ldi	r31, 0x00	; 0
    1798:	11 82       	std	Z+1, r1	; 0x01
    179a:	10 82       	st	Z, r1
            /*Set Compare Register with compare value*/
            OCR1A = t_configPointer->compare_value;
    179c:	aa e4       	ldi	r26, 0x4A	; 74
    179e:	b0 e0       	ldi	r27, 0x00	; 0
    17a0:	e9 81       	ldd	r30, Y+1	; 0x01
    17a2:	fa 81       	ldd	r31, Y+2	; 0x02
    17a4:	82 81       	ldd	r24, Z+2	; 0x02
    17a6:	93 81       	ldd	r25, Z+3	; 0x03
    17a8:	11 96       	adiw	r26, 0x01	; 1
    17aa:	9c 93       	st	X, r25
    17ac:	8e 93       	st	-X, r24
            /*Set Timer in Non PWM Mode*/
            SET_BIT(TCCR1A, FOC1A);
    17ae:	af e4       	ldi	r26, 0x4F	; 79
    17b0:	b0 e0       	ldi	r27, 0x00	; 0
    17b2:	ef e4       	ldi	r30, 0x4F	; 79
    17b4:	f0 e0       	ldi	r31, 0x00	; 0
    17b6:	80 81       	ld	r24, Z
    17b8:	88 60       	ori	r24, 0x08	; 8
    17ba:	8c 93       	st	X, r24
            /*Set The timer in CTC Mode*/
            CLR_BIT(TCCR1A, WGM10);
    17bc:	af e4       	ldi	r26, 0x4F	; 79
    17be:	b0 e0       	ldi	r27, 0x00	; 0
    17c0:	ef e4       	ldi	r30, 0x4F	; 79
    17c2:	f0 e0       	ldi	r31, 0x00	; 0
    17c4:	80 81       	ld	r24, Z
    17c6:	8e 7f       	andi	r24, 0xFE	; 254
    17c8:	8c 93       	st	X, r24
            CLR_BIT(TCCR1A, WGM11);
    17ca:	af e4       	ldi	r26, 0x4F	; 79
    17cc:	b0 e0       	ldi	r27, 0x00	; 0
    17ce:	ef e4       	ldi	r30, 0x4F	; 79
    17d0:	f0 e0       	ldi	r31, 0x00	; 0
    17d2:	80 81       	ld	r24, Z
    17d4:	8d 7f       	andi	r24, 0xFD	; 253
    17d6:	8c 93       	st	X, r24
            SET_BIT(TCCR1B, WGM12);
    17d8:	ae e4       	ldi	r26, 0x4E	; 78
    17da:	b0 e0       	ldi	r27, 0x00	; 0
    17dc:	ee e4       	ldi	r30, 0x4E	; 78
    17de:	f0 e0       	ldi	r31, 0x00	; 0
    17e0:	80 81       	ld	r24, Z
    17e2:	88 60       	ori	r24, 0x08	; 8
    17e4:	8c 93       	st	X, r24
            CLR_BIT(TCCR1B, WGM13);
    17e6:	ae e4       	ldi	r26, 0x4E	; 78
    17e8:	b0 e0       	ldi	r27, 0x00	; 0
    17ea:	ee e4       	ldi	r30, 0x4E	; 78
    17ec:	f0 e0       	ldi	r31, 0x00	; 0
    17ee:	80 81       	ld	r24, Z
    17f0:	8f 7e       	andi	r24, 0xEF	; 239
    17f2:	8c 93       	st	X, r24
            /*Enable Module Timer 0 Interrupt flag; if OC0 Pin is Disabled*/
            #if(TIMER_OCx_PIN == DISABLED)
                /*Enable Interrupt Enable Module*/
                SET_BIT(TIMSK, OCIE1A);
    17f4:	a9 e5       	ldi	r26, 0x59	; 89
    17f6:	b0 e0       	ldi	r27, 0x00	; 0
    17f8:	e9 e5       	ldi	r30, 0x59	; 89
    17fa:	f0 e0       	ldi	r31, 0x00	; 0
    17fc:	80 81       	ld	r24, Z
    17fe:	80 61       	ori	r24, 0x10	; 16
    1800:	8c 93       	st	X, r24
                CLR_BIT(TIMSK, OCIE1A);
                /*Set OC0 as Output Pin*/
                SET_BIT(DDRD, PD5);
            #endif
            /*Set Compare Output Mode [non-PWM Mode] Pins*/
            TCCR1A = (TCCR1A&0b00111111) | (t_configPointer->OCx_mode<<6);
    1802:	af e4       	ldi	r26, 0x4F	; 79
    1804:	b0 e0       	ldi	r27, 0x00	; 0
    1806:	ef e4       	ldi	r30, 0x4F	; 79
    1808:	f0 e0       	ldi	r31, 0x00	; 0
    180a:	80 81       	ld	r24, Z
    180c:	28 2f       	mov	r18, r24
    180e:	2f 73       	andi	r18, 0x3F	; 63
    1810:	e9 81       	ldd	r30, Y+1	; 0x01
    1812:	fa 81       	ldd	r31, Y+2	; 0x02
    1814:	84 81       	ldd	r24, Z+4	; 0x04
    1816:	88 2f       	mov	r24, r24
    1818:	90 e0       	ldi	r25, 0x00	; 0
    181a:	00 24       	eor	r0, r0
    181c:	96 95       	lsr	r25
    181e:	87 95       	ror	r24
    1820:	07 94       	ror	r0
    1822:	96 95       	lsr	r25
    1824:	87 95       	ror	r24
    1826:	07 94       	ror	r0
    1828:	98 2f       	mov	r25, r24
    182a:	80 2d       	mov	r24, r0
    182c:	82 2b       	or	r24, r18
    182e:	8c 93       	st	X, r24
            /*Set the Timer Clock Prescaler*/
            TCCR1B = (TCCR1B&0xF8) | (t_configPointer->timer_clock&0x07);
    1830:	ae e4       	ldi	r26, 0x4E	; 78
    1832:	b0 e0       	ldi	r27, 0x00	; 0
    1834:	ee e4       	ldi	r30, 0x4E	; 78
    1836:	f0 e0       	ldi	r31, 0x00	; 0
    1838:	80 81       	ld	r24, Z
    183a:	98 2f       	mov	r25, r24
    183c:	98 7f       	andi	r25, 0xF8	; 248
    183e:	e9 81       	ldd	r30, Y+1	; 0x01
    1840:	fa 81       	ldd	r31, Y+2	; 0x02
    1842:	81 81       	ldd	r24, Z+1	; 0x01
    1844:	87 70       	andi	r24, 0x07	; 7
    1846:	89 2b       	or	r24, r25
    1848:	8c 93       	st	X, r24
            /*Enable Global Interrupt flag; Exiting Critical Section*/
            EN_GLOBAL_INTERRUPT;        
    184a:	af e5       	ldi	r26, 0x5F	; 95
    184c:	b0 e0       	ldi	r27, 0x00	; 0
    184e:	ef e5       	ldi	r30, 0x5F	; 95
    1850:	f0 e0       	ldi	r31, 0x00	; 0
    1852:	80 81       	ld	r24, Z
    1854:	80 68       	ori	r24, 0x80	; 128
    1856:	8c 93       	st	X, r24
        default:break;
    }



}
    1858:	0f 90       	pop	r0
    185a:	0f 90       	pop	r0
    185c:	0f 90       	pop	r0
    185e:	0f 90       	pop	r0
    1860:	cf 91       	pop	r28
    1862:	df 91       	pop	r29
    1864:	08 95       	ret

00001866 <__TIMER_CTC_stopTimer>:


/*** Description:-
 * Used to Disable the timer */
void __TIMER_CTC_stopTimer(uint8 timer_module)
{
    1866:	df 93       	push	r29
    1868:	cf 93       	push	r28
    186a:	00 d0       	rcall	.+0      	; 0x186c <__TIMER_CTC_stopTimer+0x6>
    186c:	0f 92       	push	r0
    186e:	cd b7       	in	r28, 0x3d	; 61
    1870:	de b7       	in	r29, 0x3e	; 62
    1872:	89 83       	std	Y+1, r24	; 0x01
    switch(timer_module)
    1874:	89 81       	ldd	r24, Y+1	; 0x01
    1876:	28 2f       	mov	r18, r24
    1878:	30 e0       	ldi	r19, 0x00	; 0
    187a:	3b 83       	std	Y+3, r19	; 0x03
    187c:	2a 83       	std	Y+2, r18	; 0x02
    187e:	8a 81       	ldd	r24, Y+2	; 0x02
    1880:	9b 81       	ldd	r25, Y+3	; 0x03
    1882:	00 97       	sbiw	r24, 0x00	; 0
    1884:	31 f0       	breq	.+12     	; 0x1892 <__TIMER_CTC_stopTimer+0x2c>
    1886:	2a 81       	ldd	r18, Y+2	; 0x02
    1888:	3b 81       	ldd	r19, Y+3	; 0x03
    188a:	21 30       	cpi	r18, 0x01	; 1
    188c:	31 05       	cpc	r19, r1
    188e:	d1 f0       	breq	.+52     	; 0x18c4 <__TIMER_CTC_stopTimer+0x5e>
    1890:	34 c0       	rjmp	.+104    	; 0x18fa <__TIMER_CTC_stopTimer+0x94>
    {
        case TIMER0:
            /*Disable Global Interrupt flag; Exiting Critical Section*/
            DIS_GLOBAL_INTERRUPT;
    1892:	af e5       	ldi	r26, 0x5F	; 95
    1894:	b0 e0       	ldi	r27, 0x00	; 0
    1896:	ef e5       	ldi	r30, 0x5F	; 95
    1898:	f0 e0       	ldi	r31, 0x00	; 0
    189a:	80 81       	ld	r24, Z
    189c:	8f 77       	andi	r24, 0x7F	; 127
    189e:	8c 93       	st	X, r24
            /*Disable Timer Clock Source: will Disable the Timer itself*/
            TCCR0 = 0x00;
    18a0:	e3 e5       	ldi	r30, 0x53	; 83
    18a2:	f0 e0       	ldi	r31, 0x00	; 0
    18a4:	10 82       	st	Z, r1
            /*for double confirming disable module interrupt flag*/
            CLR_BIT(TIMSK, OCIE0);    //TIMSK &= ~(1<<OCIE0);
    18a6:	a9 e5       	ldi	r26, 0x59	; 89
    18a8:	b0 e0       	ldi	r27, 0x00	; 0
    18aa:	e9 e5       	ldi	r30, 0x59	; 89
    18ac:	f0 e0       	ldi	r31, 0x00	; 0
    18ae:	80 81       	ld	r24, Z
    18b0:	8d 7f       	andi	r24, 0xFD	; 253
    18b2:	8c 93       	st	X, r24
            /*Enable Global Interrupt flag; Exiting Critical Section*/
            EN_GLOBAL_INTERRUPT;
    18b4:	af e5       	ldi	r26, 0x5F	; 95
    18b6:	b0 e0       	ldi	r27, 0x00	; 0
    18b8:	ef e5       	ldi	r30, 0x5F	; 95
    18ba:	f0 e0       	ldi	r31, 0x00	; 0
    18bc:	80 81       	ld	r24, Z
    18be:	80 68       	ori	r24, 0x80	; 128
    18c0:	8c 93       	st	X, r24
    18c2:	1b c0       	rjmp	.+54     	; 0x18fa <__TIMER_CTC_stopTimer+0x94>
        break;

        case TIMER1:
            /*Disable Global Interrupt flag; Entering Critical Section*/
            DIS_GLOBAL_INTERRUPT;
    18c4:	af e5       	ldi	r26, 0x5F	; 95
    18c6:	b0 e0       	ldi	r27, 0x00	; 0
    18c8:	ef e5       	ldi	r30, 0x5F	; 95
    18ca:	f0 e0       	ldi	r31, 0x00	; 0
    18cc:	80 81       	ld	r24, Z
    18ce:	8f 77       	andi	r24, 0x7F	; 127
    18d0:	8c 93       	st	X, r24
            /*Disable Timer Clock Source: will Disable the Timer itself*/
            TCCR1A = 0x00;
    18d2:	ef e4       	ldi	r30, 0x4F	; 79
    18d4:	f0 e0       	ldi	r31, 0x00	; 0
    18d6:	10 82       	st	Z, r1
            TCCR1B = 0x00;
    18d8:	ee e4       	ldi	r30, 0x4E	; 78
    18da:	f0 e0       	ldi	r31, 0x00	; 0
    18dc:	10 82       	st	Z, r1
            /*for double confirming disable module interrupt flag as well*/
            CLR_BIT(TIMSK, OCIE1A);
    18de:	a9 e5       	ldi	r26, 0x59	; 89
    18e0:	b0 e0       	ldi	r27, 0x00	; 0
    18e2:	e9 e5       	ldi	r30, 0x59	; 89
    18e4:	f0 e0       	ldi	r31, 0x00	; 0
    18e6:	80 81       	ld	r24, Z
    18e8:	8f 7e       	andi	r24, 0xEF	; 239
    18ea:	8c 93       	st	X, r24
            /*Enable Global Interrupt flag; Exiting Critical Section*/
            EN_GLOBAL_INTERRUPT;
    18ec:	af e5       	ldi	r26, 0x5F	; 95
    18ee:	b0 e0       	ldi	r27, 0x00	; 0
    18f0:	ef e5       	ldi	r30, 0x5F	; 95
    18f2:	f0 e0       	ldi	r31, 0x00	; 0
    18f4:	80 81       	ld	r24, Z
    18f6:	80 68       	ori	r24, 0x80	; 128
    18f8:	8c 93       	st	X, r24
        break;

        case TIMER2:break;
        default:break;
    }
}
    18fa:	0f 90       	pop	r0
    18fc:	0f 90       	pop	r0
    18fe:	0f 90       	pop	r0
    1900:	cf 91       	pop	r28
    1902:	df 91       	pop	r29
    1904:	08 95       	ret

00001906 <__udivmodsi4>:
    1906:	a1 e2       	ldi	r26, 0x21	; 33
    1908:	1a 2e       	mov	r1, r26
    190a:	aa 1b       	sub	r26, r26
    190c:	bb 1b       	sub	r27, r27
    190e:	fd 01       	movw	r30, r26
    1910:	0d c0       	rjmp	.+26     	; 0x192c <__udivmodsi4_ep>

00001912 <__udivmodsi4_loop>:
    1912:	aa 1f       	adc	r26, r26
    1914:	bb 1f       	adc	r27, r27
    1916:	ee 1f       	adc	r30, r30
    1918:	ff 1f       	adc	r31, r31
    191a:	a2 17       	cp	r26, r18
    191c:	b3 07       	cpc	r27, r19
    191e:	e4 07       	cpc	r30, r20
    1920:	f5 07       	cpc	r31, r21
    1922:	20 f0       	brcs	.+8      	; 0x192c <__udivmodsi4_ep>
    1924:	a2 1b       	sub	r26, r18
    1926:	b3 0b       	sbc	r27, r19
    1928:	e4 0b       	sbc	r30, r20
    192a:	f5 0b       	sbc	r31, r21

0000192c <__udivmodsi4_ep>:
    192c:	66 1f       	adc	r22, r22
    192e:	77 1f       	adc	r23, r23
    1930:	88 1f       	adc	r24, r24
    1932:	99 1f       	adc	r25, r25
    1934:	1a 94       	dec	r1
    1936:	69 f7       	brne	.-38     	; 0x1912 <__udivmodsi4_loop>
    1938:	60 95       	com	r22
    193a:	70 95       	com	r23
    193c:	80 95       	com	r24
    193e:	90 95       	com	r25
    1940:	9b 01       	movw	r18, r22
    1942:	ac 01       	movw	r20, r24
    1944:	bd 01       	movw	r22, r26
    1946:	cf 01       	movw	r24, r30
    1948:	08 95       	ret

0000194a <_exit>:
    194a:	f8 94       	cli

0000194c <__stop_program>:
    194c:	ff cf       	rjmp	.-2      	; 0x194c <__stop_program>
