
Motor_ControlSystem.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001a10  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000130  00800060  00001a10  00001aa4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000007  00800190  00800190  00001bd4  2**0
                  ALLOC
  3 .stab         00001830  00000000  00000000  00001bd4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000106e  00000000  00000000  00003404  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000160  00000000  00000000  00004472  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001b6  00000000  00000000  000045d2  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001f0d  00000000  00000000  00004788  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000010d2  00000000  00000000  00006695  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001030  00000000  00000000  00007767  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000180  00000000  00000000  00008798  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002e6  00000000  00000000  00008918  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000008f6  00000000  00000000  00008bfe  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  000094f4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 a0 0b 	jmp	0x1740	; 0x1740 <__vector_18>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e0 e1       	ldi	r30, 0x10	; 16
      68:	fa e1       	ldi	r31, 0x1A	; 26
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a0 39       	cpi	r26, 0x90	; 144
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a0 e9       	ldi	r26, 0x90	; 144
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a7 39       	cpi	r26, 0x97	; 151
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 00 0b 	call	0x1600	; 0x1600 <main>
      8a:	0c 94 06 0d 	jmp	0x1a0c	; 0x1a0c <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 cf 0c 	jmp	0x199e	; 0x199e <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	af e6       	ldi	r26, 0x6F	; 111
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 eb 0c 	jmp	0x19d6	; 0x19d6 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 db 0c 	jmp	0x19b6	; 0x19b6 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 e6 05 	call	0xbcc	; 0xbcc <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 e6 05 	call	0xbcc	; 0xbcc <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 11 05 	call	0xa22	; 0xa22 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 f7 0c 	jmp	0x19ee	; 0x19ee <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 db 0c 	jmp	0x19b6	; 0x19b6 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 e6 05 	call	0xbcc	; 0xbcc <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 e6 05 	call	0xbcc	; 0xbcc <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 11 05 	call	0xa22	; 0xa22 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 f7 0c 	jmp	0x19ee	; 0x19ee <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 cf 0c 	jmp	0x199e	; 0x199e <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 e6 05 	call	0xbcc	; 0xbcc <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 e6 05 	call	0xbcc	; 0xbcc <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	8f e6       	ldi	r24, 0x6F	; 111
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 11 05 	call	0xa22	; 0xa22 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 eb 0c 	jmp	0x19d6	; 0x19d6 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 d7 0c 	jmp	0x19ae	; 0x19ae <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 e6 05 	call	0xbcc	; 0xbcc <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 e6 05 	call	0xbcc	; 0xbcc <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	6f e6       	ldi	r22, 0x6F	; 111
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 11 05 	call	0xa22	; 0xa22 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 f3 0c 	jmp	0x19e6	; 0x19e6 <__epilogue_restores__+0x10>

0000078a <__gesf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 db 0c 	jmp	0x19b6	; 0x19b6 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 e6 05 	call	0xbcc	; 0xbcc <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 e6 05 	call	0xbcc	; 0xbcc <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gesf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gesf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 5e 06 	call	0xcbc	; 0xcbc <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gesf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 f7 0c 	jmp	0x19ee	; 0x19ee <__epilogue_restores__+0x18>

000007ea <__fixsfsi>:
     7ea:	ac e0       	ldi	r26, 0x0C	; 12
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 df 0c 	jmp	0x19be	; 0x19be <__prologue_saves__+0x20>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	ce 01       	movw	r24, r28
     800:	01 96       	adiw	r24, 0x01	; 1
     802:	be 01       	movw	r22, r28
     804:	6b 5f       	subi	r22, 0xFB	; 251
     806:	7f 4f       	sbci	r23, 0xFF	; 255
     808:	0e 94 e6 05 	call	0xbcc	; 0xbcc <__unpack_f>
     80c:	8d 81       	ldd	r24, Y+5	; 0x05
     80e:	82 30       	cpi	r24, 0x02	; 2
     810:	61 f1       	breq	.+88     	; 0x86a <__fixsfsi+0x80>
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	50 f1       	brcs	.+84     	; 0x86a <__fixsfsi+0x80>
     816:	84 30       	cpi	r24, 0x04	; 4
     818:	21 f4       	brne	.+8      	; 0x822 <__fixsfsi+0x38>
     81a:	8e 81       	ldd	r24, Y+6	; 0x06
     81c:	88 23       	and	r24, r24
     81e:	51 f1       	breq	.+84     	; 0x874 <__fixsfsi+0x8a>
     820:	2e c0       	rjmp	.+92     	; 0x87e <__fixsfsi+0x94>
     822:	2f 81       	ldd	r18, Y+7	; 0x07
     824:	38 85       	ldd	r19, Y+8	; 0x08
     826:	37 fd       	sbrc	r19, 7
     828:	20 c0       	rjmp	.+64     	; 0x86a <__fixsfsi+0x80>
     82a:	6e 81       	ldd	r22, Y+6	; 0x06
     82c:	2f 31       	cpi	r18, 0x1F	; 31
     82e:	31 05       	cpc	r19, r1
     830:	1c f0       	brlt	.+6      	; 0x838 <__fixsfsi+0x4e>
     832:	66 23       	and	r22, r22
     834:	f9 f0       	breq	.+62     	; 0x874 <__fixsfsi+0x8a>
     836:	23 c0       	rjmp	.+70     	; 0x87e <__fixsfsi+0x94>
     838:	8e e1       	ldi	r24, 0x1E	; 30
     83a:	90 e0       	ldi	r25, 0x00	; 0
     83c:	82 1b       	sub	r24, r18
     83e:	93 0b       	sbc	r25, r19
     840:	29 85       	ldd	r18, Y+9	; 0x09
     842:	3a 85       	ldd	r19, Y+10	; 0x0a
     844:	4b 85       	ldd	r20, Y+11	; 0x0b
     846:	5c 85       	ldd	r21, Y+12	; 0x0c
     848:	04 c0       	rjmp	.+8      	; 0x852 <__fixsfsi+0x68>
     84a:	56 95       	lsr	r21
     84c:	47 95       	ror	r20
     84e:	37 95       	ror	r19
     850:	27 95       	ror	r18
     852:	8a 95       	dec	r24
     854:	d2 f7       	brpl	.-12     	; 0x84a <__fixsfsi+0x60>
     856:	66 23       	and	r22, r22
     858:	b1 f0       	breq	.+44     	; 0x886 <__fixsfsi+0x9c>
     85a:	50 95       	com	r21
     85c:	40 95       	com	r20
     85e:	30 95       	com	r19
     860:	21 95       	neg	r18
     862:	3f 4f       	sbci	r19, 0xFF	; 255
     864:	4f 4f       	sbci	r20, 0xFF	; 255
     866:	5f 4f       	sbci	r21, 0xFF	; 255
     868:	0e c0       	rjmp	.+28     	; 0x886 <__fixsfsi+0x9c>
     86a:	20 e0       	ldi	r18, 0x00	; 0
     86c:	30 e0       	ldi	r19, 0x00	; 0
     86e:	40 e0       	ldi	r20, 0x00	; 0
     870:	50 e0       	ldi	r21, 0x00	; 0
     872:	09 c0       	rjmp	.+18     	; 0x886 <__fixsfsi+0x9c>
     874:	2f ef       	ldi	r18, 0xFF	; 255
     876:	3f ef       	ldi	r19, 0xFF	; 255
     878:	4f ef       	ldi	r20, 0xFF	; 255
     87a:	5f e7       	ldi	r21, 0x7F	; 127
     87c:	04 c0       	rjmp	.+8      	; 0x886 <__fixsfsi+0x9c>
     87e:	20 e0       	ldi	r18, 0x00	; 0
     880:	30 e0       	ldi	r19, 0x00	; 0
     882:	40 e0       	ldi	r20, 0x00	; 0
     884:	50 e8       	ldi	r21, 0x80	; 128
     886:	b9 01       	movw	r22, r18
     888:	ca 01       	movw	r24, r20
     88a:	2c 96       	adiw	r28, 0x0c	; 12
     88c:	e2 e0       	ldi	r30, 0x02	; 2
     88e:	0c 94 fb 0c 	jmp	0x19f6	; 0x19f6 <__epilogue_restores__+0x20>

00000892 <__floatunsisf>:
     892:	a8 e0       	ldi	r26, 0x08	; 8
     894:	b0 e0       	ldi	r27, 0x00	; 0
     896:	ef e4       	ldi	r30, 0x4F	; 79
     898:	f4 e0       	ldi	r31, 0x04	; 4
     89a:	0c 94 d7 0c 	jmp	0x19ae	; 0x19ae <__prologue_saves__+0x10>
     89e:	7b 01       	movw	r14, r22
     8a0:	8c 01       	movw	r16, r24
     8a2:	61 15       	cp	r22, r1
     8a4:	71 05       	cpc	r23, r1
     8a6:	81 05       	cpc	r24, r1
     8a8:	91 05       	cpc	r25, r1
     8aa:	19 f4       	brne	.+6      	; 0x8b2 <__floatunsisf+0x20>
     8ac:	82 e0       	ldi	r24, 0x02	; 2
     8ae:	89 83       	std	Y+1, r24	; 0x01
     8b0:	60 c0       	rjmp	.+192    	; 0x972 <__floatunsisf+0xe0>
     8b2:	83 e0       	ldi	r24, 0x03	; 3
     8b4:	89 83       	std	Y+1, r24	; 0x01
     8b6:	8e e1       	ldi	r24, 0x1E	; 30
     8b8:	c8 2e       	mov	r12, r24
     8ba:	d1 2c       	mov	r13, r1
     8bc:	dc 82       	std	Y+4, r13	; 0x04
     8be:	cb 82       	std	Y+3, r12	; 0x03
     8c0:	ed 82       	std	Y+5, r14	; 0x05
     8c2:	fe 82       	std	Y+6, r15	; 0x06
     8c4:	0f 83       	std	Y+7, r16	; 0x07
     8c6:	18 87       	std	Y+8, r17	; 0x08
     8c8:	c8 01       	movw	r24, r16
     8ca:	b7 01       	movw	r22, r14
     8cc:	0e 94 c2 04 	call	0x984	; 0x984 <__clzsi2>
     8d0:	fc 01       	movw	r30, r24
     8d2:	31 97       	sbiw	r30, 0x01	; 1
     8d4:	f7 ff       	sbrs	r31, 7
     8d6:	3b c0       	rjmp	.+118    	; 0x94e <__floatunsisf+0xbc>
     8d8:	22 27       	eor	r18, r18
     8da:	33 27       	eor	r19, r19
     8dc:	2e 1b       	sub	r18, r30
     8de:	3f 0b       	sbc	r19, r31
     8e0:	57 01       	movw	r10, r14
     8e2:	68 01       	movw	r12, r16
     8e4:	02 2e       	mov	r0, r18
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__floatunsisf+0x5e>
     8e8:	d6 94       	lsr	r13
     8ea:	c7 94       	ror	r12
     8ec:	b7 94       	ror	r11
     8ee:	a7 94       	ror	r10
     8f0:	0a 94       	dec	r0
     8f2:	d2 f7       	brpl	.-12     	; 0x8e8 <__floatunsisf+0x56>
     8f4:	40 e0       	ldi	r20, 0x00	; 0
     8f6:	50 e0       	ldi	r21, 0x00	; 0
     8f8:	60 e0       	ldi	r22, 0x00	; 0
     8fa:	70 e0       	ldi	r23, 0x00	; 0
     8fc:	81 e0       	ldi	r24, 0x01	; 1
     8fe:	90 e0       	ldi	r25, 0x00	; 0
     900:	a0 e0       	ldi	r26, 0x00	; 0
     902:	b0 e0       	ldi	r27, 0x00	; 0
     904:	04 c0       	rjmp	.+8      	; 0x90e <__floatunsisf+0x7c>
     906:	88 0f       	add	r24, r24
     908:	99 1f       	adc	r25, r25
     90a:	aa 1f       	adc	r26, r26
     90c:	bb 1f       	adc	r27, r27
     90e:	2a 95       	dec	r18
     910:	d2 f7       	brpl	.-12     	; 0x906 <__floatunsisf+0x74>
     912:	01 97       	sbiw	r24, 0x01	; 1
     914:	a1 09       	sbc	r26, r1
     916:	b1 09       	sbc	r27, r1
     918:	8e 21       	and	r24, r14
     91a:	9f 21       	and	r25, r15
     91c:	a0 23       	and	r26, r16
     91e:	b1 23       	and	r27, r17
     920:	00 97       	sbiw	r24, 0x00	; 0
     922:	a1 05       	cpc	r26, r1
     924:	b1 05       	cpc	r27, r1
     926:	21 f0       	breq	.+8      	; 0x930 <__floatunsisf+0x9e>
     928:	41 e0       	ldi	r20, 0x01	; 1
     92a:	50 e0       	ldi	r21, 0x00	; 0
     92c:	60 e0       	ldi	r22, 0x00	; 0
     92e:	70 e0       	ldi	r23, 0x00	; 0
     930:	4a 29       	or	r20, r10
     932:	5b 29       	or	r21, r11
     934:	6c 29       	or	r22, r12
     936:	7d 29       	or	r23, r13
     938:	4d 83       	std	Y+5, r20	; 0x05
     93a:	5e 83       	std	Y+6, r21	; 0x06
     93c:	6f 83       	std	Y+7, r22	; 0x07
     93e:	78 87       	std	Y+8, r23	; 0x08
     940:	8e e1       	ldi	r24, 0x1E	; 30
     942:	90 e0       	ldi	r25, 0x00	; 0
     944:	8e 1b       	sub	r24, r30
     946:	9f 0b       	sbc	r25, r31
     948:	9c 83       	std	Y+4, r25	; 0x04
     94a:	8b 83       	std	Y+3, r24	; 0x03
     94c:	12 c0       	rjmp	.+36     	; 0x972 <__floatunsisf+0xe0>
     94e:	30 97       	sbiw	r30, 0x00	; 0
     950:	81 f0       	breq	.+32     	; 0x972 <__floatunsisf+0xe0>
     952:	0e 2e       	mov	r0, r30
     954:	04 c0       	rjmp	.+8      	; 0x95e <__floatunsisf+0xcc>
     956:	ee 0c       	add	r14, r14
     958:	ff 1c       	adc	r15, r15
     95a:	00 1f       	adc	r16, r16
     95c:	11 1f       	adc	r17, r17
     95e:	0a 94       	dec	r0
     960:	d2 f7       	brpl	.-12     	; 0x956 <__floatunsisf+0xc4>
     962:	ed 82       	std	Y+5, r14	; 0x05
     964:	fe 82       	std	Y+6, r15	; 0x06
     966:	0f 83       	std	Y+7, r16	; 0x07
     968:	18 87       	std	Y+8, r17	; 0x08
     96a:	ce 1a       	sub	r12, r30
     96c:	df 0a       	sbc	r13, r31
     96e:	dc 82       	std	Y+4, r13	; 0x04
     970:	cb 82       	std	Y+3, r12	; 0x03
     972:	1a 82       	std	Y+2, r1	; 0x02
     974:	ce 01       	movw	r24, r28
     976:	01 96       	adiw	r24, 0x01	; 1
     978:	0e 94 11 05 	call	0xa22	; 0xa22 <__pack_f>
     97c:	28 96       	adiw	r28, 0x08	; 8
     97e:	ea e0       	ldi	r30, 0x0A	; 10
     980:	0c 94 f3 0c 	jmp	0x19e6	; 0x19e6 <__epilogue_restores__+0x10>

00000984 <__clzsi2>:
     984:	ef 92       	push	r14
     986:	ff 92       	push	r15
     988:	0f 93       	push	r16
     98a:	1f 93       	push	r17
     98c:	7b 01       	movw	r14, r22
     98e:	8c 01       	movw	r16, r24
     990:	80 e0       	ldi	r24, 0x00	; 0
     992:	e8 16       	cp	r14, r24
     994:	80 e0       	ldi	r24, 0x00	; 0
     996:	f8 06       	cpc	r15, r24
     998:	81 e0       	ldi	r24, 0x01	; 1
     99a:	08 07       	cpc	r16, r24
     99c:	80 e0       	ldi	r24, 0x00	; 0
     99e:	18 07       	cpc	r17, r24
     9a0:	88 f4       	brcc	.+34     	; 0x9c4 <__clzsi2+0x40>
     9a2:	8f ef       	ldi	r24, 0xFF	; 255
     9a4:	e8 16       	cp	r14, r24
     9a6:	f1 04       	cpc	r15, r1
     9a8:	01 05       	cpc	r16, r1
     9aa:	11 05       	cpc	r17, r1
     9ac:	31 f0       	breq	.+12     	; 0x9ba <__clzsi2+0x36>
     9ae:	28 f0       	brcs	.+10     	; 0x9ba <__clzsi2+0x36>
     9b0:	88 e0       	ldi	r24, 0x08	; 8
     9b2:	90 e0       	ldi	r25, 0x00	; 0
     9b4:	a0 e0       	ldi	r26, 0x00	; 0
     9b6:	b0 e0       	ldi	r27, 0x00	; 0
     9b8:	17 c0       	rjmp	.+46     	; 0x9e8 <__clzsi2+0x64>
     9ba:	80 e0       	ldi	r24, 0x00	; 0
     9bc:	90 e0       	ldi	r25, 0x00	; 0
     9be:	a0 e0       	ldi	r26, 0x00	; 0
     9c0:	b0 e0       	ldi	r27, 0x00	; 0
     9c2:	12 c0       	rjmp	.+36     	; 0x9e8 <__clzsi2+0x64>
     9c4:	80 e0       	ldi	r24, 0x00	; 0
     9c6:	e8 16       	cp	r14, r24
     9c8:	80 e0       	ldi	r24, 0x00	; 0
     9ca:	f8 06       	cpc	r15, r24
     9cc:	80 e0       	ldi	r24, 0x00	; 0
     9ce:	08 07       	cpc	r16, r24
     9d0:	81 e0       	ldi	r24, 0x01	; 1
     9d2:	18 07       	cpc	r17, r24
     9d4:	28 f0       	brcs	.+10     	; 0x9e0 <__clzsi2+0x5c>
     9d6:	88 e1       	ldi	r24, 0x18	; 24
     9d8:	90 e0       	ldi	r25, 0x00	; 0
     9da:	a0 e0       	ldi	r26, 0x00	; 0
     9dc:	b0 e0       	ldi	r27, 0x00	; 0
     9de:	04 c0       	rjmp	.+8      	; 0x9e8 <__clzsi2+0x64>
     9e0:	80 e1       	ldi	r24, 0x10	; 16
     9e2:	90 e0       	ldi	r25, 0x00	; 0
     9e4:	a0 e0       	ldi	r26, 0x00	; 0
     9e6:	b0 e0       	ldi	r27, 0x00	; 0
     9e8:	20 e2       	ldi	r18, 0x20	; 32
     9ea:	30 e0       	ldi	r19, 0x00	; 0
     9ec:	40 e0       	ldi	r20, 0x00	; 0
     9ee:	50 e0       	ldi	r21, 0x00	; 0
     9f0:	28 1b       	sub	r18, r24
     9f2:	39 0b       	sbc	r19, r25
     9f4:	4a 0b       	sbc	r20, r26
     9f6:	5b 0b       	sbc	r21, r27
     9f8:	04 c0       	rjmp	.+8      	; 0xa02 <__clzsi2+0x7e>
     9fa:	16 95       	lsr	r17
     9fc:	07 95       	ror	r16
     9fe:	f7 94       	ror	r15
     a00:	e7 94       	ror	r14
     a02:	8a 95       	dec	r24
     a04:	d2 f7       	brpl	.-12     	; 0x9fa <__clzsi2+0x76>
     a06:	f7 01       	movw	r30, r14
     a08:	e9 58       	subi	r30, 0x89	; 137
     a0a:	ff 4f       	sbci	r31, 0xFF	; 255
     a0c:	80 81       	ld	r24, Z
     a0e:	28 1b       	sub	r18, r24
     a10:	31 09       	sbc	r19, r1
     a12:	41 09       	sbc	r20, r1
     a14:	51 09       	sbc	r21, r1
     a16:	c9 01       	movw	r24, r18
     a18:	1f 91       	pop	r17
     a1a:	0f 91       	pop	r16
     a1c:	ff 90       	pop	r15
     a1e:	ef 90       	pop	r14
     a20:	08 95       	ret

00000a22 <__pack_f>:
     a22:	df 92       	push	r13
     a24:	ef 92       	push	r14
     a26:	ff 92       	push	r15
     a28:	0f 93       	push	r16
     a2a:	1f 93       	push	r17
     a2c:	fc 01       	movw	r30, r24
     a2e:	e4 80       	ldd	r14, Z+4	; 0x04
     a30:	f5 80       	ldd	r15, Z+5	; 0x05
     a32:	06 81       	ldd	r16, Z+6	; 0x06
     a34:	17 81       	ldd	r17, Z+7	; 0x07
     a36:	d1 80       	ldd	r13, Z+1	; 0x01
     a38:	80 81       	ld	r24, Z
     a3a:	82 30       	cpi	r24, 0x02	; 2
     a3c:	48 f4       	brcc	.+18     	; 0xa50 <__pack_f+0x2e>
     a3e:	80 e0       	ldi	r24, 0x00	; 0
     a40:	90 e0       	ldi	r25, 0x00	; 0
     a42:	a0 e1       	ldi	r26, 0x10	; 16
     a44:	b0 e0       	ldi	r27, 0x00	; 0
     a46:	e8 2a       	or	r14, r24
     a48:	f9 2a       	or	r15, r25
     a4a:	0a 2b       	or	r16, r26
     a4c:	1b 2b       	or	r17, r27
     a4e:	a5 c0       	rjmp	.+330    	; 0xb9a <__pack_f+0x178>
     a50:	84 30       	cpi	r24, 0x04	; 4
     a52:	09 f4       	brne	.+2      	; 0xa56 <__pack_f+0x34>
     a54:	9f c0       	rjmp	.+318    	; 0xb94 <__pack_f+0x172>
     a56:	82 30       	cpi	r24, 0x02	; 2
     a58:	21 f4       	brne	.+8      	; 0xa62 <__pack_f+0x40>
     a5a:	ee 24       	eor	r14, r14
     a5c:	ff 24       	eor	r15, r15
     a5e:	87 01       	movw	r16, r14
     a60:	05 c0       	rjmp	.+10     	; 0xa6c <__pack_f+0x4a>
     a62:	e1 14       	cp	r14, r1
     a64:	f1 04       	cpc	r15, r1
     a66:	01 05       	cpc	r16, r1
     a68:	11 05       	cpc	r17, r1
     a6a:	19 f4       	brne	.+6      	; 0xa72 <__pack_f+0x50>
     a6c:	e0 e0       	ldi	r30, 0x00	; 0
     a6e:	f0 e0       	ldi	r31, 0x00	; 0
     a70:	96 c0       	rjmp	.+300    	; 0xb9e <__pack_f+0x17c>
     a72:	62 81       	ldd	r22, Z+2	; 0x02
     a74:	73 81       	ldd	r23, Z+3	; 0x03
     a76:	9f ef       	ldi	r25, 0xFF	; 255
     a78:	62 38       	cpi	r22, 0x82	; 130
     a7a:	79 07       	cpc	r23, r25
     a7c:	0c f0       	brlt	.+2      	; 0xa80 <__pack_f+0x5e>
     a7e:	5b c0       	rjmp	.+182    	; 0xb36 <__pack_f+0x114>
     a80:	22 e8       	ldi	r18, 0x82	; 130
     a82:	3f ef       	ldi	r19, 0xFF	; 255
     a84:	26 1b       	sub	r18, r22
     a86:	37 0b       	sbc	r19, r23
     a88:	2a 31       	cpi	r18, 0x1A	; 26
     a8a:	31 05       	cpc	r19, r1
     a8c:	2c f0       	brlt	.+10     	; 0xa98 <__pack_f+0x76>
     a8e:	20 e0       	ldi	r18, 0x00	; 0
     a90:	30 e0       	ldi	r19, 0x00	; 0
     a92:	40 e0       	ldi	r20, 0x00	; 0
     a94:	50 e0       	ldi	r21, 0x00	; 0
     a96:	2a c0       	rjmp	.+84     	; 0xaec <__pack_f+0xca>
     a98:	b8 01       	movw	r22, r16
     a9a:	a7 01       	movw	r20, r14
     a9c:	02 2e       	mov	r0, r18
     a9e:	04 c0       	rjmp	.+8      	; 0xaa8 <__pack_f+0x86>
     aa0:	76 95       	lsr	r23
     aa2:	67 95       	ror	r22
     aa4:	57 95       	ror	r21
     aa6:	47 95       	ror	r20
     aa8:	0a 94       	dec	r0
     aaa:	d2 f7       	brpl	.-12     	; 0xaa0 <__pack_f+0x7e>
     aac:	81 e0       	ldi	r24, 0x01	; 1
     aae:	90 e0       	ldi	r25, 0x00	; 0
     ab0:	a0 e0       	ldi	r26, 0x00	; 0
     ab2:	b0 e0       	ldi	r27, 0x00	; 0
     ab4:	04 c0       	rjmp	.+8      	; 0xabe <__pack_f+0x9c>
     ab6:	88 0f       	add	r24, r24
     ab8:	99 1f       	adc	r25, r25
     aba:	aa 1f       	adc	r26, r26
     abc:	bb 1f       	adc	r27, r27
     abe:	2a 95       	dec	r18
     ac0:	d2 f7       	brpl	.-12     	; 0xab6 <__pack_f+0x94>
     ac2:	01 97       	sbiw	r24, 0x01	; 1
     ac4:	a1 09       	sbc	r26, r1
     ac6:	b1 09       	sbc	r27, r1
     ac8:	8e 21       	and	r24, r14
     aca:	9f 21       	and	r25, r15
     acc:	a0 23       	and	r26, r16
     ace:	b1 23       	and	r27, r17
     ad0:	00 97       	sbiw	r24, 0x00	; 0
     ad2:	a1 05       	cpc	r26, r1
     ad4:	b1 05       	cpc	r27, r1
     ad6:	21 f0       	breq	.+8      	; 0xae0 <__pack_f+0xbe>
     ad8:	81 e0       	ldi	r24, 0x01	; 1
     ada:	90 e0       	ldi	r25, 0x00	; 0
     adc:	a0 e0       	ldi	r26, 0x00	; 0
     ade:	b0 e0       	ldi	r27, 0x00	; 0
     ae0:	9a 01       	movw	r18, r20
     ae2:	ab 01       	movw	r20, r22
     ae4:	28 2b       	or	r18, r24
     ae6:	39 2b       	or	r19, r25
     ae8:	4a 2b       	or	r20, r26
     aea:	5b 2b       	or	r21, r27
     aec:	da 01       	movw	r26, r20
     aee:	c9 01       	movw	r24, r18
     af0:	8f 77       	andi	r24, 0x7F	; 127
     af2:	90 70       	andi	r25, 0x00	; 0
     af4:	a0 70       	andi	r26, 0x00	; 0
     af6:	b0 70       	andi	r27, 0x00	; 0
     af8:	80 34       	cpi	r24, 0x40	; 64
     afa:	91 05       	cpc	r25, r1
     afc:	a1 05       	cpc	r26, r1
     afe:	b1 05       	cpc	r27, r1
     b00:	39 f4       	brne	.+14     	; 0xb10 <__pack_f+0xee>
     b02:	27 ff       	sbrs	r18, 7
     b04:	09 c0       	rjmp	.+18     	; 0xb18 <__pack_f+0xf6>
     b06:	20 5c       	subi	r18, 0xC0	; 192
     b08:	3f 4f       	sbci	r19, 0xFF	; 255
     b0a:	4f 4f       	sbci	r20, 0xFF	; 255
     b0c:	5f 4f       	sbci	r21, 0xFF	; 255
     b0e:	04 c0       	rjmp	.+8      	; 0xb18 <__pack_f+0xf6>
     b10:	21 5c       	subi	r18, 0xC1	; 193
     b12:	3f 4f       	sbci	r19, 0xFF	; 255
     b14:	4f 4f       	sbci	r20, 0xFF	; 255
     b16:	5f 4f       	sbci	r21, 0xFF	; 255
     b18:	e0 e0       	ldi	r30, 0x00	; 0
     b1a:	f0 e0       	ldi	r31, 0x00	; 0
     b1c:	20 30       	cpi	r18, 0x00	; 0
     b1e:	a0 e0       	ldi	r26, 0x00	; 0
     b20:	3a 07       	cpc	r19, r26
     b22:	a0 e0       	ldi	r26, 0x00	; 0
     b24:	4a 07       	cpc	r20, r26
     b26:	a0 e4       	ldi	r26, 0x40	; 64
     b28:	5a 07       	cpc	r21, r26
     b2a:	10 f0       	brcs	.+4      	; 0xb30 <__pack_f+0x10e>
     b2c:	e1 e0       	ldi	r30, 0x01	; 1
     b2e:	f0 e0       	ldi	r31, 0x00	; 0
     b30:	79 01       	movw	r14, r18
     b32:	8a 01       	movw	r16, r20
     b34:	27 c0       	rjmp	.+78     	; 0xb84 <__pack_f+0x162>
     b36:	60 38       	cpi	r22, 0x80	; 128
     b38:	71 05       	cpc	r23, r1
     b3a:	64 f5       	brge	.+88     	; 0xb94 <__pack_f+0x172>
     b3c:	fb 01       	movw	r30, r22
     b3e:	e1 58       	subi	r30, 0x81	; 129
     b40:	ff 4f       	sbci	r31, 0xFF	; 255
     b42:	d8 01       	movw	r26, r16
     b44:	c7 01       	movw	r24, r14
     b46:	8f 77       	andi	r24, 0x7F	; 127
     b48:	90 70       	andi	r25, 0x00	; 0
     b4a:	a0 70       	andi	r26, 0x00	; 0
     b4c:	b0 70       	andi	r27, 0x00	; 0
     b4e:	80 34       	cpi	r24, 0x40	; 64
     b50:	91 05       	cpc	r25, r1
     b52:	a1 05       	cpc	r26, r1
     b54:	b1 05       	cpc	r27, r1
     b56:	39 f4       	brne	.+14     	; 0xb66 <__pack_f+0x144>
     b58:	e7 fe       	sbrs	r14, 7
     b5a:	0d c0       	rjmp	.+26     	; 0xb76 <__pack_f+0x154>
     b5c:	80 e4       	ldi	r24, 0x40	; 64
     b5e:	90 e0       	ldi	r25, 0x00	; 0
     b60:	a0 e0       	ldi	r26, 0x00	; 0
     b62:	b0 e0       	ldi	r27, 0x00	; 0
     b64:	04 c0       	rjmp	.+8      	; 0xb6e <__pack_f+0x14c>
     b66:	8f e3       	ldi	r24, 0x3F	; 63
     b68:	90 e0       	ldi	r25, 0x00	; 0
     b6a:	a0 e0       	ldi	r26, 0x00	; 0
     b6c:	b0 e0       	ldi	r27, 0x00	; 0
     b6e:	e8 0e       	add	r14, r24
     b70:	f9 1e       	adc	r15, r25
     b72:	0a 1f       	adc	r16, r26
     b74:	1b 1f       	adc	r17, r27
     b76:	17 ff       	sbrs	r17, 7
     b78:	05 c0       	rjmp	.+10     	; 0xb84 <__pack_f+0x162>
     b7a:	16 95       	lsr	r17
     b7c:	07 95       	ror	r16
     b7e:	f7 94       	ror	r15
     b80:	e7 94       	ror	r14
     b82:	31 96       	adiw	r30, 0x01	; 1
     b84:	87 e0       	ldi	r24, 0x07	; 7
     b86:	16 95       	lsr	r17
     b88:	07 95       	ror	r16
     b8a:	f7 94       	ror	r15
     b8c:	e7 94       	ror	r14
     b8e:	8a 95       	dec	r24
     b90:	d1 f7       	brne	.-12     	; 0xb86 <__pack_f+0x164>
     b92:	05 c0       	rjmp	.+10     	; 0xb9e <__pack_f+0x17c>
     b94:	ee 24       	eor	r14, r14
     b96:	ff 24       	eor	r15, r15
     b98:	87 01       	movw	r16, r14
     b9a:	ef ef       	ldi	r30, 0xFF	; 255
     b9c:	f0 e0       	ldi	r31, 0x00	; 0
     b9e:	6e 2f       	mov	r22, r30
     ba0:	67 95       	ror	r22
     ba2:	66 27       	eor	r22, r22
     ba4:	67 95       	ror	r22
     ba6:	90 2f       	mov	r25, r16
     ba8:	9f 77       	andi	r25, 0x7F	; 127
     baa:	d7 94       	ror	r13
     bac:	dd 24       	eor	r13, r13
     bae:	d7 94       	ror	r13
     bb0:	8e 2f       	mov	r24, r30
     bb2:	86 95       	lsr	r24
     bb4:	49 2f       	mov	r20, r25
     bb6:	46 2b       	or	r20, r22
     bb8:	58 2f       	mov	r21, r24
     bba:	5d 29       	or	r21, r13
     bbc:	b7 01       	movw	r22, r14
     bbe:	ca 01       	movw	r24, r20
     bc0:	1f 91       	pop	r17
     bc2:	0f 91       	pop	r16
     bc4:	ff 90       	pop	r15
     bc6:	ef 90       	pop	r14
     bc8:	df 90       	pop	r13
     bca:	08 95       	ret

00000bcc <__unpack_f>:
     bcc:	fc 01       	movw	r30, r24
     bce:	db 01       	movw	r26, r22
     bd0:	40 81       	ld	r20, Z
     bd2:	51 81       	ldd	r21, Z+1	; 0x01
     bd4:	22 81       	ldd	r18, Z+2	; 0x02
     bd6:	62 2f       	mov	r22, r18
     bd8:	6f 77       	andi	r22, 0x7F	; 127
     bda:	70 e0       	ldi	r23, 0x00	; 0
     bdc:	22 1f       	adc	r18, r18
     bde:	22 27       	eor	r18, r18
     be0:	22 1f       	adc	r18, r18
     be2:	93 81       	ldd	r25, Z+3	; 0x03
     be4:	89 2f       	mov	r24, r25
     be6:	88 0f       	add	r24, r24
     be8:	82 2b       	or	r24, r18
     bea:	28 2f       	mov	r18, r24
     bec:	30 e0       	ldi	r19, 0x00	; 0
     bee:	99 1f       	adc	r25, r25
     bf0:	99 27       	eor	r25, r25
     bf2:	99 1f       	adc	r25, r25
     bf4:	11 96       	adiw	r26, 0x01	; 1
     bf6:	9c 93       	st	X, r25
     bf8:	11 97       	sbiw	r26, 0x01	; 1
     bfa:	21 15       	cp	r18, r1
     bfc:	31 05       	cpc	r19, r1
     bfe:	a9 f5       	brne	.+106    	; 0xc6a <__unpack_f+0x9e>
     c00:	41 15       	cp	r20, r1
     c02:	51 05       	cpc	r21, r1
     c04:	61 05       	cpc	r22, r1
     c06:	71 05       	cpc	r23, r1
     c08:	11 f4       	brne	.+4      	; 0xc0e <__unpack_f+0x42>
     c0a:	82 e0       	ldi	r24, 0x02	; 2
     c0c:	37 c0       	rjmp	.+110    	; 0xc7c <__unpack_f+0xb0>
     c0e:	82 e8       	ldi	r24, 0x82	; 130
     c10:	9f ef       	ldi	r25, 0xFF	; 255
     c12:	13 96       	adiw	r26, 0x03	; 3
     c14:	9c 93       	st	X, r25
     c16:	8e 93       	st	-X, r24
     c18:	12 97       	sbiw	r26, 0x02	; 2
     c1a:	9a 01       	movw	r18, r20
     c1c:	ab 01       	movw	r20, r22
     c1e:	67 e0       	ldi	r22, 0x07	; 7
     c20:	22 0f       	add	r18, r18
     c22:	33 1f       	adc	r19, r19
     c24:	44 1f       	adc	r20, r20
     c26:	55 1f       	adc	r21, r21
     c28:	6a 95       	dec	r22
     c2a:	d1 f7       	brne	.-12     	; 0xc20 <__unpack_f+0x54>
     c2c:	83 e0       	ldi	r24, 0x03	; 3
     c2e:	8c 93       	st	X, r24
     c30:	0d c0       	rjmp	.+26     	; 0xc4c <__unpack_f+0x80>
     c32:	22 0f       	add	r18, r18
     c34:	33 1f       	adc	r19, r19
     c36:	44 1f       	adc	r20, r20
     c38:	55 1f       	adc	r21, r21
     c3a:	12 96       	adiw	r26, 0x02	; 2
     c3c:	8d 91       	ld	r24, X+
     c3e:	9c 91       	ld	r25, X
     c40:	13 97       	sbiw	r26, 0x03	; 3
     c42:	01 97       	sbiw	r24, 0x01	; 1
     c44:	13 96       	adiw	r26, 0x03	; 3
     c46:	9c 93       	st	X, r25
     c48:	8e 93       	st	-X, r24
     c4a:	12 97       	sbiw	r26, 0x02	; 2
     c4c:	20 30       	cpi	r18, 0x00	; 0
     c4e:	80 e0       	ldi	r24, 0x00	; 0
     c50:	38 07       	cpc	r19, r24
     c52:	80 e0       	ldi	r24, 0x00	; 0
     c54:	48 07       	cpc	r20, r24
     c56:	80 e4       	ldi	r24, 0x40	; 64
     c58:	58 07       	cpc	r21, r24
     c5a:	58 f3       	brcs	.-42     	; 0xc32 <__unpack_f+0x66>
     c5c:	14 96       	adiw	r26, 0x04	; 4
     c5e:	2d 93       	st	X+, r18
     c60:	3d 93       	st	X+, r19
     c62:	4d 93       	st	X+, r20
     c64:	5c 93       	st	X, r21
     c66:	17 97       	sbiw	r26, 0x07	; 7
     c68:	08 95       	ret
     c6a:	2f 3f       	cpi	r18, 0xFF	; 255
     c6c:	31 05       	cpc	r19, r1
     c6e:	79 f4       	brne	.+30     	; 0xc8e <__unpack_f+0xc2>
     c70:	41 15       	cp	r20, r1
     c72:	51 05       	cpc	r21, r1
     c74:	61 05       	cpc	r22, r1
     c76:	71 05       	cpc	r23, r1
     c78:	19 f4       	brne	.+6      	; 0xc80 <__unpack_f+0xb4>
     c7a:	84 e0       	ldi	r24, 0x04	; 4
     c7c:	8c 93       	st	X, r24
     c7e:	08 95       	ret
     c80:	64 ff       	sbrs	r22, 4
     c82:	03 c0       	rjmp	.+6      	; 0xc8a <__unpack_f+0xbe>
     c84:	81 e0       	ldi	r24, 0x01	; 1
     c86:	8c 93       	st	X, r24
     c88:	12 c0       	rjmp	.+36     	; 0xcae <__unpack_f+0xe2>
     c8a:	1c 92       	st	X, r1
     c8c:	10 c0       	rjmp	.+32     	; 0xcae <__unpack_f+0xe2>
     c8e:	2f 57       	subi	r18, 0x7F	; 127
     c90:	30 40       	sbci	r19, 0x00	; 0
     c92:	13 96       	adiw	r26, 0x03	; 3
     c94:	3c 93       	st	X, r19
     c96:	2e 93       	st	-X, r18
     c98:	12 97       	sbiw	r26, 0x02	; 2
     c9a:	83 e0       	ldi	r24, 0x03	; 3
     c9c:	8c 93       	st	X, r24
     c9e:	87 e0       	ldi	r24, 0x07	; 7
     ca0:	44 0f       	add	r20, r20
     ca2:	55 1f       	adc	r21, r21
     ca4:	66 1f       	adc	r22, r22
     ca6:	77 1f       	adc	r23, r23
     ca8:	8a 95       	dec	r24
     caa:	d1 f7       	brne	.-12     	; 0xca0 <__unpack_f+0xd4>
     cac:	70 64       	ori	r23, 0x40	; 64
     cae:	14 96       	adiw	r26, 0x04	; 4
     cb0:	4d 93       	st	X+, r20
     cb2:	5d 93       	st	X+, r21
     cb4:	6d 93       	st	X+, r22
     cb6:	7c 93       	st	X, r23
     cb8:	17 97       	sbiw	r26, 0x07	; 7
     cba:	08 95       	ret

00000cbc <__fpcmp_parts_f>:
     cbc:	1f 93       	push	r17
     cbe:	dc 01       	movw	r26, r24
     cc0:	fb 01       	movw	r30, r22
     cc2:	9c 91       	ld	r25, X
     cc4:	92 30       	cpi	r25, 0x02	; 2
     cc6:	08 f4       	brcc	.+2      	; 0xcca <__fpcmp_parts_f+0xe>
     cc8:	47 c0       	rjmp	.+142    	; 0xd58 <__fpcmp_parts_f+0x9c>
     cca:	80 81       	ld	r24, Z
     ccc:	82 30       	cpi	r24, 0x02	; 2
     cce:	08 f4       	brcc	.+2      	; 0xcd2 <__fpcmp_parts_f+0x16>
     cd0:	43 c0       	rjmp	.+134    	; 0xd58 <__fpcmp_parts_f+0x9c>
     cd2:	94 30       	cpi	r25, 0x04	; 4
     cd4:	51 f4       	brne	.+20     	; 0xcea <__fpcmp_parts_f+0x2e>
     cd6:	11 96       	adiw	r26, 0x01	; 1
     cd8:	1c 91       	ld	r17, X
     cda:	84 30       	cpi	r24, 0x04	; 4
     cdc:	99 f5       	brne	.+102    	; 0xd44 <__fpcmp_parts_f+0x88>
     cde:	81 81       	ldd	r24, Z+1	; 0x01
     ce0:	68 2f       	mov	r22, r24
     ce2:	70 e0       	ldi	r23, 0x00	; 0
     ce4:	61 1b       	sub	r22, r17
     ce6:	71 09       	sbc	r23, r1
     ce8:	3f c0       	rjmp	.+126    	; 0xd68 <__fpcmp_parts_f+0xac>
     cea:	84 30       	cpi	r24, 0x04	; 4
     cec:	21 f0       	breq	.+8      	; 0xcf6 <__fpcmp_parts_f+0x3a>
     cee:	92 30       	cpi	r25, 0x02	; 2
     cf0:	31 f4       	brne	.+12     	; 0xcfe <__fpcmp_parts_f+0x42>
     cf2:	82 30       	cpi	r24, 0x02	; 2
     cf4:	b9 f1       	breq	.+110    	; 0xd64 <__fpcmp_parts_f+0xa8>
     cf6:	81 81       	ldd	r24, Z+1	; 0x01
     cf8:	88 23       	and	r24, r24
     cfa:	89 f1       	breq	.+98     	; 0xd5e <__fpcmp_parts_f+0xa2>
     cfc:	2d c0       	rjmp	.+90     	; 0xd58 <__fpcmp_parts_f+0x9c>
     cfe:	11 96       	adiw	r26, 0x01	; 1
     d00:	1c 91       	ld	r17, X
     d02:	11 97       	sbiw	r26, 0x01	; 1
     d04:	82 30       	cpi	r24, 0x02	; 2
     d06:	f1 f0       	breq	.+60     	; 0xd44 <__fpcmp_parts_f+0x88>
     d08:	81 81       	ldd	r24, Z+1	; 0x01
     d0a:	18 17       	cp	r17, r24
     d0c:	d9 f4       	brne	.+54     	; 0xd44 <__fpcmp_parts_f+0x88>
     d0e:	12 96       	adiw	r26, 0x02	; 2
     d10:	2d 91       	ld	r18, X+
     d12:	3c 91       	ld	r19, X
     d14:	13 97       	sbiw	r26, 0x03	; 3
     d16:	82 81       	ldd	r24, Z+2	; 0x02
     d18:	93 81       	ldd	r25, Z+3	; 0x03
     d1a:	82 17       	cp	r24, r18
     d1c:	93 07       	cpc	r25, r19
     d1e:	94 f0       	brlt	.+36     	; 0xd44 <__fpcmp_parts_f+0x88>
     d20:	28 17       	cp	r18, r24
     d22:	39 07       	cpc	r19, r25
     d24:	bc f0       	brlt	.+46     	; 0xd54 <__fpcmp_parts_f+0x98>
     d26:	14 96       	adiw	r26, 0x04	; 4
     d28:	8d 91       	ld	r24, X+
     d2a:	9d 91       	ld	r25, X+
     d2c:	0d 90       	ld	r0, X+
     d2e:	bc 91       	ld	r27, X
     d30:	a0 2d       	mov	r26, r0
     d32:	24 81       	ldd	r18, Z+4	; 0x04
     d34:	35 81       	ldd	r19, Z+5	; 0x05
     d36:	46 81       	ldd	r20, Z+6	; 0x06
     d38:	57 81       	ldd	r21, Z+7	; 0x07
     d3a:	28 17       	cp	r18, r24
     d3c:	39 07       	cpc	r19, r25
     d3e:	4a 07       	cpc	r20, r26
     d40:	5b 07       	cpc	r21, r27
     d42:	18 f4       	brcc	.+6      	; 0xd4a <__fpcmp_parts_f+0x8e>
     d44:	11 23       	and	r17, r17
     d46:	41 f0       	breq	.+16     	; 0xd58 <__fpcmp_parts_f+0x9c>
     d48:	0a c0       	rjmp	.+20     	; 0xd5e <__fpcmp_parts_f+0xa2>
     d4a:	82 17       	cp	r24, r18
     d4c:	93 07       	cpc	r25, r19
     d4e:	a4 07       	cpc	r26, r20
     d50:	b5 07       	cpc	r27, r21
     d52:	40 f4       	brcc	.+16     	; 0xd64 <__fpcmp_parts_f+0xa8>
     d54:	11 23       	and	r17, r17
     d56:	19 f0       	breq	.+6      	; 0xd5e <__fpcmp_parts_f+0xa2>
     d58:	61 e0       	ldi	r22, 0x01	; 1
     d5a:	70 e0       	ldi	r23, 0x00	; 0
     d5c:	05 c0       	rjmp	.+10     	; 0xd68 <__fpcmp_parts_f+0xac>
     d5e:	6f ef       	ldi	r22, 0xFF	; 255
     d60:	7f ef       	ldi	r23, 0xFF	; 255
     d62:	02 c0       	rjmp	.+4      	; 0xd68 <__fpcmp_parts_f+0xac>
     d64:	60 e0       	ldi	r22, 0x00	; 0
     d66:	70 e0       	ldi	r23, 0x00	; 0
     d68:	cb 01       	movw	r24, r22
     d6a:	1f 91       	pop	r17
     d6c:	08 95       	ret

00000d6e <__ADC_init>:

/*** Description:-
 * ADC_init function to Enable ADC Module, Fu Args: "enum clock_prescaler" 
 * clock_prescaler values = NO_CLK, F_CPU, F_CPU_8, F_CPU_64, F_CPU_256, F_CPU_1024 */
void   __ADC_init(clock_ADC clock_prescaler)
{
     d6e:	df 93       	push	r29
     d70:	cf 93       	push	r28
     d72:	0f 92       	push	r0
     d74:	cd b7       	in	r28, 0x3d	; 61
     d76:	de b7       	in	r29, 0x3e	; 62
     d78:	89 83       	std	Y+1, r24	; 0x01
    /*Set the Reference Selection Value according to given config*/
    ADMUX = (ADMUX&0b00111111) | (REF_SELECTION<<6);
     d7a:	a7 e2       	ldi	r26, 0x27	; 39
     d7c:	b0 e0       	ldi	r27, 0x00	; 0
     d7e:	e7 e2       	ldi	r30, 0x27	; 39
     d80:	f0 e0       	ldi	r31, 0x00	; 0
     d82:	80 81       	ld	r24, Z
     d84:	8f 73       	andi	r24, 0x3F	; 63
     d86:	80 64       	ori	r24, 0x40	; 64
     d88:	8c 93       	st	X, r24
    
    /*Set ADLAR Value according to Resolution Configuration*/
    #if(ADC_RESOLUTION == _10_BITS)
        CLR_BIT(ADMUX, ADLAR);
    #elif(ADC_RESOLUTION == _8_BITS)
        SET_BIT(ADMUX, ADLAR); //If *bits neglect the LSB bits
     d8a:	a7 e2       	ldi	r26, 0x27	; 39
     d8c:	b0 e0       	ldi	r27, 0x00	; 0
     d8e:	e7 e2       	ldi	r30, 0x27	; 39
     d90:	f0 e0       	ldi	r31, 0x00	; 0
     d92:	80 81       	ld	r24, Z
     d94:	80 62       	ori	r24, 0x20	; 32
     d96:	8c 93       	st	X, r24
    #endif

    /*Enable/Disable Interrupt according to Static configs*/
    #ifdef POLLING_BASED
        CLR_BIT(ADCSRA, ADIE);
     d98:	a6 e2       	ldi	r26, 0x26	; 38
     d9a:	b0 e0       	ldi	r27, 0x00	; 0
     d9c:	e6 e2       	ldi	r30, 0x26	; 38
     d9e:	f0 e0       	ldi	r31, 0x00	; 0
     da0:	80 81       	ld	r24, Z
     da2:	87 7f       	andi	r24, 0xF7	; 247
     da4:	8c 93       	st	X, r24
        SET_BIT(ADCSRA, ADIE);
        EN_GLOBAL_INTERRUPT;
    #endif
    
    /*Enable the ADC Module*/
    SET_BIT(ADCSRA, ADEN);
     da6:	a6 e2       	ldi	r26, 0x26	; 38
     da8:	b0 e0       	ldi	r27, 0x00	; 0
     daa:	e6 e2       	ldi	r30, 0x26	; 38
     dac:	f0 e0       	ldi	r31, 0x00	; 0
     dae:	80 81       	ld	r24, Z
     db0:	80 68       	ori	r24, 0x80	; 128
     db2:	8c 93       	st	X, r24
    
    /*Set the ADC Prescaler=8 Fadc = 125KHz*/
    ADCSRA = (ADCSRA&0b11111000) | (clock_prescaler);
     db4:	a6 e2       	ldi	r26, 0x26	; 38
     db6:	b0 e0       	ldi	r27, 0x00	; 0
     db8:	e6 e2       	ldi	r30, 0x26	; 38
     dba:	f0 e0       	ldi	r31, 0x00	; 0
     dbc:	80 81       	ld	r24, Z
     dbe:	98 2f       	mov	r25, r24
     dc0:	98 7f       	andi	r25, 0xF8	; 248
     dc2:	89 81       	ldd	r24, Y+1	; 0x01
     dc4:	89 2b       	or	r24, r25
     dc6:	8c 93       	st	X, r24
}
     dc8:	0f 90       	pop	r0
     dca:	cf 91       	pop	r28
     dcc:	df 91       	pop	r29
     dce:	08 95       	ret

00000dd0 <__ADC_PB_readChannel_8bits>:

        /*** Description:-
        * Read the ADC Channel Analogue Value, Fu Args: "channel_number" 
        * channel_number values = ADC0, ADC1, ADC2, ADC3, ADC4, ADC5, ADC6, ADC7 */
        uint8  __ADC_PB_readChannel_8bits(channel_ADC channel_number)
        {
     dd0:	df 93       	push	r29
     dd2:	cf 93       	push	r28
     dd4:	0f 92       	push	r0
     dd6:	cd b7       	in	r28, 0x3d	; 61
     dd8:	de b7       	in	r29, 0x3e	; 62
     dda:	89 83       	std	Y+1, r24	; 0x01
            /*Set the desired ADC Channel*/
            ADMUX = (ADMUX & 0b11100000) | (channel_number & 0b00011111);
     ddc:	a7 e2       	ldi	r26, 0x27	; 39
     dde:	b0 e0       	ldi	r27, 0x00	; 0
     de0:	e7 e2       	ldi	r30, 0x27	; 39
     de2:	f0 e0       	ldi	r31, 0x00	; 0
     de4:	80 81       	ld	r24, Z
     de6:	98 2f       	mov	r25, r24
     de8:	90 7e       	andi	r25, 0xE0	; 224
     dea:	89 81       	ldd	r24, Y+1	; 0x01
     dec:	8f 71       	andi	r24, 0x1F	; 31
     dee:	89 2b       	or	r24, r25
     df0:	8c 93       	st	X, r24
            /*ADC Start Conversion*/
            SET_BIT(ADCSRA,ADSC);
     df2:	a6 e2       	ldi	r26, 0x26	; 38
     df4:	b0 e0       	ldi	r27, 0x00	; 0
     df6:	e6 e2       	ldi	r30, 0x26	; 38
     df8:	f0 e0       	ldi	r31, 0x00	; 0
     dfa:	80 81       	ld	r24, Z
     dfc:	80 64       	ori	r24, 0x40	; 64
     dfe:	8c 93       	st	X, r24
            /*Wait until ADC Module Execution done and Flag is raised*/
            while( READ_BIT(ADCSRA,ADIF)==LOW );
     e00:	e6 e2       	ldi	r30, 0x26	; 38
     e02:	f0 e0       	ldi	r31, 0x00	; 0
     e04:	80 81       	ld	r24, Z
     e06:	88 2f       	mov	r24, r24
     e08:	90 e0       	ldi	r25, 0x00	; 0
     e0a:	80 71       	andi	r24, 0x10	; 16
     e0c:	90 70       	andi	r25, 0x00	; 0
     e0e:	95 95       	asr	r25
     e10:	87 95       	ror	r24
     e12:	95 95       	asr	r25
     e14:	87 95       	ror	r24
     e16:	95 95       	asr	r25
     e18:	87 95       	ror	r24
     e1a:	95 95       	asr	r25
     e1c:	87 95       	ror	r24
     e1e:	00 97       	sbiw	r24, 0x00	; 0
     e20:	79 f3       	breq	.-34     	; 0xe00 <__ADC_PB_readChannel_8bits+0x30>
            /*Clear the Raised flag*/
            SET_BIT(ADCSRA,ADIF);
     e22:	a6 e2       	ldi	r26, 0x26	; 38
     e24:	b0 e0       	ldi	r27, 0x00	; 0
     e26:	e6 e2       	ldi	r30, 0x26	; 38
     e28:	f0 e0       	ldi	r31, 0x00	; 0
     e2a:	80 81       	ld	r24, Z
     e2c:	80 61       	ori	r24, 0x10	; 16
     e2e:	8c 93       	st	X, r24

            /*Return the fetched Value*/
            return ADCH; 
     e30:	e5 e2       	ldi	r30, 0x25	; 37
     e32:	f0 e0       	ldi	r31, 0x00	; 0
     e34:	80 81       	ld	r24, Z
        }
     e36:	0f 90       	pop	r0
     e38:	cf 91       	pop	r28
     e3a:	df 91       	pop	r29
     e3c:	08 95       	ret

00000e3e <__DIO_setPinDirection>:
/** Functions Definitions ****************************************************/

/*** Description:-
 * Adjust the DDR_x Registers for Desired PXX with needed direction */
void  __DIO_setPinDirection(uint8 port_name,uint8 pin_name,uint8 direction)
{
     e3e:	df 93       	push	r29
     e40:	cf 93       	push	r28
     e42:	00 d0       	rcall	.+0      	; 0xe44 <__DIO_setPinDirection+0x6>
     e44:	0f 92       	push	r0
     e46:	cd b7       	in	r28, 0x3d	; 61
     e48:	de b7       	in	r29, 0x3e	; 62
     e4a:	89 83       	std	Y+1, r24	; 0x01
     e4c:	6a 83       	std	Y+2, r22	; 0x02
     e4e:	4b 83       	std	Y+3, r20	; 0x03
    if( direction == OUTPUT_PIN )
     e50:	8b 81       	ldd	r24, Y+3	; 0x03
     e52:	81 30       	cpi	r24, 0x01	; 1
     e54:	29 f5       	brne	.+74     	; 0xea0 <__DIO_setPinDirection+0x62>
    {
        SET_BIT(*ddr_regs[port_name], pin_name);
     e56:	89 81       	ldd	r24, Y+1	; 0x01
     e58:	88 2f       	mov	r24, r24
     e5a:	90 e0       	ldi	r25, 0x00	; 0
     e5c:	88 0f       	add	r24, r24
     e5e:	99 1f       	adc	r25, r25
     e60:	fc 01       	movw	r30, r24
     e62:	e9 58       	subi	r30, 0x89	; 137
     e64:	fe 4f       	sbci	r31, 0xFE	; 254
     e66:	a0 81       	ld	r26, Z
     e68:	b1 81       	ldd	r27, Z+1	; 0x01
     e6a:	89 81       	ldd	r24, Y+1	; 0x01
     e6c:	88 2f       	mov	r24, r24
     e6e:	90 e0       	ldi	r25, 0x00	; 0
     e70:	88 0f       	add	r24, r24
     e72:	99 1f       	adc	r25, r25
     e74:	fc 01       	movw	r30, r24
     e76:	e9 58       	subi	r30, 0x89	; 137
     e78:	fe 4f       	sbci	r31, 0xFE	; 254
     e7a:	01 90       	ld	r0, Z+
     e7c:	f0 81       	ld	r31, Z
     e7e:	e0 2d       	mov	r30, r0
     e80:	80 81       	ld	r24, Z
     e82:	48 2f       	mov	r20, r24
     e84:	8a 81       	ldd	r24, Y+2	; 0x02
     e86:	28 2f       	mov	r18, r24
     e88:	30 e0       	ldi	r19, 0x00	; 0
     e8a:	81 e0       	ldi	r24, 0x01	; 1
     e8c:	90 e0       	ldi	r25, 0x00	; 0
     e8e:	02 2e       	mov	r0, r18
     e90:	02 c0       	rjmp	.+4      	; 0xe96 <__DIO_setPinDirection+0x58>
     e92:	88 0f       	add	r24, r24
     e94:	99 1f       	adc	r25, r25
     e96:	0a 94       	dec	r0
     e98:	e2 f7       	brpl	.-8      	; 0xe92 <__DIO_setPinDirection+0x54>
     e9a:	84 2b       	or	r24, r20
     e9c:	8c 93       	st	X, r24
     e9e:	28 c0       	rjmp	.+80     	; 0xef0 <__DIO_setPinDirection+0xb2>
    }
    else if( direction == INPUT_PIN )
     ea0:	8b 81       	ldd	r24, Y+3	; 0x03
     ea2:	88 23       	and	r24, r24
     ea4:	29 f5       	brne	.+74     	; 0xef0 <__DIO_setPinDirection+0xb2>
    {
        CLR_BIT(*ddr_regs[port_name], pin_name);
     ea6:	89 81       	ldd	r24, Y+1	; 0x01
     ea8:	88 2f       	mov	r24, r24
     eaa:	90 e0       	ldi	r25, 0x00	; 0
     eac:	88 0f       	add	r24, r24
     eae:	99 1f       	adc	r25, r25
     eb0:	fc 01       	movw	r30, r24
     eb2:	e9 58       	subi	r30, 0x89	; 137
     eb4:	fe 4f       	sbci	r31, 0xFE	; 254
     eb6:	a0 81       	ld	r26, Z
     eb8:	b1 81       	ldd	r27, Z+1	; 0x01
     eba:	89 81       	ldd	r24, Y+1	; 0x01
     ebc:	88 2f       	mov	r24, r24
     ebe:	90 e0       	ldi	r25, 0x00	; 0
     ec0:	88 0f       	add	r24, r24
     ec2:	99 1f       	adc	r25, r25
     ec4:	fc 01       	movw	r30, r24
     ec6:	e9 58       	subi	r30, 0x89	; 137
     ec8:	fe 4f       	sbci	r31, 0xFE	; 254
     eca:	01 90       	ld	r0, Z+
     ecc:	f0 81       	ld	r31, Z
     ece:	e0 2d       	mov	r30, r0
     ed0:	80 81       	ld	r24, Z
     ed2:	48 2f       	mov	r20, r24
     ed4:	8a 81       	ldd	r24, Y+2	; 0x02
     ed6:	28 2f       	mov	r18, r24
     ed8:	30 e0       	ldi	r19, 0x00	; 0
     eda:	81 e0       	ldi	r24, 0x01	; 1
     edc:	90 e0       	ldi	r25, 0x00	; 0
     ede:	02 2e       	mov	r0, r18
     ee0:	02 c0       	rjmp	.+4      	; 0xee6 <__DIO_setPinDirection+0xa8>
     ee2:	88 0f       	add	r24, r24
     ee4:	99 1f       	adc	r25, r25
     ee6:	0a 94       	dec	r0
     ee8:	e2 f7       	brpl	.-8      	; 0xee2 <__DIO_setPinDirection+0xa4>
     eea:	80 95       	com	r24
     eec:	84 23       	and	r24, r20
     eee:	8c 93       	st	X, r24
    }
    else{}
}
     ef0:	0f 90       	pop	r0
     ef2:	0f 90       	pop	r0
     ef4:	0f 90       	pop	r0
     ef6:	cf 91       	pop	r28
     ef8:	df 91       	pop	r29
     efa:	08 95       	ret

00000efc <__DIO_enableInternalPullupResistance>:


/*** Description:-
 * Enable Internal Pullup Resistor for the Input Pin */
void  __DIO_enableInternalPullupResistance(uint8 port_name,uint8 pin_name)
{
     efc:	df 93       	push	r29
     efe:	cf 93       	push	r28
     f00:	00 d0       	rcall	.+0      	; 0xf02 <__DIO_enableInternalPullupResistance+0x6>
     f02:	cd b7       	in	r28, 0x3d	; 61
     f04:	de b7       	in	r29, 0x3e	; 62
     f06:	89 83       	std	Y+1, r24	; 0x01
     f08:	6a 83       	std	Y+2, r22	; 0x02
    SET_BIT(*port_regs[port_name], pin_name);
     f0a:	89 81       	ldd	r24, Y+1	; 0x01
     f0c:	88 2f       	mov	r24, r24
     f0e:	90 e0       	ldi	r25, 0x00	; 0
     f10:	88 0f       	add	r24, r24
     f12:	99 1f       	adc	r25, r25
     f14:	fc 01       	movw	r30, r24
     f16:	e9 57       	subi	r30, 0x79	; 121
     f18:	fe 4f       	sbci	r31, 0xFE	; 254
     f1a:	a0 81       	ld	r26, Z
     f1c:	b1 81       	ldd	r27, Z+1	; 0x01
     f1e:	89 81       	ldd	r24, Y+1	; 0x01
     f20:	88 2f       	mov	r24, r24
     f22:	90 e0       	ldi	r25, 0x00	; 0
     f24:	88 0f       	add	r24, r24
     f26:	99 1f       	adc	r25, r25
     f28:	fc 01       	movw	r30, r24
     f2a:	e9 57       	subi	r30, 0x79	; 121
     f2c:	fe 4f       	sbci	r31, 0xFE	; 254
     f2e:	01 90       	ld	r0, Z+
     f30:	f0 81       	ld	r31, Z
     f32:	e0 2d       	mov	r30, r0
     f34:	80 81       	ld	r24, Z
     f36:	48 2f       	mov	r20, r24
     f38:	8a 81       	ldd	r24, Y+2	; 0x02
     f3a:	28 2f       	mov	r18, r24
     f3c:	30 e0       	ldi	r19, 0x00	; 0
     f3e:	81 e0       	ldi	r24, 0x01	; 1
     f40:	90 e0       	ldi	r25, 0x00	; 0
     f42:	02 2e       	mov	r0, r18
     f44:	02 c0       	rjmp	.+4      	; 0xf4a <__DIO_enableInternalPullupResistance+0x4e>
     f46:	88 0f       	add	r24, r24
     f48:	99 1f       	adc	r25, r25
     f4a:	0a 94       	dec	r0
     f4c:	e2 f7       	brpl	.-8      	; 0xf46 <__DIO_enableInternalPullupResistance+0x4a>
     f4e:	84 2b       	or	r24, r20
     f50:	8c 93       	st	X, r24
}
     f52:	0f 90       	pop	r0
     f54:	0f 90       	pop	r0
     f56:	cf 91       	pop	r28
     f58:	df 91       	pop	r29
     f5a:	08 95       	ret

00000f5c <__DIO_writeOutputPinValue>:


/*** Description:-
 * Output a Digital Value over the Output Pin */
void  __DIO_writeOutputPinValue(uint8 port_name,uint8 pin_name,uint8 value)
{
     f5c:	df 93       	push	r29
     f5e:	cf 93       	push	r28
     f60:	00 d0       	rcall	.+0      	; 0xf62 <__DIO_writeOutputPinValue+0x6>
     f62:	0f 92       	push	r0
     f64:	cd b7       	in	r28, 0x3d	; 61
     f66:	de b7       	in	r29, 0x3e	; 62
     f68:	89 83       	std	Y+1, r24	; 0x01
     f6a:	6a 83       	std	Y+2, r22	; 0x02
     f6c:	4b 83       	std	Y+3, r20	; 0x03
    if( value == HIGH )
     f6e:	8b 81       	ldd	r24, Y+3	; 0x03
     f70:	81 30       	cpi	r24, 0x01	; 1
     f72:	29 f5       	brne	.+74     	; 0xfbe <__DIO_writeOutputPinValue+0x62>
    {
        SET_BIT(*port_regs[port_name], pin_name);
     f74:	89 81       	ldd	r24, Y+1	; 0x01
     f76:	88 2f       	mov	r24, r24
     f78:	90 e0       	ldi	r25, 0x00	; 0
     f7a:	88 0f       	add	r24, r24
     f7c:	99 1f       	adc	r25, r25
     f7e:	fc 01       	movw	r30, r24
     f80:	e9 57       	subi	r30, 0x79	; 121
     f82:	fe 4f       	sbci	r31, 0xFE	; 254
     f84:	a0 81       	ld	r26, Z
     f86:	b1 81       	ldd	r27, Z+1	; 0x01
     f88:	89 81       	ldd	r24, Y+1	; 0x01
     f8a:	88 2f       	mov	r24, r24
     f8c:	90 e0       	ldi	r25, 0x00	; 0
     f8e:	88 0f       	add	r24, r24
     f90:	99 1f       	adc	r25, r25
     f92:	fc 01       	movw	r30, r24
     f94:	e9 57       	subi	r30, 0x79	; 121
     f96:	fe 4f       	sbci	r31, 0xFE	; 254
     f98:	01 90       	ld	r0, Z+
     f9a:	f0 81       	ld	r31, Z
     f9c:	e0 2d       	mov	r30, r0
     f9e:	80 81       	ld	r24, Z
     fa0:	48 2f       	mov	r20, r24
     fa2:	8a 81       	ldd	r24, Y+2	; 0x02
     fa4:	28 2f       	mov	r18, r24
     fa6:	30 e0       	ldi	r19, 0x00	; 0
     fa8:	81 e0       	ldi	r24, 0x01	; 1
     faa:	90 e0       	ldi	r25, 0x00	; 0
     fac:	02 2e       	mov	r0, r18
     fae:	02 c0       	rjmp	.+4      	; 0xfb4 <__DIO_writeOutputPinValue+0x58>
     fb0:	88 0f       	add	r24, r24
     fb2:	99 1f       	adc	r25, r25
     fb4:	0a 94       	dec	r0
     fb6:	e2 f7       	brpl	.-8      	; 0xfb0 <__DIO_writeOutputPinValue+0x54>
     fb8:	84 2b       	or	r24, r20
     fba:	8c 93       	st	X, r24
     fbc:	28 c0       	rjmp	.+80     	; 0x100e <__DIO_writeOutputPinValue+0xb2>
    }
    else if( value == LOW )
     fbe:	8b 81       	ldd	r24, Y+3	; 0x03
     fc0:	88 23       	and	r24, r24
     fc2:	29 f5       	brne	.+74     	; 0x100e <__DIO_writeOutputPinValue+0xb2>
    {
        CLR_BIT(*port_regs[port_name], pin_name);
     fc4:	89 81       	ldd	r24, Y+1	; 0x01
     fc6:	88 2f       	mov	r24, r24
     fc8:	90 e0       	ldi	r25, 0x00	; 0
     fca:	88 0f       	add	r24, r24
     fcc:	99 1f       	adc	r25, r25
     fce:	fc 01       	movw	r30, r24
     fd0:	e9 57       	subi	r30, 0x79	; 121
     fd2:	fe 4f       	sbci	r31, 0xFE	; 254
     fd4:	a0 81       	ld	r26, Z
     fd6:	b1 81       	ldd	r27, Z+1	; 0x01
     fd8:	89 81       	ldd	r24, Y+1	; 0x01
     fda:	88 2f       	mov	r24, r24
     fdc:	90 e0       	ldi	r25, 0x00	; 0
     fde:	88 0f       	add	r24, r24
     fe0:	99 1f       	adc	r25, r25
     fe2:	fc 01       	movw	r30, r24
     fe4:	e9 57       	subi	r30, 0x79	; 121
     fe6:	fe 4f       	sbci	r31, 0xFE	; 254
     fe8:	01 90       	ld	r0, Z+
     fea:	f0 81       	ld	r31, Z
     fec:	e0 2d       	mov	r30, r0
     fee:	80 81       	ld	r24, Z
     ff0:	48 2f       	mov	r20, r24
     ff2:	8a 81       	ldd	r24, Y+2	; 0x02
     ff4:	28 2f       	mov	r18, r24
     ff6:	30 e0       	ldi	r19, 0x00	; 0
     ff8:	81 e0       	ldi	r24, 0x01	; 1
     ffa:	90 e0       	ldi	r25, 0x00	; 0
     ffc:	02 2e       	mov	r0, r18
     ffe:	02 c0       	rjmp	.+4      	; 0x1004 <__DIO_writeOutputPinValue+0xa8>
    1000:	88 0f       	add	r24, r24
    1002:	99 1f       	adc	r25, r25
    1004:	0a 94       	dec	r0
    1006:	e2 f7       	brpl	.-8      	; 0x1000 <__DIO_writeOutputPinValue+0xa4>
    1008:	80 95       	com	r24
    100a:	84 23       	and	r24, r20
    100c:	8c 93       	st	X, r24
    }
    else{}
}
    100e:	0f 90       	pop	r0
    1010:	0f 90       	pop	r0
    1012:	0f 90       	pop	r0
    1014:	cf 91       	pop	r28
    1016:	df 91       	pop	r29
    1018:	08 95       	ret

0000101a <__DIO_readInputPinValue>:


/*** Description:-
 * Read and fetch the Digital Value from a Pin */
uint8 __DIO_readInputPinValue(uint8 port_name,uint8 pin_name)
{
    101a:	df 93       	push	r29
    101c:	cf 93       	push	r28
    101e:	00 d0       	rcall	.+0      	; 0x1020 <__DIO_readInputPinValue+0x6>
    1020:	cd b7       	in	r28, 0x3d	; 61
    1022:	de b7       	in	r29, 0x3e	; 62
    1024:	89 83       	std	Y+1, r24	; 0x01
    1026:	6a 83       	std	Y+2, r22	; 0x02
    return READ_BIT(*pin_regs[port_name], pin_name);
    1028:	89 81       	ldd	r24, Y+1	; 0x01
    102a:	88 2f       	mov	r24, r24
    102c:	90 e0       	ldi	r25, 0x00	; 0
    102e:	88 0f       	add	r24, r24
    1030:	99 1f       	adc	r25, r25
    1032:	fc 01       	movw	r30, r24
    1034:	e1 58       	subi	r30, 0x81	; 129
    1036:	fe 4f       	sbci	r31, 0xFE	; 254
    1038:	01 90       	ld	r0, Z+
    103a:	f0 81       	ld	r31, Z
    103c:	e0 2d       	mov	r30, r0
    103e:	80 81       	ld	r24, Z
    1040:	48 2f       	mov	r20, r24
    1042:	50 e0       	ldi	r21, 0x00	; 0
    1044:	8a 81       	ldd	r24, Y+2	; 0x02
    1046:	28 2f       	mov	r18, r24
    1048:	30 e0       	ldi	r19, 0x00	; 0
    104a:	81 e0       	ldi	r24, 0x01	; 1
    104c:	90 e0       	ldi	r25, 0x00	; 0
    104e:	02 c0       	rjmp	.+4      	; 0x1054 <__DIO_readInputPinValue+0x3a>
    1050:	88 0f       	add	r24, r24
    1052:	99 1f       	adc	r25, r25
    1054:	2a 95       	dec	r18
    1056:	e2 f7       	brpl	.-8      	; 0x1050 <__DIO_readInputPinValue+0x36>
    1058:	9a 01       	movw	r18, r20
    105a:	28 23       	and	r18, r24
    105c:	39 23       	and	r19, r25
    105e:	8a 81       	ldd	r24, Y+2	; 0x02
    1060:	88 2f       	mov	r24, r24
    1062:	90 e0       	ldi	r25, 0x00	; 0
    1064:	a9 01       	movw	r20, r18
    1066:	02 c0       	rjmp	.+4      	; 0x106c <__DIO_readInputPinValue+0x52>
    1068:	55 95       	asr	r21
    106a:	47 95       	ror	r20
    106c:	8a 95       	dec	r24
    106e:	e2 f7       	brpl	.-8      	; 0x1068 <__DIO_readInputPinValue+0x4e>
    1070:	ca 01       	movw	r24, r20
}
    1072:	0f 90       	pop	r0
    1074:	0f 90       	pop	r0
    1076:	cf 91       	pop	r28
    1078:	df 91       	pop	r29
    107a:	08 95       	ret

0000107c <__DIO_toggleOutputPinValue>:


/*** Description:-
 * Toggle the Value of Output Pin */
void  __DIO_toggleOutputPinValue(uint8 port_name,uint8 pin_name)
{
    107c:	df 93       	push	r29
    107e:	cf 93       	push	r28
    1080:	00 d0       	rcall	.+0      	; 0x1082 <__DIO_toggleOutputPinValue+0x6>
    1082:	cd b7       	in	r28, 0x3d	; 61
    1084:	de b7       	in	r29, 0x3e	; 62
    1086:	89 83       	std	Y+1, r24	; 0x01
    1088:	6a 83       	std	Y+2, r22	; 0x02
    TGL_BIT(*port_regs[port_name], pin_name);
    108a:	89 81       	ldd	r24, Y+1	; 0x01
    108c:	88 2f       	mov	r24, r24
    108e:	90 e0       	ldi	r25, 0x00	; 0
    1090:	88 0f       	add	r24, r24
    1092:	99 1f       	adc	r25, r25
    1094:	fc 01       	movw	r30, r24
    1096:	e9 57       	subi	r30, 0x79	; 121
    1098:	fe 4f       	sbci	r31, 0xFE	; 254
    109a:	a0 81       	ld	r26, Z
    109c:	b1 81       	ldd	r27, Z+1	; 0x01
    109e:	89 81       	ldd	r24, Y+1	; 0x01
    10a0:	88 2f       	mov	r24, r24
    10a2:	90 e0       	ldi	r25, 0x00	; 0
    10a4:	88 0f       	add	r24, r24
    10a6:	99 1f       	adc	r25, r25
    10a8:	fc 01       	movw	r30, r24
    10aa:	e9 57       	subi	r30, 0x79	; 121
    10ac:	fe 4f       	sbci	r31, 0xFE	; 254
    10ae:	01 90       	ld	r0, Z+
    10b0:	f0 81       	ld	r31, Z
    10b2:	e0 2d       	mov	r30, r0
    10b4:	80 81       	ld	r24, Z
    10b6:	48 2f       	mov	r20, r24
    10b8:	8a 81       	ldd	r24, Y+2	; 0x02
    10ba:	28 2f       	mov	r18, r24
    10bc:	30 e0       	ldi	r19, 0x00	; 0
    10be:	81 e0       	ldi	r24, 0x01	; 1
    10c0:	90 e0       	ldi	r25, 0x00	; 0
    10c2:	02 2e       	mov	r0, r18
    10c4:	02 c0       	rjmp	.+4      	; 0x10ca <__DIO_toggleOutputPinValue+0x4e>
    10c6:	88 0f       	add	r24, r24
    10c8:	99 1f       	adc	r25, r25
    10ca:	0a 94       	dec	r0
    10cc:	e2 f7       	brpl	.-8      	; 0x10c6 <__DIO_toggleOutputPinValue+0x4a>
    10ce:	84 27       	eor	r24, r20
    10d0:	8c 93       	st	X, r24
}
    10d2:	0f 90       	pop	r0
    10d4:	0f 90       	pop	r0
    10d6:	cf 91       	pop	r28
    10d8:	df 91       	pop	r29
    10da:	08 95       	ret

000010dc <__DIO_setPortDirection>:


/*** Description:-
 * Adjust the DDR_x Registers for Whole PORT with needed direction */
void  __DIO_setPortDirection(uint8 port_name, uint8 direction)
{
    10dc:	df 93       	push	r29
    10de:	cf 93       	push	r28
    10e0:	00 d0       	rcall	.+0      	; 0x10e2 <__DIO_setPortDirection+0x6>
    10e2:	cd b7       	in	r28, 0x3d	; 61
    10e4:	de b7       	in	r29, 0x3e	; 62
    10e6:	89 83       	std	Y+1, r24	; 0x01
    10e8:	6a 83       	std	Y+2, r22	; 0x02
    if( direction == OUTPUT_PORT )
    10ea:	8a 81       	ldd	r24, Y+2	; 0x02
    10ec:	81 30       	cpi	r24, 0x01	; 1
    10ee:	71 f4       	brne	.+28     	; 0x110c <__DIO_setPortDirection+0x30>
    {
        *ddr_regs[port_name] = 0xFF;
    10f0:	89 81       	ldd	r24, Y+1	; 0x01
    10f2:	88 2f       	mov	r24, r24
    10f4:	90 e0       	ldi	r25, 0x00	; 0
    10f6:	88 0f       	add	r24, r24
    10f8:	99 1f       	adc	r25, r25
    10fa:	fc 01       	movw	r30, r24
    10fc:	e9 58       	subi	r30, 0x89	; 137
    10fe:	fe 4f       	sbci	r31, 0xFE	; 254
    1100:	01 90       	ld	r0, Z+
    1102:	f0 81       	ld	r31, Z
    1104:	e0 2d       	mov	r30, r0
    1106:	8f ef       	ldi	r24, 0xFF	; 255
    1108:	80 83       	st	Z, r24
    110a:	0f c0       	rjmp	.+30     	; 0x112a <__DIO_setPortDirection+0x4e>
    }
    else if( direction == INPUT_PORT )
    110c:	8a 81       	ldd	r24, Y+2	; 0x02
    110e:	88 23       	and	r24, r24
    1110:	61 f4       	brne	.+24     	; 0x112a <__DIO_setPortDirection+0x4e>
    {
        *ddr_regs[port_name] = 0x00;
    1112:	89 81       	ldd	r24, Y+1	; 0x01
    1114:	88 2f       	mov	r24, r24
    1116:	90 e0       	ldi	r25, 0x00	; 0
    1118:	88 0f       	add	r24, r24
    111a:	99 1f       	adc	r25, r25
    111c:	fc 01       	movw	r30, r24
    111e:	e9 58       	subi	r30, 0x89	; 137
    1120:	fe 4f       	sbci	r31, 0xFE	; 254
    1122:	01 90       	ld	r0, Z+
    1124:	f0 81       	ld	r31, Z
    1126:	e0 2d       	mov	r30, r0
    1128:	10 82       	st	Z, r1
    }
    else{}
}
    112a:	0f 90       	pop	r0
    112c:	0f 90       	pop	r0
    112e:	cf 91       	pop	r28
    1130:	df 91       	pop	r29
    1132:	08 95       	ret

00001134 <__DIO_enablePortInternalPullupResistance>:


/*** Description:-
 * Enable Internal Pullup Resistor for whole PORT Input Pins */
void  __DIO_enablePortInternalPullupResistance(uint8 port_name)
{
    1134:	df 93       	push	r29
    1136:	cf 93       	push	r28
    1138:	0f 92       	push	r0
    113a:	cd b7       	in	r28, 0x3d	; 61
    113c:	de b7       	in	r29, 0x3e	; 62
    113e:	89 83       	std	Y+1, r24	; 0x01
    *port_regs[port_name] = 0xFF;
    1140:	89 81       	ldd	r24, Y+1	; 0x01
    1142:	88 2f       	mov	r24, r24
    1144:	90 e0       	ldi	r25, 0x00	; 0
    1146:	88 0f       	add	r24, r24
    1148:	99 1f       	adc	r25, r25
    114a:	fc 01       	movw	r30, r24
    114c:	e9 57       	subi	r30, 0x79	; 121
    114e:	fe 4f       	sbci	r31, 0xFE	; 254
    1150:	01 90       	ld	r0, Z+
    1152:	f0 81       	ld	r31, Z
    1154:	e0 2d       	mov	r30, r0
    1156:	8f ef       	ldi	r24, 0xFF	; 255
    1158:	80 83       	st	Z, r24
}
    115a:	0f 90       	pop	r0
    115c:	cf 91       	pop	r28
    115e:	df 91       	pop	r29
    1160:	08 95       	ret

00001162 <__DIO_writeOutputPortValue>:


/*** Description:-
 * Output a Digital Values over PORT Output Pins */
void  __DIO_writeOutputPortValue(uint8 port_name,uint8 value)
{
    1162:	df 93       	push	r29
    1164:	cf 93       	push	r28
    1166:	00 d0       	rcall	.+0      	; 0x1168 <__DIO_writeOutputPortValue+0x6>
    1168:	cd b7       	in	r28, 0x3d	; 61
    116a:	de b7       	in	r29, 0x3e	; 62
    116c:	89 83       	std	Y+1, r24	; 0x01
    116e:	6a 83       	std	Y+2, r22	; 0x02
    *port_regs[port_name] = value;
    1170:	89 81       	ldd	r24, Y+1	; 0x01
    1172:	88 2f       	mov	r24, r24
    1174:	90 e0       	ldi	r25, 0x00	; 0
    1176:	88 0f       	add	r24, r24
    1178:	99 1f       	adc	r25, r25
    117a:	fc 01       	movw	r30, r24
    117c:	e9 57       	subi	r30, 0x79	; 121
    117e:	fe 4f       	sbci	r31, 0xFE	; 254
    1180:	01 90       	ld	r0, Z+
    1182:	f0 81       	ld	r31, Z
    1184:	e0 2d       	mov	r30, r0
    1186:	8a 81       	ldd	r24, Y+2	; 0x02
    1188:	80 83       	st	Z, r24
}
    118a:	0f 90       	pop	r0
    118c:	0f 90       	pop	r0
    118e:	cf 91       	pop	r28
    1190:	df 91       	pop	r29
    1192:	08 95       	ret

00001194 <__DIO_readInputPortValue>:


/*** Description:-
 * Read and fetch the Digital Values from PORT Pins */
uint8 __DIO_readInputPortValue(uint8 port_name)
{
    1194:	df 93       	push	r29
    1196:	cf 93       	push	r28
    1198:	0f 92       	push	r0
    119a:	cd b7       	in	r28, 0x3d	; 61
    119c:	de b7       	in	r29, 0x3e	; 62
    119e:	89 83       	std	Y+1, r24	; 0x01
    return *pin_regs[port_name];
    11a0:	89 81       	ldd	r24, Y+1	; 0x01
    11a2:	88 2f       	mov	r24, r24
    11a4:	90 e0       	ldi	r25, 0x00	; 0
    11a6:	88 0f       	add	r24, r24
    11a8:	99 1f       	adc	r25, r25
    11aa:	fc 01       	movw	r30, r24
    11ac:	e1 58       	subi	r30, 0x81	; 129
    11ae:	fe 4f       	sbci	r31, 0xFE	; 254
    11b0:	01 90       	ld	r0, Z+
    11b2:	f0 81       	ld	r31, Z
    11b4:	e0 2d       	mov	r30, r0
    11b6:	80 81       	ld	r24, Z
}
    11b8:	0f 90       	pop	r0
    11ba:	cf 91       	pop	r28
    11bc:	df 91       	pop	r29
    11be:	08 95       	ret

000011c0 <_LCD_init>:
/**** Variable Definitions  ****/
static uint8 cycle;

/**** Function Prototypes ****/
void _LCD_init(void)
{
    11c0:	df 93       	push	r29
    11c2:	cf 93       	push	r28
    11c4:	cd b7       	in	r28, 0x3d	; 61
    11c6:	de b7       	in	r29, 0x3e	; 62
	/* Set Direction for Rs and RW and En Pins as Ouput */
	__DIO_setPinDirection(LCD_CTRL_PORT_DIR, RS, OUTPUT_PIN);
    11c8:	82 e0       	ldi	r24, 0x02	; 2
    11ca:	65 e0       	ldi	r22, 0x05	; 5
    11cc:	41 e0       	ldi	r20, 0x01	; 1
    11ce:	0e 94 1f 07 	call	0xe3e	; 0xe3e <__DIO_setPinDirection>
	__DIO_setPinDirection(LCD_CTRL_PORT_DIR, RW, OUTPUT_PIN);
    11d2:	82 e0       	ldi	r24, 0x02	; 2
    11d4:	66 e0       	ldi	r22, 0x06	; 6
    11d6:	41 e0       	ldi	r20, 0x01	; 1
    11d8:	0e 94 1f 07 	call	0xe3e	; 0xe3e <__DIO_setPinDirection>
	__DIO_setPinDirection(LCD_CTRL_PORT_DIR, EN, OUTPUT_PIN);
    11dc:	82 e0       	ldi	r24, 0x02	; 2
    11de:	67 e0       	ldi	r22, 0x07	; 7
    11e0:	41 e0       	ldi	r20, 0x01	; 1
    11e2:	0e 94 1f 07 	call	0xe3e	; 0xe3e <__DIO_setPinDirection>
	/*Set Direction for LCD Data Bus as Output Port */
	__DIO_setPortDirection(LCD_DATA_PORT_DIR, OUTPUT_PORT);
    11e6:	83 e0       	ldi	r24, 0x03	; 3
    11e8:	61 e0       	ldi	r22, 0x01	; 1
    11ea:	0e 94 6e 08 	call	0x10dc	; 0x10dc <__DIO_setPortDirection>

	_LCD_sendCommand(TWO_LINE_LCD_Eight_BIT_MODE);
    11ee:	88 e3       	ldi	r24, 0x38	; 56
    11f0:	0e 94 03 09 	call	0x1206	; 0x1206 <_LCD_sendCommand>
	_LCD_sendCommand(CURSOR_STATE);
    11f4:	8c e0       	ldi	r24, 0x0C	; 12
    11f6:	0e 94 03 09 	call	0x1206	; 0x1206 <_LCD_sendCommand>
	_LCD_sendCommand(CLEAR_SCREEN_COMMAND);
    11fa:	81 e0       	ldi	r24, 0x01	; 1
    11fc:	0e 94 03 09 	call	0x1206	; 0x1206 <_LCD_sendCommand>
}
    1200:	cf 91       	pop	r28
    1202:	df 91       	pop	r29
    1204:	08 95       	ret

00001206 <_LCD_sendCommand>:

void _LCD_sendCommand(uint8 command)
{
    1206:	df 93       	push	r29
    1208:	cf 93       	push	r28
    120a:	0f 92       	push	r0
    120c:	cd b7       	in	r28, 0x3d	; 61
    120e:	de b7       	in	r29, 0x3e	; 62
    1210:	89 83       	std	Y+1, r24	; 0x01
	/* Clear RS Pin for LCD Command Mode */
	__DIO_writeOutputPinValue(LCD_CTRL_PORT, RS, LOW);
    1212:	82 e0       	ldi	r24, 0x02	; 2
    1214:	65 e0       	ldi	r22, 0x05	; 5
    1216:	40 e0       	ldi	r20, 0x00	; 0
    1218:	0e 94 ae 07 	call	0xf5c	; 0xf5c <__DIO_writeOutputPinValue>
	/* Clear RW Pin for Write to LCD Mode */
	__DIO_writeOutputPinValue(LCD_CTRL_PORT, RW, LOW);
    121c:	82 e0       	ldi	r24, 0x02	; 2
    121e:	66 e0       	ldi	r22, 0x06	; 6
    1220:	40 e0       	ldi	r20, 0x00	; 0
    1222:	0e 94 ae 07 	call	0xf5c	; 0xf5c <__DIO_writeOutputPinValue>
	for(cycle=0; cycle<50; cycle++); //delay in uSeconds/mSeconds
    1226:	10 92 90 01 	sts	0x0190, r1
    122a:	05 c0       	rjmp	.+10     	; 0x1236 <_LCD_sendCommand+0x30>
    122c:	80 91 90 01 	lds	r24, 0x0190
    1230:	8f 5f       	subi	r24, 0xFF	; 255
    1232:	80 93 90 01 	sts	0x0190, r24
    1236:	80 91 90 01 	lds	r24, 0x0190
    123a:	82 33       	cpi	r24, 0x32	; 50
    123c:	b8 f3       	brcs	.-18     	; 0x122c <_LCD_sendCommand+0x26>
	/* Set EN:enable Pin for fetching command from MC */
	__DIO_writeOutputPinValue(LCD_CTRL_PORT, EN, HIGH);
    123e:	82 e0       	ldi	r24, 0x02	; 2
    1240:	67 e0       	ldi	r22, 0x07	; 7
    1242:	41 e0       	ldi	r20, 0x01	; 1
    1244:	0e 94 ae 07 	call	0xf5c	; 0xf5c <__DIO_writeOutputPinValue>
	for(cycle=0; cycle<50; cycle++); //delay in uSeconds/mSeconds
    1248:	10 92 90 01 	sts	0x0190, r1
    124c:	05 c0       	rjmp	.+10     	; 0x1258 <_LCD_sendCommand+0x52>
    124e:	80 91 90 01 	lds	r24, 0x0190
    1252:	8f 5f       	subi	r24, 0xFF	; 255
    1254:	80 93 90 01 	sts	0x0190, r24
    1258:	80 91 90 01 	lds	r24, 0x0190
    125c:	82 33       	cpi	r24, 0x32	; 50
    125e:	b8 f3       	brcs	.-18     	; 0x124e <_LCD_sendCommand+0x48>
	/* Send Command through LCD Data Bus */
	__DIO_writeOutputPortValue(LCD_DATA_PORT, command);	//LCD_DATA_PORT = command;
    1260:	83 e0       	ldi	r24, 0x03	; 3
    1262:	69 81       	ldd	r22, Y+1	; 0x01
    1264:	0e 94 b1 08 	call	0x1162	; 0x1162 <__DIO_writeOutputPortValue>
	for(cycle=0; cycle<50; cycle++); //delay in uSeconds/mSeconds
    1268:	10 92 90 01 	sts	0x0190, r1
    126c:	05 c0       	rjmp	.+10     	; 0x1278 <_LCD_sendCommand+0x72>
    126e:	80 91 90 01 	lds	r24, 0x0190
    1272:	8f 5f       	subi	r24, 0xFF	; 255
    1274:	80 93 90 01 	sts	0x0190, r24
    1278:	80 91 90 01 	lds	r24, 0x0190
    127c:	82 33       	cpi	r24, 0x32	; 50
    127e:	b8 f3       	brcs	.-18     	; 0x126e <_LCD_sendCommand+0x68>
	/* Clear EN:enable Pin for executing Command Over LCD */
	__DIO_writeOutputPinValue(LCD_CTRL_PORT, EN, LOW);
    1280:	82 e0       	ldi	r24, 0x02	; 2
    1282:	67 e0       	ldi	r22, 0x07	; 7
    1284:	40 e0       	ldi	r20, 0x00	; 0
    1286:	0e 94 ae 07 	call	0xf5c	; 0xf5c <__DIO_writeOutputPinValue>
	for(cycle=0; cycle<50; cycle++); //delay in uSeconds/mSeconds
    128a:	10 92 90 01 	sts	0x0190, r1
    128e:	05 c0       	rjmp	.+10     	; 0x129a <_LCD_sendCommand+0x94>
    1290:	80 91 90 01 	lds	r24, 0x0190
    1294:	8f 5f       	subi	r24, 0xFF	; 255
    1296:	80 93 90 01 	sts	0x0190, r24
    129a:	80 91 90 01 	lds	r24, 0x0190
    129e:	82 33       	cpi	r24, 0x32	; 50
    12a0:	b8 f3       	brcs	.-18     	; 0x1290 <_LCD_sendCommand+0x8a>
}
    12a2:	0f 90       	pop	r0
    12a4:	cf 91       	pop	r28
    12a6:	df 91       	pop	r29
    12a8:	08 95       	ret

000012aa <_LCD_displayCharacter>:

void _LCD_displayCharacter(uint8 data)
{
    12aa:	df 93       	push	r29
    12ac:	cf 93       	push	r28
    12ae:	0f 92       	push	r0
    12b0:	cd b7       	in	r28, 0x3d	; 61
    12b2:	de b7       	in	r29, 0x3e	; 62
    12b4:	89 83       	std	Y+1, r24	; 0x01
	/* Clear RS Pin for LCD Data Mode */
	__DIO_writeOutputPinValue(LCD_CTRL_PORT, RS, HIGH);
    12b6:	82 e0       	ldi	r24, 0x02	; 2
    12b8:	65 e0       	ldi	r22, 0x05	; 5
    12ba:	41 e0       	ldi	r20, 0x01	; 1
    12bc:	0e 94 ae 07 	call	0xf5c	; 0xf5c <__DIO_writeOutputPinValue>
	/* Clear RW Pin for Write to LCD Mode */
	__DIO_writeOutputPinValue(LCD_CTRL_PORT, RW, LOW);
    12c0:	82 e0       	ldi	r24, 0x02	; 2
    12c2:	66 e0       	ldi	r22, 0x06	; 6
    12c4:	40 e0       	ldi	r20, 0x00	; 0
    12c6:	0e 94 ae 07 	call	0xf5c	; 0xf5c <__DIO_writeOutputPinValue>
	for(cycle=0; cycle<50; cycle++); //delay in uSeconds/mSeconds
    12ca:	10 92 90 01 	sts	0x0190, r1
    12ce:	05 c0       	rjmp	.+10     	; 0x12da <_LCD_displayCharacter+0x30>
    12d0:	80 91 90 01 	lds	r24, 0x0190
    12d4:	8f 5f       	subi	r24, 0xFF	; 255
    12d6:	80 93 90 01 	sts	0x0190, r24
    12da:	80 91 90 01 	lds	r24, 0x0190
    12de:	82 33       	cpi	r24, 0x32	; 50
    12e0:	b8 f3       	brcs	.-18     	; 0x12d0 <_LCD_displayCharacter+0x26>
	/* Set EN:enable Pin for fetching Data from MC */
	__DIO_writeOutputPinValue(LCD_CTRL_PORT, EN, HIGH);
    12e2:	82 e0       	ldi	r24, 0x02	; 2
    12e4:	67 e0       	ldi	r22, 0x07	; 7
    12e6:	41 e0       	ldi	r20, 0x01	; 1
    12e8:	0e 94 ae 07 	call	0xf5c	; 0xf5c <__DIO_writeOutputPinValue>
	for(cycle=0; cycle<50; cycle++); //delay in uSeconds/mSeconds
    12ec:	10 92 90 01 	sts	0x0190, r1
    12f0:	05 c0       	rjmp	.+10     	; 0x12fc <_LCD_displayCharacter+0x52>
    12f2:	80 91 90 01 	lds	r24, 0x0190
    12f6:	8f 5f       	subi	r24, 0xFF	; 255
    12f8:	80 93 90 01 	sts	0x0190, r24
    12fc:	80 91 90 01 	lds	r24, 0x0190
    1300:	82 33       	cpi	r24, 0x32	; 50
    1302:	b8 f3       	brcs	.-18     	; 0x12f2 <_LCD_displayCharacter+0x48>
	/* Send Data through LCD Data Bus */
	__DIO_writeOutputPortValue(LCD_DATA_PORT, data);  //LCD_DATA_PORT = data;
    1304:	83 e0       	ldi	r24, 0x03	; 3
    1306:	69 81       	ldd	r22, Y+1	; 0x01
    1308:	0e 94 b1 08 	call	0x1162	; 0x1162 <__DIO_writeOutputPortValue>
	for(cycle=0; cycle<50; cycle++); //delay in uSeconds/mSeconds
    130c:	10 92 90 01 	sts	0x0190, r1
    1310:	05 c0       	rjmp	.+10     	; 0x131c <_LCD_displayCharacter+0x72>
    1312:	80 91 90 01 	lds	r24, 0x0190
    1316:	8f 5f       	subi	r24, 0xFF	; 255
    1318:	80 93 90 01 	sts	0x0190, r24
    131c:	80 91 90 01 	lds	r24, 0x0190
    1320:	82 33       	cpi	r24, 0x32	; 50
    1322:	b8 f3       	brcs	.-18     	; 0x1312 <_LCD_displayCharacter+0x68>
	/* Clear EN:enable Pin for displaying Data Over LCD */
	__DIO_writeOutputPinValue(LCD_CTRL_PORT, EN, LOW);
    1324:	82 e0       	ldi	r24, 0x02	; 2
    1326:	67 e0       	ldi	r22, 0x07	; 7
    1328:	40 e0       	ldi	r20, 0x00	; 0
    132a:	0e 94 ae 07 	call	0xf5c	; 0xf5c <__DIO_writeOutputPinValue>
	for(cycle=0; cycle<50; cycle++); //delay in uSeconds/mSeconds
    132e:	10 92 90 01 	sts	0x0190, r1
    1332:	05 c0       	rjmp	.+10     	; 0x133e <_LCD_displayCharacter+0x94>
    1334:	80 91 90 01 	lds	r24, 0x0190
    1338:	8f 5f       	subi	r24, 0xFF	; 255
    133a:	80 93 90 01 	sts	0x0190, r24
    133e:	80 91 90 01 	lds	r24, 0x0190
    1342:	82 33       	cpi	r24, 0x32	; 50
    1344:	b8 f3       	brcs	.-18     	; 0x1334 <_LCD_displayCharacter+0x8a>
}
    1346:	0f 90       	pop	r0
    1348:	cf 91       	pop	r28
    134a:	df 91       	pop	r29
    134c:	08 95       	ret

0000134e <_LCD_displayString>:

void _LCD_displayString(uint8 *string_data)
{
    134e:	df 93       	push	r29
    1350:	cf 93       	push	r28
    1352:	00 d0       	rcall	.+0      	; 0x1354 <_LCD_displayString+0x6>
    1354:	cd b7       	in	r28, 0x3d	; 61
    1356:	de b7       	in	r29, 0x3e	; 62
    1358:	9a 83       	std	Y+2, r25	; 0x02
    135a:	89 83       	std	Y+1, r24	; 0x01
    135c:	0a c0       	rjmp	.+20     	; 0x1372 <_LCD_displayString+0x24>
	while( *string_data != '\0' )
	{
		_LCD_displayCharacter(*string_data);
    135e:	e9 81       	ldd	r30, Y+1	; 0x01
    1360:	fa 81       	ldd	r31, Y+2	; 0x02
    1362:	80 81       	ld	r24, Z
    1364:	0e 94 55 09 	call	0x12aa	; 0x12aa <_LCD_displayCharacter>
		string_data++;
    1368:	89 81       	ldd	r24, Y+1	; 0x01
    136a:	9a 81       	ldd	r25, Y+2	; 0x02
    136c:	01 96       	adiw	r24, 0x01	; 1
    136e:	9a 83       	std	Y+2, r25	; 0x02
    1370:	89 83       	std	Y+1, r24	; 0x01
	for(cycle=0; cycle<50; cycle++); //delay in uSeconds/mSeconds
}

void _LCD_displayString(uint8 *string_data)
{
	while( *string_data != '\0' )
    1372:	e9 81       	ldd	r30, Y+1	; 0x01
    1374:	fa 81       	ldd	r31, Y+2	; 0x02
    1376:	80 81       	ld	r24, Z
    1378:	88 23       	and	r24, r24
    137a:	89 f7       	brne	.-30     	; 0x135e <_LCD_displayString+0x10>
	{
		_LCD_displayCharacter(*string_data);
		string_data++;
	}
}
    137c:	0f 90       	pop	r0
    137e:	0f 90       	pop	r0
    1380:	cf 91       	pop	r28
    1382:	df 91       	pop	r29
    1384:	08 95       	ret

00001386 <_LCD_displayIntegerVariable>:
void _LCD_displayIntegerVariable(uint16 data)
{
    1386:	df 93       	push	r29
    1388:	cf 93       	push	r28
    138a:	cd b7       	in	r28, 0x3d	; 61
    138c:	de b7       	in	r29, 0x3e	; 62
    138e:	2b 97       	sbiw	r28, 0x0b	; 11
    1390:	0f b6       	in	r0, 0x3f	; 63
    1392:	f8 94       	cli
    1394:	de bf       	out	0x3e, r29	; 62
    1396:	0f be       	out	0x3f, r0	; 63
    1398:	cd bf       	out	0x3d, r28	; 61
    139a:	9b 87       	std	Y+11, r25	; 0x0b
    139c:	8a 87       	std	Y+10, r24	; 0x0a
	sint8 i=0, num_buff[8];
    139e:	19 82       	std	Y+1, r1	; 0x01

	if( data == 0 )
    13a0:	8a 85       	ldd	r24, Y+10	; 0x0a
    13a2:	9b 85       	ldd	r25, Y+11	; 0x0b
    13a4:	00 97       	sbiw	r24, 0x00	; 0
    13a6:	21 f5       	brne	.+72     	; 0x13f0 <_LCD_displayIntegerVariable+0x6a>
	{
		_LCD_displayCharacter('0');
    13a8:	80 e3       	ldi	r24, 0x30	; 48
    13aa:	0e 94 55 09 	call	0x12aa	; 0x12aa <_LCD_displayCharacter>
    13ae:	3b c0       	rjmp	.+118    	; 0x1426 <_LCD_displayIntegerVariable+0xa0>
		return;
	}

	while(data != 0)
	{
		num_buff[i] = (data%10)+48;
    13b0:	89 81       	ldd	r24, Y+1	; 0x01
    13b2:	e8 2f       	mov	r30, r24
    13b4:	ff 27       	eor	r31, r31
    13b6:	e7 fd       	sbrc	r30, 7
    13b8:	f0 95       	com	r31
    13ba:	8a 85       	ldd	r24, Y+10	; 0x0a
    13bc:	9b 85       	ldd	r25, Y+11	; 0x0b
    13be:	2a e0       	ldi	r18, 0x0A	; 10
    13c0:	30 e0       	ldi	r19, 0x00	; 0
    13c2:	b9 01       	movw	r22, r18
    13c4:	0e 94 bb 0c 	call	0x1976	; 0x1976 <__udivmodhi4>
    13c8:	80 5d       	subi	r24, 0xD0	; 208
    13ca:	28 2f       	mov	r18, r24
    13cc:	ce 01       	movw	r24, r28
    13ce:	02 96       	adiw	r24, 0x02	; 2
    13d0:	e8 0f       	add	r30, r24
    13d2:	f9 1f       	adc	r31, r25
    13d4:	20 83       	st	Z, r18
		i++;
    13d6:	89 81       	ldd	r24, Y+1	; 0x01
    13d8:	8f 5f       	subi	r24, 0xFF	; 255
    13da:	89 83       	std	Y+1, r24	; 0x01
		data /= 10;
    13dc:	8a 85       	ldd	r24, Y+10	; 0x0a
    13de:	9b 85       	ldd	r25, Y+11	; 0x0b
    13e0:	2a e0       	ldi	r18, 0x0A	; 10
    13e2:	30 e0       	ldi	r19, 0x00	; 0
    13e4:	b9 01       	movw	r22, r18
    13e6:	0e 94 bb 0c 	call	0x1976	; 0x1976 <__udivmodhi4>
    13ea:	cb 01       	movw	r24, r22
    13ec:	9b 87       	std	Y+11, r25	; 0x0b
    13ee:	8a 87       	std	Y+10, r24	; 0x0a
	{
		_LCD_displayCharacter('0');
		return;
	}

	while(data != 0)
    13f0:	8a 85       	ldd	r24, Y+10	; 0x0a
    13f2:	9b 85       	ldd	r25, Y+11	; 0x0b
    13f4:	00 97       	sbiw	r24, 0x00	; 0
    13f6:	e1 f6       	brne	.-72     	; 0x13b0 <_LCD_displayIntegerVariable+0x2a>
	{
		num_buff[i] = (data%10)+48;
		i++;
		data /= 10;
	}
	i--;
    13f8:	89 81       	ldd	r24, Y+1	; 0x01
    13fa:	81 50       	subi	r24, 0x01	; 1
    13fc:	89 83       	std	Y+1, r24	; 0x01
    13fe:	10 c0       	rjmp	.+32     	; 0x1420 <_LCD_displayIntegerVariable+0x9a>
	while( i >= 0)
	{
		_LCD_displayCharacter(num_buff[i]);
    1400:	89 81       	ldd	r24, Y+1	; 0x01
    1402:	28 2f       	mov	r18, r24
    1404:	33 27       	eor	r19, r19
    1406:	27 fd       	sbrc	r18, 7
    1408:	30 95       	com	r19
    140a:	ce 01       	movw	r24, r28
    140c:	02 96       	adiw	r24, 0x02	; 2
    140e:	fc 01       	movw	r30, r24
    1410:	e2 0f       	add	r30, r18
    1412:	f3 1f       	adc	r31, r19
    1414:	80 81       	ld	r24, Z
    1416:	0e 94 55 09 	call	0x12aa	; 0x12aa <_LCD_displayCharacter>
		i--;
    141a:	89 81       	ldd	r24, Y+1	; 0x01
    141c:	81 50       	subi	r24, 0x01	; 1
    141e:	89 83       	std	Y+1, r24	; 0x01
		num_buff[i] = (data%10)+48;
		i++;
		data /= 10;
	}
	i--;
	while( i >= 0)
    1420:	89 81       	ldd	r24, Y+1	; 0x01
    1422:	88 23       	and	r24, r24
    1424:	6c f7       	brge	.-38     	; 0x1400 <_LCD_displayIntegerVariable+0x7a>
	{
		_LCD_displayCharacter(num_buff[i]);
		i--;
	}
}
    1426:	2b 96       	adiw	r28, 0x0b	; 11
    1428:	0f b6       	in	r0, 0x3f	; 63
    142a:	f8 94       	cli
    142c:	de bf       	out	0x3e, r29	; 62
    142e:	0f be       	out	0x3f, r0	; 63
    1430:	cd bf       	out	0x3d, r28	; 61
    1432:	cf 91       	pop	r28
    1434:	df 91       	pop	r29
    1436:	08 95       	ret

00001438 <_LCD_adjustCursorPosition>:

void _LCD_adjustCursorPosition(uint8 row, uint8 col)
{
    1438:	df 93       	push	r29
    143a:	cf 93       	push	r28
    143c:	00 d0       	rcall	.+0      	; 0x143e <_LCD_adjustCursorPosition+0x6>
    143e:	00 d0       	rcall	.+0      	; 0x1440 <_LCD_adjustCursorPosition+0x8>
    1440:	0f 92       	push	r0
    1442:	cd b7       	in	r28, 0x3d	; 61
    1444:	de b7       	in	r29, 0x3e	; 62
    1446:	8a 83       	std	Y+2, r24	; 0x02
    1448:	6b 83       	std	Y+3, r22	; 0x03
	uint8 location;

	/*Adjust the correct location*/
	switch(row)
    144a:	8a 81       	ldd	r24, Y+2	; 0x02
    144c:	28 2f       	mov	r18, r24
    144e:	30 e0       	ldi	r19, 0x00	; 0
    1450:	3d 83       	std	Y+5, r19	; 0x05
    1452:	2c 83       	std	Y+4, r18	; 0x04
    1454:	8c 81       	ldd	r24, Y+4	; 0x04
    1456:	9d 81       	ldd	r25, Y+5	; 0x05
    1458:	81 30       	cpi	r24, 0x01	; 1
    145a:	91 05       	cpc	r25, r1
    145c:	c1 f0       	breq	.+48     	; 0x148e <_LCD_adjustCursorPosition+0x56>
    145e:	2c 81       	ldd	r18, Y+4	; 0x04
    1460:	3d 81       	ldd	r19, Y+5	; 0x05
    1462:	22 30       	cpi	r18, 0x02	; 2
    1464:	31 05       	cpc	r19, r1
    1466:	2c f4       	brge	.+10     	; 0x1472 <_LCD_adjustCursorPosition+0x3a>
    1468:	8c 81       	ldd	r24, Y+4	; 0x04
    146a:	9d 81       	ldd	r25, Y+5	; 0x05
    146c:	00 97       	sbiw	r24, 0x00	; 0
    146e:	61 f0       	breq	.+24     	; 0x1488 <_LCD_adjustCursorPosition+0x50>
    1470:	19 c0       	rjmp	.+50     	; 0x14a4 <_LCD_adjustCursorPosition+0x6c>
    1472:	2c 81       	ldd	r18, Y+4	; 0x04
    1474:	3d 81       	ldd	r19, Y+5	; 0x05
    1476:	22 30       	cpi	r18, 0x02	; 2
    1478:	31 05       	cpc	r19, r1
    147a:	69 f0       	breq	.+26     	; 0x1496 <_LCD_adjustCursorPosition+0x5e>
    147c:	8c 81       	ldd	r24, Y+4	; 0x04
    147e:	9d 81       	ldd	r25, Y+5	; 0x05
    1480:	83 30       	cpi	r24, 0x03	; 3
    1482:	91 05       	cpc	r25, r1
    1484:	61 f0       	breq	.+24     	; 0x149e <_LCD_adjustCursorPosition+0x66>
    1486:	0e c0       	rjmp	.+28     	; 0x14a4 <_LCD_adjustCursorPosition+0x6c>
	{
		case 0:
			location = col;
    1488:	8b 81       	ldd	r24, Y+3	; 0x03
    148a:	89 83       	std	Y+1, r24	; 0x01
    148c:	0b c0       	rjmp	.+22     	; 0x14a4 <_LCD_adjustCursorPosition+0x6c>
		break;
		case 1:
			location = col+0x40;
    148e:	8b 81       	ldd	r24, Y+3	; 0x03
    1490:	80 5c       	subi	r24, 0xC0	; 192
    1492:	89 83       	std	Y+1, r24	; 0x01
    1494:	07 c0       	rjmp	.+14     	; 0x14a4 <_LCD_adjustCursorPosition+0x6c>
		break;
		case 2:
			location = col+0x10;
    1496:	8b 81       	ldd	r24, Y+3	; 0x03
    1498:	80 5f       	subi	r24, 0xF0	; 240
    149a:	89 83       	std	Y+1, r24	; 0x01
    149c:	03 c0       	rjmp	.+6      	; 0x14a4 <_LCD_adjustCursorPosition+0x6c>
		break;
		case 3:
			location = col+0x50;
    149e:	8b 81       	ldd	r24, Y+3	; 0x03
    14a0:	80 5b       	subi	r24, 0xB0	; 176
    14a2:	89 83       	std	Y+1, r24	; 0x01
		break;
		default:break;
	}
	/*To Set the Cursor Location at specific place, send DDRAM Address OR 0x80 */
	_LCD_sendCommand( (SET_CURSOR|location) );
    14a4:	89 81       	ldd	r24, Y+1	; 0x01
    14a6:	80 68       	ori	r24, 0x80	; 128
    14a8:	0e 94 03 09 	call	0x1206	; 0x1206 <_LCD_sendCommand>
}
    14ac:	0f 90       	pop	r0
    14ae:	0f 90       	pop	r0
    14b0:	0f 90       	pop	r0
    14b2:	0f 90       	pop	r0
    14b4:	0f 90       	pop	r0
    14b6:	cf 91       	pop	r28
    14b8:	df 91       	pop	r29
    14ba:	08 95       	ret

000014bc <_LCD_displayString_atCursor>:
void _LCD_displayString_atCursor(uint8 *string_data, uint8 row, uint8 col)
{
    14bc:	df 93       	push	r29
    14be:	cf 93       	push	r28
    14c0:	00 d0       	rcall	.+0      	; 0x14c2 <_LCD_displayString_atCursor+0x6>
    14c2:	00 d0       	rcall	.+0      	; 0x14c4 <_LCD_displayString_atCursor+0x8>
    14c4:	cd b7       	in	r28, 0x3d	; 61
    14c6:	de b7       	in	r29, 0x3e	; 62
    14c8:	9a 83       	std	Y+2, r25	; 0x02
    14ca:	89 83       	std	Y+1, r24	; 0x01
    14cc:	6b 83       	std	Y+3, r22	; 0x03
    14ce:	4c 83       	std	Y+4, r20	; 0x04
	_LCD_adjustCursorPosition(row, col);
    14d0:	8b 81       	ldd	r24, Y+3	; 0x03
    14d2:	6c 81       	ldd	r22, Y+4	; 0x04
    14d4:	0e 94 1c 0a 	call	0x1438	; 0x1438 <_LCD_adjustCursorPosition>
	_LCD_displayString(string_data);
    14d8:	89 81       	ldd	r24, Y+1	; 0x01
    14da:	9a 81       	ldd	r25, Y+2	; 0x02
    14dc:	0e 94 a7 09 	call	0x134e	; 0x134e <_LCD_displayString>
}
    14e0:	0f 90       	pop	r0
    14e2:	0f 90       	pop	r0
    14e4:	0f 90       	pop	r0
    14e6:	0f 90       	pop	r0
    14e8:	cf 91       	pop	r28
    14ea:	df 91       	pop	r29
    14ec:	08 95       	ret

000014ee <_LCD_clearScreen>:
void _LCD_clearScreen()
{
    14ee:	df 93       	push	r29
    14f0:	cf 93       	push	r28
    14f2:	cd b7       	in	r28, 0x3d	; 61
    14f4:	de b7       	in	r29, 0x3e	; 62
	_LCD_sendCommand(CLEAR_SCREEN_COMMAND);
    14f6:	81 e0       	ldi	r24, 0x01	; 1
    14f8:	0e 94 03 09 	call	0x1206	; 0x1206 <_LCD_sendCommand>
}
    14fc:	cf 91       	pop	r28
    14fe:	df 91       	pop	r29
    1500:	08 95       	ret

00001502 <__PWM0_startModule>:

    /*** Description:-
     * Used to Start the PWM with the desired Configuration
     * Func Args, struct Members: PWM_clock / compare_value / OC0_mode */
    void __PWM0_startModule(const configType_PWM0 *pwm0_configPointer)
    {
    1502:	df 93       	push	r29
    1504:	cf 93       	push	r28
    1506:	00 d0       	rcall	.+0      	; 0x1508 <__PWM0_startModule+0x6>
    1508:	cd b7       	in	r28, 0x3d	; 61
    150a:	de b7       	in	r29, 0x3e	; 62
    150c:	9a 83       	std	Y+2, r25	; 0x02
    150e:	89 83       	std	Y+1, r24	; 0x01
        /*Disable Global Interrupt flag; Entering Critical Section*/
        DIS_GLOBAL_INTERRUPT;
    1510:	af e5       	ldi	r26, 0x5F	; 95
    1512:	b0 e0       	ldi	r27, 0x00	; 0
    1514:	ef e5       	ldi	r30, 0x5F	; 95
    1516:	f0 e0       	ldi	r31, 0x00	; 0
    1518:	80 81       	ld	r24, Z
    151a:	8f 77       	andi	r24, 0x7F	; 127
    151c:	8c 93       	st	X, r24
        /*Initialize the TCNT0 with 0 Value*/
        TCNT0 = 0x00;
    151e:	e2 e5       	ldi	r30, 0x52	; 82
    1520:	f0 e0       	ldi	r31, 0x00	; 0
    1522:	10 82       	st	Z, r1
        /*Set Compare Register with compare value*/
        OCR0 = pwm0_configPointer->duty_cycle;
    1524:	ac e5       	ldi	r26, 0x5C	; 92
    1526:	b0 e0       	ldi	r27, 0x00	; 0
    1528:	e9 81       	ldd	r30, Y+1	; 0x01
    152a:	fa 81       	ldd	r31, Y+2	; 0x02
    152c:	81 81       	ldd	r24, Z+1	; 0x01
    152e:	8c 93       	st	X, r24
        /*Set PB3/OC0 as Output Pin*/
        SET_BIT(DDRB, PB3);
    1530:	a7 e3       	ldi	r26, 0x37	; 55
    1532:	b0 e0       	ldi	r27, 0x00	; 0
    1534:	e7 e3       	ldi	r30, 0x37	; 55
    1536:	f0 e0       	ldi	r31, 0x00	; 0
    1538:	80 81       	ld	r24, Z
    153a:	88 60       	ori	r24, 0x08	; 8
    153c:	8c 93       	st	X, r24
        /*Set Module in PWM Mode*/
        CLR_BIT(TCCR0, FOC0);
    153e:	a3 e5       	ldi	r26, 0x53	; 83
    1540:	b0 e0       	ldi	r27, 0x00	; 0
    1542:	e3 e5       	ldi	r30, 0x53	; 83
    1544:	f0 e0       	ldi	r31, 0x00	; 0
    1546:	80 81       	ld	r24, Z
    1548:	8f 77       	andi	r24, 0x7F	; 127
    154a:	8c 93       	st	X, r24
        /*Set The PWM in Fast PWM Mode: WGM00=1 / WGM01 = 1*/
        SET_BIT(TCCR0, WGM00);
    154c:	a3 e5       	ldi	r26, 0x53	; 83
    154e:	b0 e0       	ldi	r27, 0x00	; 0
    1550:	e3 e5       	ldi	r30, 0x53	; 83
    1552:	f0 e0       	ldi	r31, 0x00	; 0
    1554:	80 81       	ld	r24, Z
    1556:	80 64       	ori	r24, 0x40	; 64
    1558:	8c 93       	st	X, r24
        SET_BIT(TCCR0, WGM01);
    155a:	a3 e5       	ldi	r26, 0x53	; 83
    155c:	b0 e0       	ldi	r27, 0x00	; 0
    155e:	e3 e5       	ldi	r30, 0x53	; 83
    1560:	f0 e0       	ldi	r31, 0x00	; 0
    1562:	80 81       	ld	r24, Z
    1564:	88 60       	ori	r24, 0x08	; 8
    1566:	8c 93       	st	X, r24
        /*Disable Module Interrupt Enable flag*/
        CLR_BIT(TIMSK, OCIE0);
    1568:	a9 e5       	ldi	r26, 0x59	; 89
    156a:	b0 e0       	ldi	r27, 0x00	; 0
    156c:	e9 e5       	ldi	r30, 0x59	; 89
    156e:	f0 e0       	ldi	r31, 0x00	; 0
    1570:	80 81       	ld	r24, Z
    1572:	8d 7f       	andi	r24, 0xFD	; 253
    1574:	8c 93       	st	X, r24
        /*Set Compare Output Mode, non-PWM Mode Pins*/
        TCCR0 = (TCCR0&0b11001111) | (pwm0_configPointer->PWM_mode<<4);
    1576:	a3 e5       	ldi	r26, 0x53	; 83
    1578:	b0 e0       	ldi	r27, 0x00	; 0
    157a:	e3 e5       	ldi	r30, 0x53	; 83
    157c:	f0 e0       	ldi	r31, 0x00	; 0
    157e:	80 81       	ld	r24, Z
    1580:	28 2f       	mov	r18, r24
    1582:	2f 7c       	andi	r18, 0xCF	; 207
    1584:	e9 81       	ldd	r30, Y+1	; 0x01
    1586:	fa 81       	ldd	r31, Y+2	; 0x02
    1588:	82 81       	ldd	r24, Z+2	; 0x02
    158a:	88 2f       	mov	r24, r24
    158c:	90 e0       	ldi	r25, 0x00	; 0
    158e:	82 95       	swap	r24
    1590:	92 95       	swap	r25
    1592:	90 7f       	andi	r25, 0xF0	; 240
    1594:	98 27       	eor	r25, r24
    1596:	80 7f       	andi	r24, 0xF0	; 240
    1598:	98 27       	eor	r25, r24
    159a:	82 2b       	or	r24, r18
    159c:	8c 93       	st	X, r24
        /*Set the PWM Clock Prescaler*/
        TCCR0 = (TCCR0&0xF8) | (pwm0_configPointer->PWM_clock&0x07);
    159e:	a3 e5       	ldi	r26, 0x53	; 83
    15a0:	b0 e0       	ldi	r27, 0x00	; 0
    15a2:	e3 e5       	ldi	r30, 0x53	; 83
    15a4:	f0 e0       	ldi	r31, 0x00	; 0
    15a6:	80 81       	ld	r24, Z
    15a8:	98 2f       	mov	r25, r24
    15aa:	98 7f       	andi	r25, 0xF8	; 248
    15ac:	e9 81       	ldd	r30, Y+1	; 0x01
    15ae:	fa 81       	ldd	r31, Y+2	; 0x02
    15b0:	80 81       	ld	r24, Z
    15b2:	87 70       	andi	r24, 0x07	; 7
    15b4:	89 2b       	or	r24, r25
    15b6:	8c 93       	st	X, r24
        /*Enable Global Interrupt flag; Exiting Critical Section*/
        EN_GLOBAL_INTERRUPT;
    15b8:	af e5       	ldi	r26, 0x5F	; 95
    15ba:	b0 e0       	ldi	r27, 0x00	; 0
    15bc:	ef e5       	ldi	r30, 0x5F	; 95
    15be:	f0 e0       	ldi	r31, 0x00	; 0
    15c0:	80 81       	ld	r24, Z
    15c2:	80 68       	ori	r24, 0x80	; 128
    15c4:	8c 93       	st	X, r24
    }
    15c6:	0f 90       	pop	r0
    15c8:	0f 90       	pop	r0
    15ca:	cf 91       	pop	r28
    15cc:	df 91       	pop	r29
    15ce:	08 95       	ret

000015d0 <__PWM0_stopModule>:


    /*** Description:-
     * Used to Disable the PWM */
    void __PWM0_stopModule(void)
    {
    15d0:	df 93       	push	r29
    15d2:	cf 93       	push	r28
    15d4:	cd b7       	in	r28, 0x3d	; 61
    15d6:	de b7       	in	r29, 0x3e	; 62
        /*Disable Global Interrupt flag; Exiting Critical Section*/
        DIS_GLOBAL_INTERRUPT;
    15d8:	af e5       	ldi	r26, 0x5F	; 95
    15da:	b0 e0       	ldi	r27, 0x00	; 0
    15dc:	ef e5       	ldi	r30, 0x5F	; 95
    15de:	f0 e0       	ldi	r31, 0x00	; 0
    15e0:	80 81       	ld	r24, Z
    15e2:	8f 77       	andi	r24, 0x7F	; 127
    15e4:	8c 93       	st	X, r24
        /*Disable PWM Clock Source: will Disable the PWM itself*/
        TCCR0 = 0x00;
    15e6:	e3 e5       	ldi	r30, 0x53	; 83
    15e8:	f0 e0       	ldi	r31, 0x00	; 0
    15ea:	10 82       	st	Z, r1
        /*Enable Global Interrupt flag; Exiting Critical Section*/
        EN_GLOBAL_INTERRUPT;
    15ec:	af e5       	ldi	r26, 0x5F	; 95
    15ee:	b0 e0       	ldi	r27, 0x00	; 0
    15f0:	ef e5       	ldi	r30, 0x5F	; 95
    15f2:	f0 e0       	ldi	r31, 0x00	; 0
    15f4:	80 81       	ld	r24, Z
    15f6:	80 68       	ori	r24, 0x80	; 128
    15f8:	8c 93       	st	X, r24
    }
    15fa:	cf 91       	pop	r28
    15fc:	df 91       	pop	r29
    15fe:	08 95       	ret

00001600 <main>:
void motorDirectionButton_ISRcallBackFunc(void);

volatile MOTOR_config motor_config = {0, FORWARD_DIR};

int main(void)
{
    1600:	df 93       	push	r29
    1602:	cf 93       	push	r28
    1604:	cd b7       	in	r28, 0x3d	; 61
    1606:	de b7       	in	r29, 0x3e	; 62
    1608:	64 97       	sbiw	r28, 0x14	; 20
    160a:	0f b6       	in	r0, 0x3f	; 63
    160c:	f8 94       	cli
    160e:	de bf       	out	0x3e, r29	; 62
    1610:	0f be       	out	0x3f, r0	; 63
    1612:	cd bf       	out	0x3d, r28	; 61
	uint8 lcd_string[15] = "Motor Speed : ";
    1614:	ce 01       	movw	r24, r28
    1616:	01 96       	adiw	r24, 0x01	; 1
    1618:	99 8b       	std	Y+17, r25	; 0x11
    161a:	88 8b       	std	Y+16, r24	; 0x10
    161c:	e0 e6       	ldi	r30, 0x60	; 96
    161e:	f0 e0       	ldi	r31, 0x00	; 0
    1620:	fb 8b       	std	Y+19, r31	; 0x13
    1622:	ea 8b       	std	Y+18, r30	; 0x12
    1624:	ff e0       	ldi	r31, 0x0F	; 15
    1626:	fc 8b       	std	Y+20, r31	; 0x14
    1628:	ea 89       	ldd	r30, Y+18	; 0x12
    162a:	fb 89       	ldd	r31, Y+19	; 0x13
    162c:	00 80       	ld	r0, Z
    162e:	8a 89       	ldd	r24, Y+18	; 0x12
    1630:	9b 89       	ldd	r25, Y+19	; 0x13
    1632:	01 96       	adiw	r24, 0x01	; 1
    1634:	9b 8b       	std	Y+19, r25	; 0x13
    1636:	8a 8b       	std	Y+18, r24	; 0x12
    1638:	e8 89       	ldd	r30, Y+16	; 0x10
    163a:	f9 89       	ldd	r31, Y+17	; 0x11
    163c:	00 82       	st	Z, r0
    163e:	88 89       	ldd	r24, Y+16	; 0x10
    1640:	99 89       	ldd	r25, Y+17	; 0x11
    1642:	01 96       	adiw	r24, 0x01	; 1
    1644:	99 8b       	std	Y+17, r25	; 0x11
    1646:	88 8b       	std	Y+16, r24	; 0x10
    1648:	9c 89       	ldd	r25, Y+20	; 0x14
    164a:	91 50       	subi	r25, 0x01	; 1
    164c:	9c 8b       	std	Y+20, r25	; 0x14
    164e:	ec 89       	ldd	r30, Y+20	; 0x14
    1650:	ee 23       	and	r30, r30
    1652:	51 f7       	brne	.-44     	; 0x1628 <main+0x28>

	__ADC_init(ADC_F_CPU_8);
    1654:	83 e0       	ldi	r24, 0x03	; 3
    1656:	0e 94 b7 06 	call	0xd6e	; 0xd6e <__ADC_init>
	_LCD_init();
    165a:	0e 94 e0 08 	call	0x11c0	; 0x11c0 <_LCD_init>
	_LCD_displayString(lcd_string);
    165e:	ce 01       	movw	r24, r28
    1660:	01 96       	adiw	r24, 0x01	; 1
    1662:	0e 94 a7 09 	call	0x134e	; 0x134e <_LCD_displayString>

	__INT2_init(RISING_EDGE);
    1666:	83 e0       	ldi	r24, 0x03	; 3
    1668:	0e 94 df 0b 	call	0x17be	; 0x17be <__INT2_init>
	__INT2_setISRCallBackFuncPointer(motorDirectionButton_ISRcallBackFunc);
    166c:	8f e8       	ldi	r24, 0x8F	; 143
    166e:	9b e0       	ldi	r25, 0x0B	; 11
    1670:	0e 94 cd 0b 	call	0x179a	; 0x179a <__INT2_setISRCallBackFuncPointer>

	while(TRUE)
	{
		motor_config.speed = ((float32)__ADC_PB_readChannel_8bits(ADC7))/255*100;
    1674:	87 e0       	ldi	r24, 0x07	; 7
    1676:	0e 94 e8 06 	call	0xdd0	; 0xdd0 <__ADC_PB_readChannel_8bits>
    167a:	88 2f       	mov	r24, r24
    167c:	90 e0       	ldi	r25, 0x00	; 0
    167e:	a0 e0       	ldi	r26, 0x00	; 0
    1680:	b0 e0       	ldi	r27, 0x00	; 0
    1682:	bc 01       	movw	r22, r24
    1684:	cd 01       	movw	r24, r26
    1686:	0e 94 49 04 	call	0x892	; 0x892 <__floatunsisf>
    168a:	dc 01       	movw	r26, r24
    168c:	cb 01       	movw	r24, r22
    168e:	bc 01       	movw	r22, r24
    1690:	cd 01       	movw	r24, r26
    1692:	20 e0       	ldi	r18, 0x00	; 0
    1694:	30 e0       	ldi	r19, 0x00	; 0
    1696:	4f e7       	ldi	r20, 0x7F	; 127
    1698:	53 e4       	ldi	r21, 0x43	; 67
    169a:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    169e:	dc 01       	movw	r26, r24
    16a0:	cb 01       	movw	r24, r22
    16a2:	bc 01       	movw	r22, r24
    16a4:	cd 01       	movw	r24, r26
    16a6:	20 e0       	ldi	r18, 0x00	; 0
    16a8:	30 e0       	ldi	r19, 0x00	; 0
    16aa:	48 ec       	ldi	r20, 0xC8	; 200
    16ac:	52 e4       	ldi	r21, 0x42	; 66
    16ae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16b2:	dc 01       	movw	r26, r24
    16b4:	cb 01       	movw	r24, r22
    16b6:	bc 01       	movw	r22, r24
    16b8:	cd 01       	movw	r24, r26
    16ba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16be:	dc 01       	movw	r26, r24
    16c0:	cb 01       	movw	r24, r22
    16c2:	80 93 91 01 	sts	0x0191, r24
		_LCD_adjustCursorPosition(1,0);
    16c6:	81 e0       	ldi	r24, 0x01	; 1
    16c8:	60 e0       	ldi	r22, 0x00	; 0
    16ca:	0e 94 1c 0a 	call	0x1438	; 0x1438 <_LCD_adjustCursorPosition>
		_LCD_displayIntegerVariable(motor_config.speed);
    16ce:	80 91 91 01 	lds	r24, 0x0191
    16d2:	88 2f       	mov	r24, r24
    16d4:	90 e0       	ldi	r25, 0x00	; 0
    16d6:	0e 94 c3 09 	call	0x1386	; 0x1386 <_LCD_displayIntegerVariable>
		if(motor_config.speed < 100)
    16da:	80 91 91 01 	lds	r24, 0x0191
    16de:	84 36       	cpi	r24, 0x64	; 100
    16e0:	18 f4       	brcc	.+6      	; 0x16e8 <main+0xe8>
		{
			_LCD_displayCharacter(' ');
    16e2:	80 e2       	ldi	r24, 0x20	; 32
    16e4:	0e 94 55 09 	call	0x12aa	; 0x12aa <_LCD_displayCharacter>
		}
		_DCMOTOR_motorOn(&motor_config);
    16e8:	81 e9       	ldi	r24, 0x91	; 145
    16ea:	91 e0       	ldi	r25, 0x01	; 1
    16ec:	0e 94 27 0c 	call	0x184e	; 0x184e <_DCMOTOR_motorOn>
		APPROX_HALF_SEC_DELAY;
    16f0:	10 92 96 01 	sts	0x0196, r1
    16f4:	10 92 95 01 	sts	0x0195, r1
    16f8:	09 c0       	rjmp	.+18     	; 0x170c <main+0x10c>
    16fa:	80 91 95 01 	lds	r24, 0x0195
    16fe:	90 91 96 01 	lds	r25, 0x0196
    1702:	01 96       	adiw	r24, 0x01	; 1
    1704:	90 93 96 01 	sts	0x0196, r25
    1708:	80 93 95 01 	sts	0x0195, r24
    170c:	80 91 95 01 	lds	r24, 0x0195
    1710:	90 91 96 01 	lds	r25, 0x0196
    1714:	f8 e8       	ldi	r31, 0x88	; 136
    1716:	88 3b       	cpi	r24, 0xB8	; 184
    1718:	9f 07       	cpc	r25, r31
    171a:	78 f3       	brcs	.-34     	; 0x16fa <main+0xfa>
    171c:	ab cf       	rjmp	.-170    	; 0x1674 <main+0x74>

0000171e <motorDirectionButton_ISRcallBackFunc>:
	}
	return 0;
}

void motorDirectionButton_ISRcallBackFunc(void)
{
    171e:	df 93       	push	r29
    1720:	cf 93       	push	r28
    1722:	cd b7       	in	r28, 0x3d	; 61
    1724:	de b7       	in	r29, 0x3e	; 62
	if(motor_config.direction == BACKWARD_DIR)
    1726:	80 91 92 01 	lds	r24, 0x0192
    172a:	81 30       	cpi	r24, 0x01	; 1
    172c:	19 f4       	brne	.+6      	; 0x1734 <motorDirectionButton_ISRcallBackFunc+0x16>
	{
		motor_config.direction = FORWARD_DIR;
    172e:	10 92 92 01 	sts	0x0192, r1
    1732:	03 c0       	rjmp	.+6      	; 0x173a <motorDirectionButton_ISRcallBackFunc+0x1c>
	}
	else
	{
		motor_config.direction = BACKWARD_DIR;
    1734:	81 e0       	ldi	r24, 0x01	; 1
    1736:	80 93 92 01 	sts	0x0192, r24
	}

}
    173a:	cf 91       	pop	r28
    173c:	df 91       	pop	r29
    173e:	08 95       	ret

00001740 <__vector_18>:
#ifdef _INT2

    /*** ISR Description:-
     * ISR Call the global pointer to function to execute desired code */
    ISR(INT2_vect)
    {
    1740:	1f 92       	push	r1
    1742:	0f 92       	push	r0
    1744:	0f b6       	in	r0, 0x3f	; 63
    1746:	0f 92       	push	r0
    1748:	11 24       	eor	r1, r1
    174a:	2f 93       	push	r18
    174c:	3f 93       	push	r19
    174e:	4f 93       	push	r20
    1750:	5f 93       	push	r21
    1752:	6f 93       	push	r22
    1754:	7f 93       	push	r23
    1756:	8f 93       	push	r24
    1758:	9f 93       	push	r25
    175a:	af 93       	push	r26
    175c:	bf 93       	push	r27
    175e:	ef 93       	push	r30
    1760:	ff 93       	push	r31
    1762:	df 93       	push	r29
    1764:	cf 93       	push	r28
    1766:	cd b7       	in	r28, 0x3d	; 61
    1768:	de b7       	in	r29, 0x3e	; 62
        (*g_INT2_callBack_ptr)();
    176a:	e0 91 93 01 	lds	r30, 0x0193
    176e:	f0 91 94 01 	lds	r31, 0x0194
    1772:	09 95       	icall
    }
    1774:	cf 91       	pop	r28
    1776:	df 91       	pop	r29
    1778:	ff 91       	pop	r31
    177a:	ef 91       	pop	r30
    177c:	bf 91       	pop	r27
    177e:	af 91       	pop	r26
    1780:	9f 91       	pop	r25
    1782:	8f 91       	pop	r24
    1784:	7f 91       	pop	r23
    1786:	6f 91       	pop	r22
    1788:	5f 91       	pop	r21
    178a:	4f 91       	pop	r20
    178c:	3f 91       	pop	r19
    178e:	2f 91       	pop	r18
    1790:	0f 90       	pop	r0
    1792:	0f be       	out	0x3f, r0	; 63
    1794:	0f 90       	pop	r0
    1796:	1f 90       	pop	r1
    1798:	18 95       	reti

0000179a <__INT2_setISRCallBackFuncPointer>:

    /*** Description:-
     * Function used to set the Global Pointer called by ISR,
     * with the Developer created function */
    void __INT2_setISRCallBackFuncPointer(void (*ptr_to_func)(void))
    {
    179a:	df 93       	push	r29
    179c:	cf 93       	push	r28
    179e:	00 d0       	rcall	.+0      	; 0x17a0 <__INT2_setISRCallBackFuncPointer+0x6>
    17a0:	cd b7       	in	r28, 0x3d	; 61
    17a2:	de b7       	in	r29, 0x3e	; 62
    17a4:	9a 83       	std	Y+2, r25	; 0x02
    17a6:	89 83       	std	Y+1, r24	; 0x01
        g_INT2_callBack_ptr = ptr_to_func;
    17a8:	89 81       	ldd	r24, Y+1	; 0x01
    17aa:	9a 81       	ldd	r25, Y+2	; 0x02
    17ac:	90 93 94 01 	sts	0x0194, r25
    17b0:	80 93 93 01 	sts	0x0193, r24
    }
    17b4:	0f 90       	pop	r0
    17b6:	0f 90       	pop	r0
    17b8:	cf 91       	pop	r28
    17ba:	df 91       	pop	r29
    17bc:	08 95       	ret

000017be <__INT2_init>:

    /*** Description:-
     * Function To enable EXT Interrupt 0, Fu Args: "sense_control"
     * sense_control Values = LOW_LOGIC /  LOGIC_CHANGE / FALLING_EDGE / RISING_EDGE */
    void __INT2_init(uint8 sense_control)
    {
    17be:	df 93       	push	r29
    17c0:	cf 93       	push	r28
    17c2:	00 d0       	rcall	.+0      	; 0x17c4 <__INT2_init+0x6>
    17c4:	0f 92       	push	r0
    17c6:	cd b7       	in	r28, 0x3d	; 61
    17c8:	de b7       	in	r29, 0x3e	; 62
    17ca:	89 83       	std	Y+1, r24	; 0x01
        /*Disable Global Interrupt Flag; Critical Section*/
        DIS_GLOBAL_INTERRUPT;
    17cc:	af e5       	ldi	r26, 0x5F	; 95
    17ce:	b0 e0       	ldi	r27, 0x00	; 0
    17d0:	ef e5       	ldi	r30, 0x5F	; 95
    17d2:	f0 e0       	ldi	r31, 0x00	; 0
    17d4:	80 81       	ld	r24, Z
    17d6:	8f 77       	andi	r24, 0x7F	; 127
    17d8:	8c 93       	st	X, r24
        /*Configure INT2/PB2 as input pin*/
        DDRB  &= (~(1<<PB2));
    17da:	a7 e3       	ldi	r26, 0x37	; 55
    17dc:	b0 e0       	ldi	r27, 0x00	; 0
    17de:	e7 e3       	ldi	r30, 0x37	; 55
    17e0:	f0 e0       	ldi	r31, 0x00	; 0
    17e2:	80 81       	ld	r24, Z
    17e4:	8b 7f       	andi	r24, 0xFB	; 251
    17e6:	8c 93       	st	X, r24
        /*write ISC2 bits according to sense control value*/
        switch(sense_control)
    17e8:	89 81       	ldd	r24, Y+1	; 0x01
    17ea:	28 2f       	mov	r18, r24
    17ec:	30 e0       	ldi	r19, 0x00	; 0
    17ee:	3b 83       	std	Y+3, r19	; 0x03
    17f0:	2a 83       	std	Y+2, r18	; 0x02
    17f2:	8a 81       	ldd	r24, Y+2	; 0x02
    17f4:	9b 81       	ldd	r25, Y+3	; 0x03
    17f6:	82 30       	cpi	r24, 0x02	; 2
    17f8:	91 05       	cpc	r25, r1
    17fa:	31 f0       	breq	.+12     	; 0x1808 <__INT2_init+0x4a>
    17fc:	2a 81       	ldd	r18, Y+2	; 0x02
    17fe:	3b 81       	ldd	r19, Y+3	; 0x03
    1800:	23 30       	cpi	r18, 0x03	; 3
    1802:	31 05       	cpc	r19, r1
    1804:	49 f0       	breq	.+18     	; 0x1818 <__INT2_init+0x5a>
    1806:	0f c0       	rjmp	.+30     	; 0x1826 <__INT2_init+0x68>
        {
            case FALLING_EDGE:
                MCUCSR &= (~(1<<ISC2));
    1808:	a4 e5       	ldi	r26, 0x54	; 84
    180a:	b0 e0       	ldi	r27, 0x00	; 0
    180c:	e4 e5       	ldi	r30, 0x54	; 84
    180e:	f0 e0       	ldi	r31, 0x00	; 0
    1810:	80 81       	ld	r24, Z
    1812:	8f 7b       	andi	r24, 0xBF	; 191
    1814:	8c 93       	st	X, r24
    1816:	07 c0       	rjmp	.+14     	; 0x1826 <__INT2_init+0x68>
            break;

            case RISING_EDGE:
                MCUCSR |= (1<<ISC2);
    1818:	a4 e5       	ldi	r26, 0x54	; 84
    181a:	b0 e0       	ldi	r27, 0x00	; 0
    181c:	e4 e5       	ldi	r30, 0x54	; 84
    181e:	f0 e0       	ldi	r31, 0x00	; 0
    1820:	80 81       	ld	r24, Z
    1822:	80 64       	ori	r24, 0x40	; 64
    1824:	8c 93       	st	X, r24
            break;

            default:break;
        }
        /*Enable (INT2) Module Interrupt flag*/
        GICR |= (1<<INT2);
    1826:	ab e5       	ldi	r26, 0x5B	; 91
    1828:	b0 e0       	ldi	r27, 0x00	; 0
    182a:	eb e5       	ldi	r30, 0x5B	; 91
    182c:	f0 e0       	ldi	r31, 0x00	; 0
    182e:	80 81       	ld	r24, Z
    1830:	80 62       	ori	r24, 0x20	; 32
    1832:	8c 93       	st	X, r24
        /*Enable Global Interrupt Flag back*/
        EN_GLOBAL_INTERRUPT;
    1834:	af e5       	ldi	r26, 0x5F	; 95
    1836:	b0 e0       	ldi	r27, 0x00	; 0
    1838:	ef e5       	ldi	r30, 0x5F	; 95
    183a:	f0 e0       	ldi	r31, 0x00	; 0
    183c:	80 81       	ld	r24, Z
    183e:	80 68       	ori	r24, 0x80	; 128
    1840:	8c 93       	st	X, r24
    }
    1842:	0f 90       	pop	r0
    1844:	0f 90       	pop	r0
    1846:	0f 90       	pop	r0
    1848:	cf 91       	pop	r28
    184a:	df 91       	pop	r29
    184c:	08 95       	ret

0000184e <_DCMOTOR_motorOn>:
/** Function Definition ******************************************************/
/* Description:-
 * Function used to start operating the MOTOR.
 */
void _DCMOTOR_motorOn(volatile const MOTOR_config *m_config_ptr)
{
    184e:	df 93       	push	r29
    1850:	cf 93       	push	r28
    1852:	cd b7       	in	r28, 0x3d	; 61
    1854:	de b7       	in	r29, 0x3e	; 62
    1856:	28 97       	sbiw	r28, 0x08	; 8
    1858:	0f b6       	in	r0, 0x3f	; 63
    185a:	f8 94       	cli
    185c:	de bf       	out	0x3e, r29	; 62
    185e:	0f be       	out	0x3f, r0	; 63
    1860:	cd bf       	out	0x3d, r28	; 61
    1862:	9e 83       	std	Y+6, r25	; 0x06
    1864:	8d 83       	std	Y+5, r24	; 0x05
	/*Speed Conversion to match exact PWM duty cycle value*/
	 uint8 duty_cycle_value = ((float32)m_config_ptr->speed)/100*254;
    1866:	ed 81       	ldd	r30, Y+5	; 0x05
    1868:	fe 81       	ldd	r31, Y+6	; 0x06
    186a:	80 81       	ld	r24, Z
    186c:	88 2f       	mov	r24, r24
    186e:	90 e0       	ldi	r25, 0x00	; 0
    1870:	a0 e0       	ldi	r26, 0x00	; 0
    1872:	b0 e0       	ldi	r27, 0x00	; 0
    1874:	bc 01       	movw	r22, r24
    1876:	cd 01       	movw	r24, r26
    1878:	0e 94 49 04 	call	0x892	; 0x892 <__floatunsisf>
    187c:	dc 01       	movw	r26, r24
    187e:	cb 01       	movw	r24, r22
    1880:	bc 01       	movw	r22, r24
    1882:	cd 01       	movw	r24, r26
    1884:	20 e0       	ldi	r18, 0x00	; 0
    1886:	30 e0       	ldi	r19, 0x00	; 0
    1888:	48 ec       	ldi	r20, 0xC8	; 200
    188a:	52 e4       	ldi	r21, 0x42	; 66
    188c:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1890:	dc 01       	movw	r26, r24
    1892:	cb 01       	movw	r24, r22
    1894:	bc 01       	movw	r22, r24
    1896:	cd 01       	movw	r24, r26
    1898:	20 e0       	ldi	r18, 0x00	; 0
    189a:	30 e0       	ldi	r19, 0x00	; 0
    189c:	4e e7       	ldi	r20, 0x7E	; 126
    189e:	53 e4       	ldi	r21, 0x43	; 67
    18a0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18a4:	dc 01       	movw	r26, r24
    18a6:	cb 01       	movw	r24, r22
    18a8:	bc 01       	movw	r22, r24
    18aa:	cd 01       	movw	r24, r26
    18ac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18b0:	dc 01       	movw	r26, r24
    18b2:	cb 01       	movw	r24, r22
    18b4:	89 83       	std	Y+1, r24	; 0x01

	/*Define the PWM config enable variable*/
	configType_PWM0 pwm0_config = {PWM_F_CPU_1024, duty_cycle_value, NON_INVERTING_MODE};
    18b6:	85 e0       	ldi	r24, 0x05	; 5
    18b8:	8a 83       	std	Y+2, r24	; 0x02
    18ba:	89 81       	ldd	r24, Y+1	; 0x01
    18bc:	8b 83       	std	Y+3, r24	; 0x03
    18be:	82 e0       	ldi	r24, 0x02	; 2
    18c0:	8c 83       	std	Y+4, r24	; 0x04

	/*Set IN1(PD7) and IN2(PD6) as Output Pins and init value LOW*/
	__DIO_setPinDirection(MOTOR_PORT_DDR, MOTOR_IN1, OUTPUT_PIN);
    18c2:	81 e0       	ldi	r24, 0x01	; 1
    18c4:	65 e0       	ldi	r22, 0x05	; 5
    18c6:	41 e0       	ldi	r20, 0x01	; 1
    18c8:	0e 94 1f 07 	call	0xe3e	; 0xe3e <__DIO_setPinDirection>
	__DIO_setPinDirection(MOTOR_PORT_DDR, MOTOR_IN2, OUTPUT_PIN);
    18cc:	81 e0       	ldi	r24, 0x01	; 1
    18ce:	64 e0       	ldi	r22, 0x04	; 4
    18d0:	41 e0       	ldi	r20, 0x01	; 1
    18d2:	0e 94 1f 07 	call	0xe3e	; 0xe3e <__DIO_setPinDirection>
	__DIO_writeOutputPinValue(MOTOR_PORT_PORT, MOTOR_IN1, LOW);
    18d6:	81 e0       	ldi	r24, 0x01	; 1
    18d8:	65 e0       	ldi	r22, 0x05	; 5
    18da:	40 e0       	ldi	r20, 0x00	; 0
    18dc:	0e 94 ae 07 	call	0xf5c	; 0xf5c <__DIO_writeOutputPinValue>
	__DIO_writeOutputPinValue(MOTOR_PORT_PORT, MOTOR_IN2, LOW);
    18e0:	81 e0       	ldi	r24, 0x01	; 1
    18e2:	64 e0       	ldi	r22, 0x04	; 4
    18e4:	40 e0       	ldi	r20, 0x00	; 0
    18e6:	0e 94 ae 07 	call	0xf5c	; 0xf5c <__DIO_writeOutputPinValue>

	/*Adjust Motor Speed by enabling PWM*/
	__PWM0_startModule(&pwm0_config);
    18ea:	ce 01       	movw	r24, r28
    18ec:	02 96       	adiw	r24, 0x02	; 2
    18ee:	0e 94 81 0a 	call	0x1502	; 0x1502 <__PWM0_startModule>

	/*Adjust Motor Direction*/
	switch( m_config_ptr->direction )
    18f2:	ed 81       	ldd	r30, Y+5	; 0x05
    18f4:	fe 81       	ldd	r31, Y+6	; 0x06
    18f6:	81 81       	ldd	r24, Z+1	; 0x01
    18f8:	28 2f       	mov	r18, r24
    18fa:	30 e0       	ldi	r19, 0x00	; 0
    18fc:	38 87       	std	Y+8, r19	; 0x08
    18fe:	2f 83       	std	Y+7, r18	; 0x07
    1900:	8f 81       	ldd	r24, Y+7	; 0x07
    1902:	98 85       	ldd	r25, Y+8	; 0x08
    1904:	00 97       	sbiw	r24, 0x00	; 0
    1906:	31 f0       	breq	.+12     	; 0x1914 <_DCMOTOR_motorOn+0xc6>
    1908:	2f 81       	ldd	r18, Y+7	; 0x07
    190a:	38 85       	ldd	r19, Y+8	; 0x08
    190c:	21 30       	cpi	r18, 0x01	; 1
    190e:	31 05       	cpc	r19, r1
    1910:	61 f0       	breq	.+24     	; 0x192a <_DCMOTOR_motorOn+0xdc>
    1912:	15 c0       	rjmp	.+42     	; 0x193e <_DCMOTOR_motorOn+0xf0>
	{
	case FORWARD_DIR:
		__DIO_writeOutputPinValue(MOTOR_PORT_PORT, MOTOR_IN1, HIGH);
    1914:	81 e0       	ldi	r24, 0x01	; 1
    1916:	65 e0       	ldi	r22, 0x05	; 5
    1918:	41 e0       	ldi	r20, 0x01	; 1
    191a:	0e 94 ae 07 	call	0xf5c	; 0xf5c <__DIO_writeOutputPinValue>
		__DIO_writeOutputPinValue(MOTOR_PORT_PORT, MOTOR_IN2, LOW);
    191e:	81 e0       	ldi	r24, 0x01	; 1
    1920:	64 e0       	ldi	r22, 0x04	; 4
    1922:	40 e0       	ldi	r20, 0x00	; 0
    1924:	0e 94 ae 07 	call	0xf5c	; 0xf5c <__DIO_writeOutputPinValue>
    1928:	0a c0       	rjmp	.+20     	; 0x193e <_DCMOTOR_motorOn+0xf0>
		break;
	case BACKWARD_DIR:
		__DIO_writeOutputPinValue(MOTOR_PORT_PORT, MOTOR_IN1, LOW);
    192a:	81 e0       	ldi	r24, 0x01	; 1
    192c:	65 e0       	ldi	r22, 0x05	; 5
    192e:	40 e0       	ldi	r20, 0x00	; 0
    1930:	0e 94 ae 07 	call	0xf5c	; 0xf5c <__DIO_writeOutputPinValue>
		__DIO_writeOutputPinValue(MOTOR_PORT_PORT, MOTOR_IN2, HIGH);
    1934:	81 e0       	ldi	r24, 0x01	; 1
    1936:	64 e0       	ldi	r22, 0x04	; 4
    1938:	41 e0       	ldi	r20, 0x01	; 1
    193a:	0e 94 ae 07 	call	0xf5c	; 0xf5c <__DIO_writeOutputPinValue>
		break;
	default:break;
	}
}
    193e:	28 96       	adiw	r28, 0x08	; 8
    1940:	0f b6       	in	r0, 0x3f	; 63
    1942:	f8 94       	cli
    1944:	de bf       	out	0x3e, r29	; 62
    1946:	0f be       	out	0x3f, r0	; 63
    1948:	cd bf       	out	0x3d, r28	; 61
    194a:	cf 91       	pop	r28
    194c:	df 91       	pop	r29
    194e:	08 95       	ret

00001950 <_DCMOTOR_motorOff>:

/* Description:-
 * Function used to stop operating the MOTOR.
 */
void _DCMOTOR_motorOff(void)
{
    1950:	df 93       	push	r29
    1952:	cf 93       	push	r28
    1954:	cd b7       	in	r28, 0x3d	; 61
    1956:	de b7       	in	r29, 0x3e	; 62
	/*Stop PWM Signal as well as IN pins*/
	__PWM0_stopModule();
    1958:	0e 94 e8 0a 	call	0x15d0	; 0x15d0 <__PWM0_stopModule>
	__DIO_writeOutputPinValue(MOTOR_PORT_PORT, MOTOR_IN1, LOW);
    195c:	81 e0       	ldi	r24, 0x01	; 1
    195e:	65 e0       	ldi	r22, 0x05	; 5
    1960:	40 e0       	ldi	r20, 0x00	; 0
    1962:	0e 94 ae 07 	call	0xf5c	; 0xf5c <__DIO_writeOutputPinValue>
	__DIO_writeOutputPinValue(MOTOR_PORT_PORT, MOTOR_IN2, LOW);
    1966:	81 e0       	ldi	r24, 0x01	; 1
    1968:	64 e0       	ldi	r22, 0x04	; 4
    196a:	40 e0       	ldi	r20, 0x00	; 0
    196c:	0e 94 ae 07 	call	0xf5c	; 0xf5c <__DIO_writeOutputPinValue>
}
    1970:	cf 91       	pop	r28
    1972:	df 91       	pop	r29
    1974:	08 95       	ret

00001976 <__udivmodhi4>:
    1976:	aa 1b       	sub	r26, r26
    1978:	bb 1b       	sub	r27, r27
    197a:	51 e1       	ldi	r21, 0x11	; 17
    197c:	07 c0       	rjmp	.+14     	; 0x198c <__udivmodhi4_ep>

0000197e <__udivmodhi4_loop>:
    197e:	aa 1f       	adc	r26, r26
    1980:	bb 1f       	adc	r27, r27
    1982:	a6 17       	cp	r26, r22
    1984:	b7 07       	cpc	r27, r23
    1986:	10 f0       	brcs	.+4      	; 0x198c <__udivmodhi4_ep>
    1988:	a6 1b       	sub	r26, r22
    198a:	b7 0b       	sbc	r27, r23

0000198c <__udivmodhi4_ep>:
    198c:	88 1f       	adc	r24, r24
    198e:	99 1f       	adc	r25, r25
    1990:	5a 95       	dec	r21
    1992:	a9 f7       	brne	.-22     	; 0x197e <__udivmodhi4_loop>
    1994:	80 95       	com	r24
    1996:	90 95       	com	r25
    1998:	bc 01       	movw	r22, r24
    199a:	cd 01       	movw	r24, r26
    199c:	08 95       	ret

0000199e <__prologue_saves__>:
    199e:	2f 92       	push	r2
    19a0:	3f 92       	push	r3
    19a2:	4f 92       	push	r4
    19a4:	5f 92       	push	r5
    19a6:	6f 92       	push	r6
    19a8:	7f 92       	push	r7
    19aa:	8f 92       	push	r8
    19ac:	9f 92       	push	r9
    19ae:	af 92       	push	r10
    19b0:	bf 92       	push	r11
    19b2:	cf 92       	push	r12
    19b4:	df 92       	push	r13
    19b6:	ef 92       	push	r14
    19b8:	ff 92       	push	r15
    19ba:	0f 93       	push	r16
    19bc:	1f 93       	push	r17
    19be:	cf 93       	push	r28
    19c0:	df 93       	push	r29
    19c2:	cd b7       	in	r28, 0x3d	; 61
    19c4:	de b7       	in	r29, 0x3e	; 62
    19c6:	ca 1b       	sub	r28, r26
    19c8:	db 0b       	sbc	r29, r27
    19ca:	0f b6       	in	r0, 0x3f	; 63
    19cc:	f8 94       	cli
    19ce:	de bf       	out	0x3e, r29	; 62
    19d0:	0f be       	out	0x3f, r0	; 63
    19d2:	cd bf       	out	0x3d, r28	; 61
    19d4:	09 94       	ijmp

000019d6 <__epilogue_restores__>:
    19d6:	2a 88       	ldd	r2, Y+18	; 0x12
    19d8:	39 88       	ldd	r3, Y+17	; 0x11
    19da:	48 88       	ldd	r4, Y+16	; 0x10
    19dc:	5f 84       	ldd	r5, Y+15	; 0x0f
    19de:	6e 84       	ldd	r6, Y+14	; 0x0e
    19e0:	7d 84       	ldd	r7, Y+13	; 0x0d
    19e2:	8c 84       	ldd	r8, Y+12	; 0x0c
    19e4:	9b 84       	ldd	r9, Y+11	; 0x0b
    19e6:	aa 84       	ldd	r10, Y+10	; 0x0a
    19e8:	b9 84       	ldd	r11, Y+9	; 0x09
    19ea:	c8 84       	ldd	r12, Y+8	; 0x08
    19ec:	df 80       	ldd	r13, Y+7	; 0x07
    19ee:	ee 80       	ldd	r14, Y+6	; 0x06
    19f0:	fd 80       	ldd	r15, Y+5	; 0x05
    19f2:	0c 81       	ldd	r16, Y+4	; 0x04
    19f4:	1b 81       	ldd	r17, Y+3	; 0x03
    19f6:	aa 81       	ldd	r26, Y+2	; 0x02
    19f8:	b9 81       	ldd	r27, Y+1	; 0x01
    19fa:	ce 0f       	add	r28, r30
    19fc:	d1 1d       	adc	r29, r1
    19fe:	0f b6       	in	r0, 0x3f	; 63
    1a00:	f8 94       	cli
    1a02:	de bf       	out	0x3e, r29	; 62
    1a04:	0f be       	out	0x3f, r0	; 63
    1a06:	cd bf       	out	0x3d, r28	; 61
    1a08:	ed 01       	movw	r28, r26
    1a0a:	08 95       	ret

00001a0c <_exit>:
    1a0c:	f8 94       	cli

00001a0e <__stop_program>:
    1a0e:	ff cf       	rjmp	.-2      	; 0x1a0e <__stop_program>
