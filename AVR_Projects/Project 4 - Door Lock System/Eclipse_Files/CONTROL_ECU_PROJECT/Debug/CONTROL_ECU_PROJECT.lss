
CONTROL_ECU_PROJECT.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001df4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000022  00800060  00001df4  00001e88  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000017  00800082  00800082  00001eaa  2**0
                  ALLOC
  3 .stab         00002154  00000000  00000000  00001eac  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001201  00000000  00000000  00004000  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 4b 0d 	jmp	0x1a96	; 0x1a96 <__vector_6>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 1e 0d 	jmp	0x1a3c	; 0x1a3c <__vector_19>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e4 ef       	ldi	r30, 0xF4	; 244
      68:	fd e1       	ldi	r31, 0x1D	; 29
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a2 38       	cpi	r26, 0x82	; 130
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a2 e8       	ldi	r26, 0x82	; 130
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a9 39       	cpi	r26, 0x99	; 153
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 3d 04 	call	0x87a	; 0x87a <main>
      8a:	0c 94 f8 0e 	jmp	0x1df0	; 0x1df0 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__DIO_setPinDirection>:
/** Functions Definitions ****************************************************/

/*** Description:-
 * Adjust the DDR_x Registers for Desired PXX with needed direction */
void  __DIO_setPinDirection(uint8 port_name,uint8 pin_name,uint8 direction)
{
      92:	df 93       	push	r29
      94:	cf 93       	push	r28
      96:	00 d0       	rcall	.+0      	; 0x98 <__DIO_setPinDirection+0x6>
      98:	0f 92       	push	r0
      9a:	cd b7       	in	r28, 0x3d	; 61
      9c:	de b7       	in	r29, 0x3e	; 62
      9e:	89 83       	std	Y+1, r24	; 0x01
      a0:	6a 83       	std	Y+2, r22	; 0x02
      a2:	4b 83       	std	Y+3, r20	; 0x03
    if( direction == OUTPUT_PIN )
      a4:	8b 81       	ldd	r24, Y+3	; 0x03
      a6:	81 30       	cpi	r24, 0x01	; 1
      a8:	29 f5       	brne	.+74     	; 0xf4 <__DIO_setPinDirection+0x62>
    {
        SET_BIT(*ddr_regs[port_name], pin_name);
      aa:	89 81       	ldd	r24, Y+1	; 0x01
      ac:	88 2f       	mov	r24, r24
      ae:	90 e0       	ldi	r25, 0x00	; 0
      b0:	88 0f       	add	r24, r24
      b2:	99 1f       	adc	r25, r25
      b4:	fc 01       	movw	r30, r24
      b6:	eb 59       	subi	r30, 0x9B	; 155
      b8:	ff 4f       	sbci	r31, 0xFF	; 255
      ba:	a0 81       	ld	r26, Z
      bc:	b1 81       	ldd	r27, Z+1	; 0x01
      be:	89 81       	ldd	r24, Y+1	; 0x01
      c0:	88 2f       	mov	r24, r24
      c2:	90 e0       	ldi	r25, 0x00	; 0
      c4:	88 0f       	add	r24, r24
      c6:	99 1f       	adc	r25, r25
      c8:	fc 01       	movw	r30, r24
      ca:	eb 59       	subi	r30, 0x9B	; 155
      cc:	ff 4f       	sbci	r31, 0xFF	; 255
      ce:	01 90       	ld	r0, Z+
      d0:	f0 81       	ld	r31, Z
      d2:	e0 2d       	mov	r30, r0
      d4:	80 81       	ld	r24, Z
      d6:	48 2f       	mov	r20, r24
      d8:	8a 81       	ldd	r24, Y+2	; 0x02
      da:	28 2f       	mov	r18, r24
      dc:	30 e0       	ldi	r19, 0x00	; 0
      de:	81 e0       	ldi	r24, 0x01	; 1
      e0:	90 e0       	ldi	r25, 0x00	; 0
      e2:	02 2e       	mov	r0, r18
      e4:	02 c0       	rjmp	.+4      	; 0xea <__DIO_setPinDirection+0x58>
      e6:	88 0f       	add	r24, r24
      e8:	99 1f       	adc	r25, r25
      ea:	0a 94       	dec	r0
      ec:	e2 f7       	brpl	.-8      	; 0xe6 <__DIO_setPinDirection+0x54>
      ee:	84 2b       	or	r24, r20
      f0:	8c 93       	st	X, r24
      f2:	28 c0       	rjmp	.+80     	; 0x144 <__DIO_setPinDirection+0xb2>
    }
    else if( direction == INPUT_PIN )
      f4:	8b 81       	ldd	r24, Y+3	; 0x03
      f6:	88 23       	and	r24, r24
      f8:	29 f5       	brne	.+74     	; 0x144 <__DIO_setPinDirection+0xb2>
    {
        CLR_BIT(*ddr_regs[port_name], pin_name);
      fa:	89 81       	ldd	r24, Y+1	; 0x01
      fc:	88 2f       	mov	r24, r24
      fe:	90 e0       	ldi	r25, 0x00	; 0
     100:	88 0f       	add	r24, r24
     102:	99 1f       	adc	r25, r25
     104:	fc 01       	movw	r30, r24
     106:	eb 59       	subi	r30, 0x9B	; 155
     108:	ff 4f       	sbci	r31, 0xFF	; 255
     10a:	a0 81       	ld	r26, Z
     10c:	b1 81       	ldd	r27, Z+1	; 0x01
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	88 2f       	mov	r24, r24
     112:	90 e0       	ldi	r25, 0x00	; 0
     114:	88 0f       	add	r24, r24
     116:	99 1f       	adc	r25, r25
     118:	fc 01       	movw	r30, r24
     11a:	eb 59       	subi	r30, 0x9B	; 155
     11c:	ff 4f       	sbci	r31, 0xFF	; 255
     11e:	01 90       	ld	r0, Z+
     120:	f0 81       	ld	r31, Z
     122:	e0 2d       	mov	r30, r0
     124:	80 81       	ld	r24, Z
     126:	48 2f       	mov	r20, r24
     128:	8a 81       	ldd	r24, Y+2	; 0x02
     12a:	28 2f       	mov	r18, r24
     12c:	30 e0       	ldi	r19, 0x00	; 0
     12e:	81 e0       	ldi	r24, 0x01	; 1
     130:	90 e0       	ldi	r25, 0x00	; 0
     132:	02 2e       	mov	r0, r18
     134:	02 c0       	rjmp	.+4      	; 0x13a <__DIO_setPinDirection+0xa8>
     136:	88 0f       	add	r24, r24
     138:	99 1f       	adc	r25, r25
     13a:	0a 94       	dec	r0
     13c:	e2 f7       	brpl	.-8      	; 0x136 <__DIO_setPinDirection+0xa4>
     13e:	80 95       	com	r24
     140:	84 23       	and	r24, r20
     142:	8c 93       	st	X, r24
    }
    else{}
}
     144:	0f 90       	pop	r0
     146:	0f 90       	pop	r0
     148:	0f 90       	pop	r0
     14a:	cf 91       	pop	r28
     14c:	df 91       	pop	r29
     14e:	08 95       	ret

00000150 <__DIO_enableInternalPullupResistance>:


/*** Description:-
 * Enable Internal Pullup Resistor for the Input Pin */
void  __DIO_enableInternalPullupResistance(uint8 port_name,uint8 pin_name)
{
     150:	df 93       	push	r29
     152:	cf 93       	push	r28
     154:	00 d0       	rcall	.+0      	; 0x156 <__DIO_enableInternalPullupResistance+0x6>
     156:	cd b7       	in	r28, 0x3d	; 61
     158:	de b7       	in	r29, 0x3e	; 62
     15a:	89 83       	std	Y+1, r24	; 0x01
     15c:	6a 83       	std	Y+2, r22	; 0x02
    SET_BIT(*port_regs[port_name], pin_name);
     15e:	89 81       	ldd	r24, Y+1	; 0x01
     160:	88 2f       	mov	r24, r24
     162:	90 e0       	ldi	r25, 0x00	; 0
     164:	88 0f       	add	r24, r24
     166:	99 1f       	adc	r25, r25
     168:	fc 01       	movw	r30, r24
     16a:	eb 58       	subi	r30, 0x8B	; 139
     16c:	ff 4f       	sbci	r31, 0xFF	; 255
     16e:	a0 81       	ld	r26, Z
     170:	b1 81       	ldd	r27, Z+1	; 0x01
     172:	89 81       	ldd	r24, Y+1	; 0x01
     174:	88 2f       	mov	r24, r24
     176:	90 e0       	ldi	r25, 0x00	; 0
     178:	88 0f       	add	r24, r24
     17a:	99 1f       	adc	r25, r25
     17c:	fc 01       	movw	r30, r24
     17e:	eb 58       	subi	r30, 0x8B	; 139
     180:	ff 4f       	sbci	r31, 0xFF	; 255
     182:	01 90       	ld	r0, Z+
     184:	f0 81       	ld	r31, Z
     186:	e0 2d       	mov	r30, r0
     188:	80 81       	ld	r24, Z
     18a:	48 2f       	mov	r20, r24
     18c:	8a 81       	ldd	r24, Y+2	; 0x02
     18e:	28 2f       	mov	r18, r24
     190:	30 e0       	ldi	r19, 0x00	; 0
     192:	81 e0       	ldi	r24, 0x01	; 1
     194:	90 e0       	ldi	r25, 0x00	; 0
     196:	02 2e       	mov	r0, r18
     198:	02 c0       	rjmp	.+4      	; 0x19e <__DIO_enableInternalPullupResistance+0x4e>
     19a:	88 0f       	add	r24, r24
     19c:	99 1f       	adc	r25, r25
     19e:	0a 94       	dec	r0
     1a0:	e2 f7       	brpl	.-8      	; 0x19a <__DIO_enableInternalPullupResistance+0x4a>
     1a2:	84 2b       	or	r24, r20
     1a4:	8c 93       	st	X, r24
}
     1a6:	0f 90       	pop	r0
     1a8:	0f 90       	pop	r0
     1aa:	cf 91       	pop	r28
     1ac:	df 91       	pop	r29
     1ae:	08 95       	ret

000001b0 <__DIO_writeOutputPinValue>:


/*** Description:-
 * Output a Digital Value over the Output Pin */
void  __DIO_writeOutputPinValue(uint8 port_name,uint8 pin_name,uint8 value)
{
     1b0:	df 93       	push	r29
     1b2:	cf 93       	push	r28
     1b4:	00 d0       	rcall	.+0      	; 0x1b6 <__DIO_writeOutputPinValue+0x6>
     1b6:	0f 92       	push	r0
     1b8:	cd b7       	in	r28, 0x3d	; 61
     1ba:	de b7       	in	r29, 0x3e	; 62
     1bc:	89 83       	std	Y+1, r24	; 0x01
     1be:	6a 83       	std	Y+2, r22	; 0x02
     1c0:	4b 83       	std	Y+3, r20	; 0x03
    if( value == HIGH )
     1c2:	8b 81       	ldd	r24, Y+3	; 0x03
     1c4:	81 30       	cpi	r24, 0x01	; 1
     1c6:	29 f5       	brne	.+74     	; 0x212 <__DIO_writeOutputPinValue+0x62>
    {
        SET_BIT(*port_regs[port_name], pin_name);
     1c8:	89 81       	ldd	r24, Y+1	; 0x01
     1ca:	88 2f       	mov	r24, r24
     1cc:	90 e0       	ldi	r25, 0x00	; 0
     1ce:	88 0f       	add	r24, r24
     1d0:	99 1f       	adc	r25, r25
     1d2:	fc 01       	movw	r30, r24
     1d4:	eb 58       	subi	r30, 0x8B	; 139
     1d6:	ff 4f       	sbci	r31, 0xFF	; 255
     1d8:	a0 81       	ld	r26, Z
     1da:	b1 81       	ldd	r27, Z+1	; 0x01
     1dc:	89 81       	ldd	r24, Y+1	; 0x01
     1de:	88 2f       	mov	r24, r24
     1e0:	90 e0       	ldi	r25, 0x00	; 0
     1e2:	88 0f       	add	r24, r24
     1e4:	99 1f       	adc	r25, r25
     1e6:	fc 01       	movw	r30, r24
     1e8:	eb 58       	subi	r30, 0x8B	; 139
     1ea:	ff 4f       	sbci	r31, 0xFF	; 255
     1ec:	01 90       	ld	r0, Z+
     1ee:	f0 81       	ld	r31, Z
     1f0:	e0 2d       	mov	r30, r0
     1f2:	80 81       	ld	r24, Z
     1f4:	48 2f       	mov	r20, r24
     1f6:	8a 81       	ldd	r24, Y+2	; 0x02
     1f8:	28 2f       	mov	r18, r24
     1fa:	30 e0       	ldi	r19, 0x00	; 0
     1fc:	81 e0       	ldi	r24, 0x01	; 1
     1fe:	90 e0       	ldi	r25, 0x00	; 0
     200:	02 2e       	mov	r0, r18
     202:	02 c0       	rjmp	.+4      	; 0x208 <__DIO_writeOutputPinValue+0x58>
     204:	88 0f       	add	r24, r24
     206:	99 1f       	adc	r25, r25
     208:	0a 94       	dec	r0
     20a:	e2 f7       	brpl	.-8      	; 0x204 <__DIO_writeOutputPinValue+0x54>
     20c:	84 2b       	or	r24, r20
     20e:	8c 93       	st	X, r24
     210:	28 c0       	rjmp	.+80     	; 0x262 <__DIO_writeOutputPinValue+0xb2>
    }
    else if( value == LOW )
     212:	8b 81       	ldd	r24, Y+3	; 0x03
     214:	88 23       	and	r24, r24
     216:	29 f5       	brne	.+74     	; 0x262 <__DIO_writeOutputPinValue+0xb2>
    {
        CLR_BIT(*port_regs[port_name], pin_name);
     218:	89 81       	ldd	r24, Y+1	; 0x01
     21a:	88 2f       	mov	r24, r24
     21c:	90 e0       	ldi	r25, 0x00	; 0
     21e:	88 0f       	add	r24, r24
     220:	99 1f       	adc	r25, r25
     222:	fc 01       	movw	r30, r24
     224:	eb 58       	subi	r30, 0x8B	; 139
     226:	ff 4f       	sbci	r31, 0xFF	; 255
     228:	a0 81       	ld	r26, Z
     22a:	b1 81       	ldd	r27, Z+1	; 0x01
     22c:	89 81       	ldd	r24, Y+1	; 0x01
     22e:	88 2f       	mov	r24, r24
     230:	90 e0       	ldi	r25, 0x00	; 0
     232:	88 0f       	add	r24, r24
     234:	99 1f       	adc	r25, r25
     236:	fc 01       	movw	r30, r24
     238:	eb 58       	subi	r30, 0x8B	; 139
     23a:	ff 4f       	sbci	r31, 0xFF	; 255
     23c:	01 90       	ld	r0, Z+
     23e:	f0 81       	ld	r31, Z
     240:	e0 2d       	mov	r30, r0
     242:	80 81       	ld	r24, Z
     244:	48 2f       	mov	r20, r24
     246:	8a 81       	ldd	r24, Y+2	; 0x02
     248:	28 2f       	mov	r18, r24
     24a:	30 e0       	ldi	r19, 0x00	; 0
     24c:	81 e0       	ldi	r24, 0x01	; 1
     24e:	90 e0       	ldi	r25, 0x00	; 0
     250:	02 2e       	mov	r0, r18
     252:	02 c0       	rjmp	.+4      	; 0x258 <__DIO_writeOutputPinValue+0xa8>
     254:	88 0f       	add	r24, r24
     256:	99 1f       	adc	r25, r25
     258:	0a 94       	dec	r0
     25a:	e2 f7       	brpl	.-8      	; 0x254 <__DIO_writeOutputPinValue+0xa4>
     25c:	80 95       	com	r24
     25e:	84 23       	and	r24, r20
     260:	8c 93       	st	X, r24
    }
    else{}
}
     262:	0f 90       	pop	r0
     264:	0f 90       	pop	r0
     266:	0f 90       	pop	r0
     268:	cf 91       	pop	r28
     26a:	df 91       	pop	r29
     26c:	08 95       	ret

0000026e <__DIO_readInputPinValue>:


/*** Description:-
 * Read and fetch the Digital Value from a Pin */
uint8 __DIO_readInputPinValue(uint8 port_name,uint8 pin_name)
{
     26e:	df 93       	push	r29
     270:	cf 93       	push	r28
     272:	00 d0       	rcall	.+0      	; 0x274 <__DIO_readInputPinValue+0x6>
     274:	cd b7       	in	r28, 0x3d	; 61
     276:	de b7       	in	r29, 0x3e	; 62
     278:	89 83       	std	Y+1, r24	; 0x01
     27a:	6a 83       	std	Y+2, r22	; 0x02
    return READ_BIT(*pin_regs[port_name], pin_name);
     27c:	89 81       	ldd	r24, Y+1	; 0x01
     27e:	88 2f       	mov	r24, r24
     280:	90 e0       	ldi	r25, 0x00	; 0
     282:	88 0f       	add	r24, r24
     284:	99 1f       	adc	r25, r25
     286:	fc 01       	movw	r30, r24
     288:	e3 59       	subi	r30, 0x93	; 147
     28a:	ff 4f       	sbci	r31, 0xFF	; 255
     28c:	01 90       	ld	r0, Z+
     28e:	f0 81       	ld	r31, Z
     290:	e0 2d       	mov	r30, r0
     292:	80 81       	ld	r24, Z
     294:	48 2f       	mov	r20, r24
     296:	50 e0       	ldi	r21, 0x00	; 0
     298:	8a 81       	ldd	r24, Y+2	; 0x02
     29a:	28 2f       	mov	r18, r24
     29c:	30 e0       	ldi	r19, 0x00	; 0
     29e:	81 e0       	ldi	r24, 0x01	; 1
     2a0:	90 e0       	ldi	r25, 0x00	; 0
     2a2:	02 c0       	rjmp	.+4      	; 0x2a8 <__DIO_readInputPinValue+0x3a>
     2a4:	88 0f       	add	r24, r24
     2a6:	99 1f       	adc	r25, r25
     2a8:	2a 95       	dec	r18
     2aa:	e2 f7       	brpl	.-8      	; 0x2a4 <__DIO_readInputPinValue+0x36>
     2ac:	9a 01       	movw	r18, r20
     2ae:	28 23       	and	r18, r24
     2b0:	39 23       	and	r19, r25
     2b2:	8a 81       	ldd	r24, Y+2	; 0x02
     2b4:	88 2f       	mov	r24, r24
     2b6:	90 e0       	ldi	r25, 0x00	; 0
     2b8:	a9 01       	movw	r20, r18
     2ba:	02 c0       	rjmp	.+4      	; 0x2c0 <__DIO_readInputPinValue+0x52>
     2bc:	55 95       	asr	r21
     2be:	47 95       	ror	r20
     2c0:	8a 95       	dec	r24
     2c2:	e2 f7       	brpl	.-8      	; 0x2bc <__DIO_readInputPinValue+0x4e>
     2c4:	ca 01       	movw	r24, r20
}
     2c6:	0f 90       	pop	r0
     2c8:	0f 90       	pop	r0
     2ca:	cf 91       	pop	r28
     2cc:	df 91       	pop	r29
     2ce:	08 95       	ret

000002d0 <__DIO_toggleOutputPinValue>:


/*** Description:-
 * Toggle the Value of Output Pin */
void  __DIO_toggleOutputPinValue(uint8 port_name,uint8 pin_name)
{
     2d0:	df 93       	push	r29
     2d2:	cf 93       	push	r28
     2d4:	00 d0       	rcall	.+0      	; 0x2d6 <__DIO_toggleOutputPinValue+0x6>
     2d6:	cd b7       	in	r28, 0x3d	; 61
     2d8:	de b7       	in	r29, 0x3e	; 62
     2da:	89 83       	std	Y+1, r24	; 0x01
     2dc:	6a 83       	std	Y+2, r22	; 0x02
    TGL_BIT(*port_regs[port_name], pin_name);
     2de:	89 81       	ldd	r24, Y+1	; 0x01
     2e0:	88 2f       	mov	r24, r24
     2e2:	90 e0       	ldi	r25, 0x00	; 0
     2e4:	88 0f       	add	r24, r24
     2e6:	99 1f       	adc	r25, r25
     2e8:	fc 01       	movw	r30, r24
     2ea:	eb 58       	subi	r30, 0x8B	; 139
     2ec:	ff 4f       	sbci	r31, 0xFF	; 255
     2ee:	a0 81       	ld	r26, Z
     2f0:	b1 81       	ldd	r27, Z+1	; 0x01
     2f2:	89 81       	ldd	r24, Y+1	; 0x01
     2f4:	88 2f       	mov	r24, r24
     2f6:	90 e0       	ldi	r25, 0x00	; 0
     2f8:	88 0f       	add	r24, r24
     2fa:	99 1f       	adc	r25, r25
     2fc:	fc 01       	movw	r30, r24
     2fe:	eb 58       	subi	r30, 0x8B	; 139
     300:	ff 4f       	sbci	r31, 0xFF	; 255
     302:	01 90       	ld	r0, Z+
     304:	f0 81       	ld	r31, Z
     306:	e0 2d       	mov	r30, r0
     308:	80 81       	ld	r24, Z
     30a:	48 2f       	mov	r20, r24
     30c:	8a 81       	ldd	r24, Y+2	; 0x02
     30e:	28 2f       	mov	r18, r24
     310:	30 e0       	ldi	r19, 0x00	; 0
     312:	81 e0       	ldi	r24, 0x01	; 1
     314:	90 e0       	ldi	r25, 0x00	; 0
     316:	02 2e       	mov	r0, r18
     318:	02 c0       	rjmp	.+4      	; 0x31e <__DIO_toggleOutputPinValue+0x4e>
     31a:	88 0f       	add	r24, r24
     31c:	99 1f       	adc	r25, r25
     31e:	0a 94       	dec	r0
     320:	e2 f7       	brpl	.-8      	; 0x31a <__DIO_toggleOutputPinValue+0x4a>
     322:	84 27       	eor	r24, r20
     324:	8c 93       	st	X, r24
}
     326:	0f 90       	pop	r0
     328:	0f 90       	pop	r0
     32a:	cf 91       	pop	r28
     32c:	df 91       	pop	r29
     32e:	08 95       	ret

00000330 <__DIO_setPortDirection>:


/*** Description:-
 * Adjust the DDR_x Registers for Whole PORT with needed direction */
void  __DIO_setPortDirection(uint8 port_name, uint8 direction)
{
     330:	df 93       	push	r29
     332:	cf 93       	push	r28
     334:	00 d0       	rcall	.+0      	; 0x336 <__DIO_setPortDirection+0x6>
     336:	cd b7       	in	r28, 0x3d	; 61
     338:	de b7       	in	r29, 0x3e	; 62
     33a:	89 83       	std	Y+1, r24	; 0x01
     33c:	6a 83       	std	Y+2, r22	; 0x02
    if( direction == OUTPUT_PORT )
     33e:	8a 81       	ldd	r24, Y+2	; 0x02
     340:	81 30       	cpi	r24, 0x01	; 1
     342:	71 f4       	brne	.+28     	; 0x360 <__DIO_setPortDirection+0x30>
    {
        *ddr_regs[port_name] = 0xFF;
     344:	89 81       	ldd	r24, Y+1	; 0x01
     346:	88 2f       	mov	r24, r24
     348:	90 e0       	ldi	r25, 0x00	; 0
     34a:	88 0f       	add	r24, r24
     34c:	99 1f       	adc	r25, r25
     34e:	fc 01       	movw	r30, r24
     350:	eb 59       	subi	r30, 0x9B	; 155
     352:	ff 4f       	sbci	r31, 0xFF	; 255
     354:	01 90       	ld	r0, Z+
     356:	f0 81       	ld	r31, Z
     358:	e0 2d       	mov	r30, r0
     35a:	8f ef       	ldi	r24, 0xFF	; 255
     35c:	80 83       	st	Z, r24
     35e:	0f c0       	rjmp	.+30     	; 0x37e <__DIO_setPortDirection+0x4e>
    }
    else if( direction == INPUT_PORT )
     360:	8a 81       	ldd	r24, Y+2	; 0x02
     362:	88 23       	and	r24, r24
     364:	61 f4       	brne	.+24     	; 0x37e <__DIO_setPortDirection+0x4e>
    {
        *ddr_regs[port_name] = 0x00;
     366:	89 81       	ldd	r24, Y+1	; 0x01
     368:	88 2f       	mov	r24, r24
     36a:	90 e0       	ldi	r25, 0x00	; 0
     36c:	88 0f       	add	r24, r24
     36e:	99 1f       	adc	r25, r25
     370:	fc 01       	movw	r30, r24
     372:	eb 59       	subi	r30, 0x9B	; 155
     374:	ff 4f       	sbci	r31, 0xFF	; 255
     376:	01 90       	ld	r0, Z+
     378:	f0 81       	ld	r31, Z
     37a:	e0 2d       	mov	r30, r0
     37c:	10 82       	st	Z, r1
    }
    else{}
}
     37e:	0f 90       	pop	r0
     380:	0f 90       	pop	r0
     382:	cf 91       	pop	r28
     384:	df 91       	pop	r29
     386:	08 95       	ret

00000388 <__DIO_enablePortInternalPullupResistance>:


/*** Description:-
 * Enable Internal Pullup Resistor for whole PORT Input Pins */
void  __DIO_enablePortInternalPullupResistance(uint8 port_name)
{
     388:	df 93       	push	r29
     38a:	cf 93       	push	r28
     38c:	0f 92       	push	r0
     38e:	cd b7       	in	r28, 0x3d	; 61
     390:	de b7       	in	r29, 0x3e	; 62
     392:	89 83       	std	Y+1, r24	; 0x01
    *port_regs[port_name] = 0xFF;
     394:	89 81       	ldd	r24, Y+1	; 0x01
     396:	88 2f       	mov	r24, r24
     398:	90 e0       	ldi	r25, 0x00	; 0
     39a:	88 0f       	add	r24, r24
     39c:	99 1f       	adc	r25, r25
     39e:	fc 01       	movw	r30, r24
     3a0:	eb 58       	subi	r30, 0x8B	; 139
     3a2:	ff 4f       	sbci	r31, 0xFF	; 255
     3a4:	01 90       	ld	r0, Z+
     3a6:	f0 81       	ld	r31, Z
     3a8:	e0 2d       	mov	r30, r0
     3aa:	8f ef       	ldi	r24, 0xFF	; 255
     3ac:	80 83       	st	Z, r24
}
     3ae:	0f 90       	pop	r0
     3b0:	cf 91       	pop	r28
     3b2:	df 91       	pop	r29
     3b4:	08 95       	ret

000003b6 <__DIO_writeOutputPortValue>:


/*** Description:-
 * Output a Digital Values over PORT Output Pins */
void  __DIO_writeOutputPortValue(uint8 port_name,uint8 value)
{
     3b6:	df 93       	push	r29
     3b8:	cf 93       	push	r28
     3ba:	00 d0       	rcall	.+0      	; 0x3bc <__DIO_writeOutputPortValue+0x6>
     3bc:	cd b7       	in	r28, 0x3d	; 61
     3be:	de b7       	in	r29, 0x3e	; 62
     3c0:	89 83       	std	Y+1, r24	; 0x01
     3c2:	6a 83       	std	Y+2, r22	; 0x02
    *port_regs[port_name] = value;
     3c4:	89 81       	ldd	r24, Y+1	; 0x01
     3c6:	88 2f       	mov	r24, r24
     3c8:	90 e0       	ldi	r25, 0x00	; 0
     3ca:	88 0f       	add	r24, r24
     3cc:	99 1f       	adc	r25, r25
     3ce:	fc 01       	movw	r30, r24
     3d0:	eb 58       	subi	r30, 0x8B	; 139
     3d2:	ff 4f       	sbci	r31, 0xFF	; 255
     3d4:	01 90       	ld	r0, Z+
     3d6:	f0 81       	ld	r31, Z
     3d8:	e0 2d       	mov	r30, r0
     3da:	8a 81       	ldd	r24, Y+2	; 0x02
     3dc:	80 83       	st	Z, r24
}
     3de:	0f 90       	pop	r0
     3e0:	0f 90       	pop	r0
     3e2:	cf 91       	pop	r28
     3e4:	df 91       	pop	r29
     3e6:	08 95       	ret

000003e8 <__DIO_readInputPortValue>:


/*** Description:-
 * Read and fetch the Digital Values from PORT Pins */
uint8 __DIO_readInputPortValue(uint8 port_name)
{
     3e8:	df 93       	push	r29
     3ea:	cf 93       	push	r28
     3ec:	0f 92       	push	r0
     3ee:	cd b7       	in	r28, 0x3d	; 61
     3f0:	de b7       	in	r29, 0x3e	; 62
     3f2:	89 83       	std	Y+1, r24	; 0x01
    return *pin_regs[port_name];
     3f4:	89 81       	ldd	r24, Y+1	; 0x01
     3f6:	88 2f       	mov	r24, r24
     3f8:	90 e0       	ldi	r25, 0x00	; 0
     3fa:	88 0f       	add	r24, r24
     3fc:	99 1f       	adc	r25, r25
     3fe:	fc 01       	movw	r30, r24
     400:	e3 59       	subi	r30, 0x93	; 147
     402:	ff 4f       	sbci	r31, 0xFF	; 255
     404:	01 90       	ld	r0, Z+
     406:	f0 81       	ld	r31, Z
     408:	e0 2d       	mov	r30, r0
     40a:	80 81       	ld	r24, Z
}
     40c:	0f 90       	pop	r0
     40e:	cf 91       	pop	r28
     410:	df 91       	pop	r29
     412:	08 95       	ret

00000414 <__TWI_init>:
 *  - Bit Rate Equation = (F_CPU/16+(2*TWBR*PRESCALE_VALUE))
 *  - TWPS_value    : PRESCALE_1 / PRESCALE_4 / PRESCALE_16 / PRESCALE_64
 *  - TWBR_value    : values from 0 to 255
 *  - TWI_myAddress : values from 0 to 128*/
void  __TWI_init(const TWI_config *p_TWI_config)
{
     414:	df 93       	push	r29
     416:	cf 93       	push	r28
     418:	00 d0       	rcall	.+0      	; 0x41a <__TWI_init+0x6>
     41a:	cd b7       	in	r28, 0x3d	; 61
     41c:	de b7       	in	r29, 0x3e	; 62
     41e:	9a 83       	std	Y+2, r25	; 0x02
     420:	89 83       	std	Y+1, r24	; 0x01
    /*Set the TWBR value for Bitrate adjusting in TWBR Register*/
    TWBR = p_TWI_config->TWBR_value;
     422:	a0 e2       	ldi	r26, 0x20	; 32
     424:	b0 e0       	ldi	r27, 0x00	; 0
     426:	e9 81       	ldd	r30, Y+1	; 0x01
     428:	fa 81       	ldd	r31, Y+2	; 0x02
     42a:	82 81       	ldd	r24, Z+2	; 0x02
     42c:	8c 93       	st	X, r24

    /*Set the TWPS value for Bitrate adjusting in TWBR Register*/
    TWSR = (TWSR&0b11111100) | (p_TWI_config->TWPS_value);
     42e:	a1 e2       	ldi	r26, 0x21	; 33
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	e1 e2       	ldi	r30, 0x21	; 33
     434:	f0 e0       	ldi	r31, 0x00	; 0
     436:	80 81       	ld	r24, Z
     438:	28 2f       	mov	r18, r24
     43a:	2c 7f       	andi	r18, 0xFC	; 252
     43c:	e9 81       	ldd	r30, Y+1	; 0x01
     43e:	fa 81       	ldd	r31, Y+2	; 0x02
     440:	80 81       	ld	r24, Z
     442:	91 81       	ldd	r25, Z+1	; 0x01
     444:	82 2b       	or	r24, r18
     446:	8c 93       	st	X, r24

    /*Set the System Module Identification Address*/
    TWAR = p_TWI_config->TWI_myAddress;
     448:	a2 e2       	ldi	r26, 0x22	; 34
     44a:	b0 e0       	ldi	r27, 0x00	; 0
     44c:	e9 81       	ldd	r30, Y+1	; 0x01
     44e:	fa 81       	ldd	r31, Y+2	; 0x02
     450:	83 81       	ldd	r24, Z+3	; 0x03
     452:	8c 93       	st	X, r24

    /*Enable TWI Module TWI Enable Pin*/
    SET_BIT(TWCR, TWEN);
     454:	a6 e5       	ldi	r26, 0x56	; 86
     456:	b0 e0       	ldi	r27, 0x00	; 0
     458:	e6 e5       	ldi	r30, 0x56	; 86
     45a:	f0 e0       	ldi	r31, 0x00	; 0
     45c:	80 81       	ld	r24, Z
     45e:	84 60       	ori	r24, 0x04	; 4
     460:	8c 93       	st	X, r24
}
     462:	0f 90       	pop	r0
     464:	0f 90       	pop	r0
     466:	cf 91       	pop	r28
     468:	df 91       	pop	r29
     46a:	08 95       	ret

0000046c <__TWI_startFrame>:

/*** Description:-
 * Function Used to send start bit for a Frame
 */
void  __TWI_startFrame(void)
{
     46c:	df 93       	push	r29
     46e:	cf 93       	push	r28
     470:	cd b7       	in	r28, 0x3d	; 61
     472:	de b7       	in	r29, 0x3e	; 62
     * - TWSTA = 1
     *Re-Enable TWI Module again
     * - TWEN = 1
     *Disable and Clear any other bit in the Register
     */
    TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN);
     474:	e6 e5       	ldi	r30, 0x56	; 86
     476:	f0 e0       	ldi	r31, 0x00	; 0
     478:	84 ea       	ldi	r24, 0xA4	; 164
     47a:	80 83       	st	Z, r24
    
    /* Wait for TWINT flag set in TWCR Register (start bit is send successfully) */
    while( READ_BIT(TWCR,TWINT)==LOW );
     47c:	e6 e5       	ldi	r30, 0x56	; 86
     47e:	f0 e0       	ldi	r31, 0x00	; 0
     480:	80 81       	ld	r24, Z
     482:	88 1f       	adc	r24, r24
     484:	88 27       	eor	r24, r24
     486:	88 1f       	adc	r24, r24
     488:	88 2f       	mov	r24, r24
     48a:	90 e0       	ldi	r25, 0x00	; 0
     48c:	90 70       	andi	r25, 0x00	; 0
     48e:	00 97       	sbiw	r24, 0x00	; 0
     490:	a9 f3       	breq	.-22     	; 0x47c <__TWI_startFrame+0x10>
}
     492:	cf 91       	pop	r28
     494:	df 91       	pop	r29
     496:	08 95       	ret

00000498 <__TWI_stopFrame>:

/*** Description:-
 *  Function Used to send stop bit for a Frame
 */
void  __TWI_stopFrame(void)
{
     498:	df 93       	push	r29
     49a:	cf 93       	push	r28
     49c:	cd b7       	in	r28, 0x3d	; 61
     49e:	de b7       	in	r29, 0x3e	; 62
     * - TWSTO = 1
     *Re-Enable TWI Module again
     * - TWEN = 1
     *Disable and Clear any other bit in the Register
     */
    TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN);
     4a0:	e6 e5       	ldi	r30, 0x56	; 86
     4a2:	f0 e0       	ldi	r31, 0x00	; 0
     4a4:	84 e9       	ldi	r24, 0x94	; 148
     4a6:	80 83       	st	Z, r24
    
    /* No Need to wait after stop frame bit, TWI won't be used */
}
     4a8:	cf 91       	pop	r28
     4aa:	df 91       	pop	r29
     4ac:	08 95       	ret

000004ae <__TWI_transmitByte>:

/*** Description:-
 * Function Used to send a Byte bit in a Frame 
 */
void  __TWI_transmitByte(uint8 data)
{
     4ae:	df 93       	push	r29
     4b0:	cf 93       	push	r28
     4b2:	0f 92       	push	r0
     4b4:	cd b7       	in	r28, 0x3d	; 61
     4b6:	de b7       	in	r29, 0x3e	; 62
     4b8:	89 83       	std	Y+1, r24	; 0x01
    /*Send data in TWDR Register to be ready for transmission*/
    TWDR = data;
     4ba:	e3 e2       	ldi	r30, 0x23	; 35
     4bc:	f0 e0       	ldi	r31, 0x00	; 0
     4be:	89 81       	ldd	r24, Y+1	; 0x01
     4c0:	80 83       	st	Z, r24
     * - TWINT = 1
     *Re-Enable TWI Module again
     * - TWEN = 1
     *Disable and Clear any other bit in the Register
     */
    TWCR = (1 << TWINT) | (1 << TWEN);
     4c2:	e6 e5       	ldi	r30, 0x56	; 86
     4c4:	f0 e0       	ldi	r31, 0x00	; 0
     4c6:	84 e8       	ldi	r24, 0x84	; 132
     4c8:	80 83       	st	Z, r24
    
    /* Wait for TWINT flag set in TWCR Register (start bit is send successfully) */
    while( READ_BIT(TWCR,TWINT)==LOW );    
     4ca:	e6 e5       	ldi	r30, 0x56	; 86
     4cc:	f0 e0       	ldi	r31, 0x00	; 0
     4ce:	80 81       	ld	r24, Z
     4d0:	88 1f       	adc	r24, r24
     4d2:	88 27       	eor	r24, r24
     4d4:	88 1f       	adc	r24, r24
     4d6:	88 2f       	mov	r24, r24
     4d8:	90 e0       	ldi	r25, 0x00	; 0
     4da:	90 70       	andi	r25, 0x00	; 0
     4dc:	00 97       	sbiw	r24, 0x00	; 0
     4de:	a9 f3       	breq	.-22     	; 0x4ca <__TWI_transmitByte+0x1c>
}
     4e0:	0f 90       	pop	r0
     4e2:	cf 91       	pop	r28
     4e4:	df 91       	pop	r29
     4e6:	08 95       	ret

000004e8 <__TWI_receiveByte_ACK>:

/*** Description:-
 * Function Used to receive a Byte bit from a Frame and send ACK
 */
uint8 __TWI_receiveByte_ACK(void)
{
     4e8:	df 93       	push	r29
     4ea:	cf 93       	push	r28
     4ec:	cd b7       	in	r28, 0x3d	; 61
     4ee:	de b7       	in	r29, 0x3e	; 62
     * - TWEA = 1
     *Re-Enable TWI Module again
     * - TWEN = 1
     *Disable and Clear any other bit in the Register
     */
    TWCR = (1 << TWINT) | (1 << TWEA) | (1 << TWEN);
     4f0:	e6 e5       	ldi	r30, 0x56	; 86
     4f2:	f0 e0       	ldi	r31, 0x00	; 0
     4f4:	84 ec       	ldi	r24, 0xC4	; 196
     4f6:	80 83       	st	Z, r24

    /* Wait for TWINT flag set in TWCR Register (start bit is send successfully) */
    while( READ_BIT(TWCR,TWINT)==LOW );
     4f8:	e6 e5       	ldi	r30, 0x56	; 86
     4fa:	f0 e0       	ldi	r31, 0x00	; 0
     4fc:	80 81       	ld	r24, Z
     4fe:	88 1f       	adc	r24, r24
     500:	88 27       	eor	r24, r24
     502:	88 1f       	adc	r24, r24
     504:	88 2f       	mov	r24, r24
     506:	90 e0       	ldi	r25, 0x00	; 0
     508:	90 70       	andi	r25, 0x00	; 0
     50a:	00 97       	sbiw	r24, 0x00	; 0
     50c:	a9 f3       	breq	.-22     	; 0x4f8 <__TWI_receiveByte_ACK+0x10>

    /*fetch the received Data*/
    return TWDR;
     50e:	e3 e2       	ldi	r30, 0x23	; 35
     510:	f0 e0       	ldi	r31, 0x00	; 0
     512:	80 81       	ld	r24, Z
}
     514:	cf 91       	pop	r28
     516:	df 91       	pop	r29
     518:	08 95       	ret

0000051a <__TWI_receiveByte_NACK>:

/*** Description:-
 * Function Used to receive a Byte bit from a Frame and DOESN'T send ACK
 */
uint8 __TWI_receiveByte_NACK(void)
{
     51a:	df 93       	push	r29
     51c:	cf 93       	push	r28
     51e:	cd b7       	in	r28, 0x3d	; 61
     520:	de b7       	in	r29, 0x3e	; 62
     * - TWINT = 1
     *Re-Enable TWI Module again
     * - TWEN = 1
     *Disable and Clear any other bit in the Register
     */
    TWCR = (1 << TWINT) | (1 << TWEN);
     522:	e6 e5       	ldi	r30, 0x56	; 86
     524:	f0 e0       	ldi	r31, 0x00	; 0
     526:	84 e8       	ldi	r24, 0x84	; 132
     528:	80 83       	st	Z, r24

    /* Wait for TWINT flag set in TWCR Register (start bit is send successfully) */
    while( READ_BIT(TWCR,TWINT)==LOW);
     52a:	e6 e5       	ldi	r30, 0x56	; 86
     52c:	f0 e0       	ldi	r31, 0x00	; 0
     52e:	80 81       	ld	r24, Z
     530:	88 1f       	adc	r24, r24
     532:	88 27       	eor	r24, r24
     534:	88 1f       	adc	r24, r24
     536:	88 2f       	mov	r24, r24
     538:	90 e0       	ldi	r25, 0x00	; 0
     53a:	90 70       	andi	r25, 0x00	; 0
     53c:	00 97       	sbiw	r24, 0x00	; 0
     53e:	a9 f3       	breq	.-22     	; 0x52a <__TWI_receiveByte_NACK+0x10>

    /*fetch the received Data*/
    return TWDR;
     540:	e3 e2       	ldi	r30, 0x23	; 35
     542:	f0 e0       	ldi	r31, 0x00	; 0
     544:	80 81       	ld	r24, Z
}
     546:	cf 91       	pop	r28
     548:	df 91       	pop	r29
     54a:	08 95       	ret

0000054c <__TWI_getStatus>:

/*** Description:-
 * Function Used to Read Status of the Action done
 */
uint8 __TWI_getStatus(void)
{
     54c:	df 93       	push	r29
     54e:	cf 93       	push	r28
     550:	0f 92       	push	r0
     552:	cd b7       	in	r28, 0x3d	; 61
     554:	de b7       	in	r29, 0x3e	; 62
    uint8 status;

    /* Masking to eliminate first 3 bits and read the HEXA Values as it is */
    status = TWSR & 0xF8;
     556:	e1 e2       	ldi	r30, 0x21	; 33
     558:	f0 e0       	ldi	r31, 0x00	; 0
     55a:	80 81       	ld	r24, Z
     55c:	88 7f       	andi	r24, 0xF8	; 248
     55e:	89 83       	std	Y+1, r24	; 0x01
    
    return status;
     560:	89 81       	ldd	r24, Y+1	; 0x01
}
     562:	0f 90       	pop	r0
     564:	cf 91       	pop	r28
     566:	df 91       	pop	r29
     568:	08 95       	ret

0000056a <__UART_init>:
 *  - baud_rate: 100 / 200 / 300 / 1200 / 2400 / 4800 / 9600 / 19200 / 38400 / 57600 / 115200
 *  - data_size: 5 / 6 / 7 / 8 / 9
 *  - stop_bit: TWO_STOP_BITS / TWO_STOP_BITS
 *  - parity: EVEN_PARITY / ODD_PARITY */
void __UART_init(const UART_config *p_uart_config)
{
     56a:	0f 93       	push	r16
     56c:	1f 93       	push	r17
     56e:	df 93       	push	r29
     570:	cf 93       	push	r28
     572:	00 d0       	rcall	.+0      	; 0x574 <__UART_init+0xa>
     574:	cd b7       	in	r28, 0x3d	; 61
     576:	de b7       	in	r29, 0x3e	; 62
     578:	9a 83       	std	Y+2, r25	; 0x02
     57a:	89 83       	std	Y+1, r24	; 0x01
    /*Enable Parity Error LED O/P for Error Indication*/
    #if(PARITY_ENABLE)
    SET_BIT(PARITY_ERROR_DDR, PARITY_ERROR_PIN);
    #endif
    /*UART Double Speed Transmission*/
    SET_BIT(UCSRA, U2X);
     57c:	ab e2       	ldi	r26, 0x2B	; 43
     57e:	b0 e0       	ldi	r27, 0x00	; 0
     580:	eb e2       	ldi	r30, 0x2B	; 43
     582:	f0 e0       	ldi	r31, 0x00	; 0
     584:	80 81       	ld	r24, Z
     586:	82 60       	ori	r24, 0x02	; 2
     588:	8c 93       	st	X, r24
    /*if module configured to Use ISR in RX mode, Enable Rx Complete Interrupt Enable bit*/
    #ifdef RX_ISR_BASED
        SET_BIT(UCSRB, RXICE);
    #endif
    /*Enable Module for Transmitting*/
    SET_BIT(UCSRB, TXEN);
     58a:	aa e2       	ldi	r26, 0x2A	; 42
     58c:	b0 e0       	ldi	r27, 0x00	; 0
     58e:	ea e2       	ldi	r30, 0x2A	; 42
     590:	f0 e0       	ldi	r31, 0x00	; 0
     592:	80 81       	ld	r24, Z
     594:	88 60       	ori	r24, 0x08	; 8
     596:	8c 93       	st	X, r24
    /*Enable Module for Receiving*/
    SET_BIT(UCSRB, RXEN);
     598:	aa e2       	ldi	r26, 0x2A	; 42
     59a:	b0 e0       	ldi	r27, 0x00	; 0
     59c:	ea e2       	ldi	r30, 0x2A	; 42
     59e:	f0 e0       	ldi	r31, 0x00	; 0
     5a0:	80 81       	ld	r24, Z
     5a2:	80 61       	ori	r24, 0x10	; 16
     5a4:	8c 93       	st	X, r24
     * USBS: Stop Bit Select: According to Function Configs.
     * UCSZ1:0: Character Size: According to Function Configs.
     * UCPOL: Clock Polarity: According to Static Config
     *****************************************************************/  
    /*Select UCSRC URSEL=1*/
    SET_BIT(UCSRC, URSEL);
     5a6:	a0 e4       	ldi	r26, 0x40	; 64
     5a8:	b0 e0       	ldi	r27, 0x00	; 0
     5aa:	e0 e4       	ldi	r30, 0x40	; 64
     5ac:	f0 e0       	ldi	r31, 0x00	; 0
     5ae:	80 81       	ld	r24, Z
     5b0:	80 68       	ori	r24, 0x80	; 128
     5b2:	8c 93       	st	X, r24
    /*Adjust Data Size in frame*/
    UCSRC = (UCSRC&0b11111001) | ((p_uart_config->data_size&0b00000011)<<1);
     5b4:	a0 e4       	ldi	r26, 0x40	; 64
     5b6:	b0 e0       	ldi	r27, 0x00	; 0
     5b8:	e0 e4       	ldi	r30, 0x40	; 64
     5ba:	f0 e0       	ldi	r31, 0x00	; 0
     5bc:	80 81       	ld	r24, Z
     5be:	28 2f       	mov	r18, r24
     5c0:	29 7f       	andi	r18, 0xF9	; 249
     5c2:	e9 81       	ldd	r30, Y+1	; 0x01
     5c4:	fa 81       	ldd	r31, Y+2	; 0x02
     5c6:	82 81       	ldd	r24, Z+2	; 0x02
     5c8:	88 2f       	mov	r24, r24
     5ca:	90 e0       	ldi	r25, 0x00	; 0
     5cc:	83 70       	andi	r24, 0x03	; 3
     5ce:	90 70       	andi	r25, 0x00	; 0
     5d0:	88 0f       	add	r24, r24
     5d2:	99 1f       	adc	r25, r25
     5d4:	82 2b       	or	r24, r18
     5d6:	8c 93       	st	X, r24
    /*Set UART in ASYNC Mode*/
    CLR_BIT(UCSRC, UMSEL);
     5d8:	a0 e4       	ldi	r26, 0x40	; 64
     5da:	b0 e0       	ldi	r27, 0x00	; 0
     5dc:	e0 e4       	ldi	r30, 0x40	; 64
     5de:	f0 e0       	ldi	r31, 0x00	; 0
     5e0:	80 81       	ld	r24, Z
     5e2:	8f 7b       	andi	r24, 0xBF	; 191
     5e4:	8c 93       	st	X, r24
    /*Set UART parity Mode*/
    UCSRC = (UCSRC&0b11001111) | ((p_uart_config->parity)<<4);
     5e6:	a0 e4       	ldi	r26, 0x40	; 64
     5e8:	b0 e0       	ldi	r27, 0x00	; 0
     5ea:	e0 e4       	ldi	r30, 0x40	; 64
     5ec:	f0 e0       	ldi	r31, 0x00	; 0
     5ee:	80 81       	ld	r24, Z
     5f0:	28 2f       	mov	r18, r24
     5f2:	2f 7c       	andi	r18, 0xCF	; 207
     5f4:	e9 81       	ldd	r30, Y+1	; 0x01
     5f6:	fa 81       	ldd	r31, Y+2	; 0x02
     5f8:	84 81       	ldd	r24, Z+4	; 0x04
     5fa:	88 2f       	mov	r24, r24
     5fc:	90 e0       	ldi	r25, 0x00	; 0
     5fe:	82 95       	swap	r24
     600:	92 95       	swap	r25
     602:	90 7f       	andi	r25, 0xF0	; 240
     604:	98 27       	eor	r25, r24
     606:	80 7f       	andi	r24, 0xF0	; 240
     608:	98 27       	eor	r25, r24
     60a:	82 2b       	or	r24, r18
     60c:	8c 93       	st	X, r24
    /*Set Stop Bit Config*/
    UCSRC = (UCSRC&0b11110111) | ((p_uart_config->stop_bit)<<3);
     60e:	a0 e4       	ldi	r26, 0x40	; 64
     610:	b0 e0       	ldi	r27, 0x00	; 0
     612:	e0 e4       	ldi	r30, 0x40	; 64
     614:	f0 e0       	ldi	r31, 0x00	; 0
     616:	80 81       	ld	r24, Z
     618:	28 2f       	mov	r18, r24
     61a:	27 7f       	andi	r18, 0xF7	; 247
     61c:	e9 81       	ldd	r30, Y+1	; 0x01
     61e:	fa 81       	ldd	r31, Y+2	; 0x02
     620:	83 81       	ldd	r24, Z+3	; 0x03
     622:	88 2f       	mov	r24, r24
     624:	90 e0       	ldi	r25, 0x00	; 0
     626:	88 0f       	add	r24, r24
     628:	99 1f       	adc	r25, r25
     62a:	88 0f       	add	r24, r24
     62c:	99 1f       	adc	r25, r25
     62e:	88 0f       	add	r24, r24
     630:	99 1f       	adc	r25, r25
     632:	82 2b       	or	r24, r18
     634:	8c 93       	st	X, r24

    /****************UBRRH and UBRRL Registers Description**************
     * The URSEL must be zero when writing the UBRRH.
     * UBRR11:0: USART Baud Rate Register, adjust 12 bit with desired baudrate
     *****************************************************************/ 
    CLR_BIT(UBRRH, URSEL);
     636:	a0 e4       	ldi	r26, 0x40	; 64
     638:	b0 e0       	ldi	r27, 0x00	; 0
     63a:	e0 e4       	ldi	r30, 0x40	; 64
     63c:	f0 e0       	ldi	r31, 0x00	; 0
     63e:	80 81       	ld	r24, Z
     640:	8f 77       	andi	r24, 0x7F	; 127
     642:	8c 93       	st	X, r24
    UBRRL = (uint8)(UBRR_VALUE_CALC(p_uart_config->baud_rate));
     644:	09 e2       	ldi	r16, 0x29	; 41
     646:	10 e0       	ldi	r17, 0x00	; 0
     648:	e9 81       	ldd	r30, Y+1	; 0x01
     64a:	fa 81       	ldd	r31, Y+2	; 0x02
     64c:	80 81       	ld	r24, Z
     64e:	91 81       	ldd	r25, Z+1	; 0x01
     650:	cc 01       	movw	r24, r24
     652:	a0 e0       	ldi	r26, 0x00	; 0
     654:	b0 e0       	ldi	r27, 0x00	; 0
     656:	88 0f       	add	r24, r24
     658:	99 1f       	adc	r25, r25
     65a:	aa 1f       	adc	r26, r26
     65c:	bb 1f       	adc	r27, r27
     65e:	88 0f       	add	r24, r24
     660:	99 1f       	adc	r25, r25
     662:	aa 1f       	adc	r26, r26
     664:	bb 1f       	adc	r27, r27
     666:	88 0f       	add	r24, r24
     668:	99 1f       	adc	r25, r25
     66a:	aa 1f       	adc	r26, r26
     66c:	bb 1f       	adc	r27, r27
     66e:	9c 01       	movw	r18, r24
     670:	ad 01       	movw	r20, r26
     672:	80 e4       	ldi	r24, 0x40	; 64
     674:	92 e4       	ldi	r25, 0x42	; 66
     676:	af e0       	ldi	r26, 0x0F	; 15
     678:	b0 e0       	ldi	r27, 0x00	; 0
     67a:	bc 01       	movw	r22, r24
     67c:	cd 01       	movw	r24, r26
     67e:	0e 94 d6 0e 	call	0x1dac	; 0x1dac <__udivmodsi4>
     682:	da 01       	movw	r26, r20
     684:	c9 01       	movw	r24, r18
     686:	81 50       	subi	r24, 0x01	; 1
     688:	f8 01       	movw	r30, r16
     68a:	80 83       	st	Z, r24
    UBRRH = (UBRR_VALUE_CALC(p_uart_config->baud_rate))>>8;
     68c:	00 e4       	ldi	r16, 0x40	; 64
     68e:	10 e0       	ldi	r17, 0x00	; 0
     690:	e9 81       	ldd	r30, Y+1	; 0x01
     692:	fa 81       	ldd	r31, Y+2	; 0x02
     694:	80 81       	ld	r24, Z
     696:	91 81       	ldd	r25, Z+1	; 0x01
     698:	cc 01       	movw	r24, r24
     69a:	a0 e0       	ldi	r26, 0x00	; 0
     69c:	b0 e0       	ldi	r27, 0x00	; 0
     69e:	88 0f       	add	r24, r24
     6a0:	99 1f       	adc	r25, r25
     6a2:	aa 1f       	adc	r26, r26
     6a4:	bb 1f       	adc	r27, r27
     6a6:	88 0f       	add	r24, r24
     6a8:	99 1f       	adc	r25, r25
     6aa:	aa 1f       	adc	r26, r26
     6ac:	bb 1f       	adc	r27, r27
     6ae:	88 0f       	add	r24, r24
     6b0:	99 1f       	adc	r25, r25
     6b2:	aa 1f       	adc	r26, r26
     6b4:	bb 1f       	adc	r27, r27
     6b6:	9c 01       	movw	r18, r24
     6b8:	ad 01       	movw	r20, r26
     6ba:	80 e4       	ldi	r24, 0x40	; 64
     6bc:	92 e4       	ldi	r25, 0x42	; 66
     6be:	af e0       	ldi	r26, 0x0F	; 15
     6c0:	b0 e0       	ldi	r27, 0x00	; 0
     6c2:	bc 01       	movw	r22, r24
     6c4:	cd 01       	movw	r24, r26
     6c6:	0e 94 d6 0e 	call	0x1dac	; 0x1dac <__udivmodsi4>
     6ca:	da 01       	movw	r26, r20
     6cc:	c9 01       	movw	r24, r18
     6ce:	01 97       	sbiw	r24, 0x01	; 1
     6d0:	a1 09       	sbc	r26, r1
     6d2:	b1 09       	sbc	r27, r1
     6d4:	89 2f       	mov	r24, r25
     6d6:	9a 2f       	mov	r25, r26
     6d8:	ab 2f       	mov	r26, r27
     6da:	bb 27       	eor	r27, r27
     6dc:	f8 01       	movw	r30, r16
     6de:	80 83       	st	Z, r24
}
     6e0:	0f 90       	pop	r0
     6e2:	0f 90       	pop	r0
     6e4:	cf 91       	pop	r28
     6e6:	df 91       	pop	r29
     6e8:	1f 91       	pop	r17
     6ea:	0f 91       	pop	r16
     6ec:	08 95       	ret

000006ee <__UART_sendByte>:


/*** Description:-
 * Function used to send a byte*/
void __UART_sendByte(const uint8 u8Data)
{
     6ee:	df 93       	push	r29
     6f0:	cf 93       	push	r28
     6f2:	0f 92       	push	r0
     6f4:	cd b7       	in	r28, 0x3d	; 61
     6f6:	de b7       	in	r29, 0x3e	; 62
     6f8:	89 83       	std	Y+1, r24	; 0x01
    /*Delay made to make sure the UDR Register is Empty before Transmitting*/
    while( READ_BIT(UCSRA, UDRE)==LOW );
     6fa:	eb e2       	ldi	r30, 0x2B	; 43
     6fc:	f0 e0       	ldi	r31, 0x00	; 0
     6fe:	80 81       	ld	r24, Z
     700:	88 2f       	mov	r24, r24
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	80 72       	andi	r24, 0x20	; 32
     706:	90 70       	andi	r25, 0x00	; 0
     708:	95 95       	asr	r25
     70a:	87 95       	ror	r24
     70c:	95 95       	asr	r25
     70e:	87 95       	ror	r24
     710:	95 95       	asr	r25
     712:	87 95       	ror	r24
     714:	95 95       	asr	r25
     716:	87 95       	ror	r24
     718:	95 95       	asr	r25
     71a:	87 95       	ror	r24
     71c:	00 97       	sbiw	r24, 0x00	; 0
     71e:	69 f3       	breq	.-38     	; 0x6fa <__UART_sendByte+0xc>
    /*Put desired message in UDR Register to be sent*/
    UDR = u8Data;
     720:	ec e2       	ldi	r30, 0x2C	; 44
     722:	f0 e0       	ldi	r31, 0x00	; 0
     724:	89 81       	ldd	r24, Y+1	; 0x01
     726:	80 83       	st	Z, r24
}
     728:	0f 90       	pop	r0
     72a:	cf 91       	pop	r28
     72c:	df 91       	pop	r29
     72e:	08 95       	ret

00000730 <__UART_sendString>:


/*** Description:-
 * Function used to send a string, pass string array_name by address*/
void __UART_sendString(const uint8 *p_string)
{
     730:	df 93       	push	r29
     732:	cf 93       	push	r28
     734:	00 d0       	rcall	.+0      	; 0x736 <__UART_sendString+0x6>
     736:	cd b7       	in	r28, 0x3d	; 61
     738:	de b7       	in	r29, 0x3e	; 62
     73a:	9a 83       	std	Y+2, r25	; 0x02
     73c:	89 83       	std	Y+1, r24	; 0x01
     73e:	0a c0       	rjmp	.+20     	; 0x754 <__UART_sendString+0x24>
    while( *p_string != '\0' )
    {
        __UART_sendByte(*p_string);
     740:	e9 81       	ldd	r30, Y+1	; 0x01
     742:	fa 81       	ldd	r31, Y+2	; 0x02
     744:	80 81       	ld	r24, Z
     746:	0e 94 77 03 	call	0x6ee	; 0x6ee <__UART_sendByte>
        p_string++;
     74a:	89 81       	ldd	r24, Y+1	; 0x01
     74c:	9a 81       	ldd	r25, Y+2	; 0x02
     74e:	01 96       	adiw	r24, 0x01	; 1
     750:	9a 83       	std	Y+2, r25	; 0x02
     752:	89 83       	std	Y+1, r24	; 0x01

/*** Description:-
 * Function used to send a string, pass string array_name by address*/
void __UART_sendString(const uint8 *p_string)
{
    while( *p_string != '\0' )
     754:	e9 81       	ldd	r30, Y+1	; 0x01
     756:	fa 81       	ldd	r31, Y+2	; 0x02
     758:	80 81       	ld	r24, Z
     75a:	88 23       	and	r24, r24
     75c:	89 f7       	brne	.-30     	; 0x740 <__UART_sendString+0x10>
    {
        __UART_sendByte(*p_string);
        p_string++;
    }
}
     75e:	0f 90       	pop	r0
     760:	0f 90       	pop	r0
     762:	cf 91       	pop	r28
     764:	df 91       	pop	r29
     766:	08 95       	ret

00000768 <__UART_receiveByte>:
#ifdef RX_POLLING_BASED 

    /*** Description:-
     * Function used to receive a byte*/
    uint8 __UART_receiveByte(void)
    {
     768:	df 93       	push	r29
     76a:	cf 93       	push	r28
     76c:	0f 92       	push	r0
     76e:	cd b7       	in	r28, 0x3d	; 61
     770:	de b7       	in	r29, 0x3e	; 62
        /*Delay made to make sure the UDR Register has unread received message*/
        while( READ_BIT(UCSRA, RXC)==LOW );
     772:	eb e2       	ldi	r30, 0x2B	; 43
     774:	f0 e0       	ldi	r31, 0x00	; 0
     776:	80 81       	ld	r24, Z
     778:	88 1f       	adc	r24, r24
     77a:	88 27       	eor	r24, r24
     77c:	88 1f       	adc	r24, r24
     77e:	88 2f       	mov	r24, r24
     780:	90 e0       	ldi	r25, 0x00	; 0
     782:	90 70       	andi	r25, 0x00	; 0
     784:	00 97       	sbiw	r24, 0x00	; 0
     786:	a9 f3       	breq	.-22     	; 0x772 <__UART_receiveByte+0xa>


        if( READ_BIT(UCSRA, PE)==LOW )
     788:	eb e2       	ldi	r30, 0x2B	; 43
     78a:	f0 e0       	ldi	r31, 0x00	; 0
     78c:	80 81       	ld	r24, Z
     78e:	88 2f       	mov	r24, r24
     790:	90 e0       	ldi	r25, 0x00	; 0
     792:	84 70       	andi	r24, 0x04	; 4
     794:	90 70       	andi	r25, 0x00	; 0
     796:	95 95       	asr	r25
     798:	87 95       	ror	r24
     79a:	95 95       	asr	r25
     79c:	87 95       	ror	r24
     79e:	00 97       	sbiw	r24, 0x00	; 0
     7a0:	29 f4       	brne	.+10     	; 0x7ac <__UART_receiveByte+0x44>
        {
            /*fetch the received message*/
            return UDR;
     7a2:	ec e2       	ldi	r30, 0x2C	; 44
     7a4:	f0 e0       	ldi	r31, 0x00	; 0
     7a6:	80 81       	ld	r24, Z
     7a8:	89 83       	std	Y+1, r24	; 0x01
     7aa:	01 c0       	rjmp	.+2      	; 0x7ae <__UART_receiveByte+0x46>
        else
        {
            #if(PARITY_ENABLE)
            SET_BIT(PARITY_ERROR_PORT, PARITY_ERROR_PIN);
            #endif
            return 0; 
     7ac:	19 82       	std	Y+1, r1	; 0x01
     7ae:	89 81       	ldd	r24, Y+1	; 0x01
        }
    }
     7b0:	0f 90       	pop	r0
     7b2:	cf 91       	pop	r28
     7b4:	df 91       	pop	r29
     7b6:	08 95       	ret

000007b8 <__UART_receiveString>:
    /*** Description:-
     * -IMPORTANT_NOTE__Send String Size at beginning before sending string
     * Function used to receive whole string, pass string{Array_name} By address 
     * and function will fill that variable with received values*/
    void __UART_receiveString(uint8 *p_string)
    {
     7b8:	df 93       	push	r29
     7ba:	cf 93       	push	r28
     7bc:	00 d0       	rcall	.+0      	; 0x7be <__UART_receiveString+0x6>
     7be:	00 d0       	rcall	.+0      	; 0x7c0 <__UART_receiveString+0x8>
     7c0:	cd b7       	in	r28, 0x3d	; 61
     7c2:	de b7       	in	r29, 0x3e	; 62
     7c4:	9c 83       	std	Y+4, r25	; 0x04
     7c6:	8b 83       	std	Y+3, r24	; 0x03
        uint8 i=0,string_size;
     7c8:	1a 82       	std	Y+2, r1	; 0x02

        /*Receive First the String Size*/
        string_size = __UART_receiveByte();
     7ca:	0e 94 b4 03 	call	0x768	; 0x768 <__UART_receiveByte>
     7ce:	89 83       	std	Y+1, r24	; 0x01

        /*Fill the passed array by address with received string*/
        for(i=0 ; i<string_size ; i++)
     7d0:	1a 82       	std	Y+2, r1	; 0x02
     7d2:	0d c0       	rjmp	.+26     	; 0x7ee <__UART_receiveString+0x36>
        {
            *p_string = __UART_receiveByte();
     7d4:	0e 94 b4 03 	call	0x768	; 0x768 <__UART_receiveByte>
     7d8:	eb 81       	ldd	r30, Y+3	; 0x03
     7da:	fc 81       	ldd	r31, Y+4	; 0x04
     7dc:	80 83       	st	Z, r24
            p_string++;
     7de:	8b 81       	ldd	r24, Y+3	; 0x03
     7e0:	9c 81       	ldd	r25, Y+4	; 0x04
     7e2:	01 96       	adiw	r24, 0x01	; 1
     7e4:	9c 83       	std	Y+4, r25	; 0x04
     7e6:	8b 83       	std	Y+3, r24	; 0x03

        /*Receive First the String Size*/
        string_size = __UART_receiveByte();

        /*Fill the passed array by address with received string*/
        for(i=0 ; i<string_size ; i++)
     7e8:	8a 81       	ldd	r24, Y+2	; 0x02
     7ea:	8f 5f       	subi	r24, 0xFF	; 255
     7ec:	8a 83       	std	Y+2, r24	; 0x02
     7ee:	9a 81       	ldd	r25, Y+2	; 0x02
     7f0:	89 81       	ldd	r24, Y+1	; 0x01
     7f2:	98 17       	cp	r25, r24
     7f4:	78 f3       	brcs	.-34     	; 0x7d4 <__UART_receiveString+0x1c>
            *p_string = __UART_receiveByte();
            p_string++;
        }

        /*Add NULL Terminator at the end of String*/
        *p_string = '\0';
     7f6:	eb 81       	ldd	r30, Y+3	; 0x03
     7f8:	fc 81       	ldd	r31, Y+4	; 0x04
     7fa:	10 82       	st	Z, r1
    }
     7fc:	0f 90       	pop	r0
     7fe:	0f 90       	pop	r0
     800:	0f 90       	pop	r0
     802:	0f 90       	pop	r0
     804:	cf 91       	pop	r28
     806:	df 91       	pop	r29
     808:	08 95       	ret

0000080a <_ALARM_init>:
#define ALARM_C_

#include "alarm.h"

void _ALARM_init(void)
{
     80a:	df 93       	push	r29
     80c:	cf 93       	push	r28
     80e:	cd b7       	in	r28, 0x3d	; 61
     810:	de b7       	in	r29, 0x3e	; 62
	__DIO_setPinDirection(ALARM_DDR, ALARM_PIN, OUTPUT_PIN);
     812:	80 e0       	ldi	r24, 0x00	; 0
     814:	60 e0       	ldi	r22, 0x00	; 0
     816:	41 e0       	ldi	r20, 0x01	; 1
     818:	0e 94 49 00 	call	0x92	; 0x92 <__DIO_setPinDirection>

	__DIO_writeOutputPinValue(ALARM_PORT, ALARM_PIN, LOW);
     81c:	80 e0       	ldi	r24, 0x00	; 0
     81e:	60 e0       	ldi	r22, 0x00	; 0
     820:	40 e0       	ldi	r20, 0x00	; 0
     822:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <__DIO_writeOutputPinValue>
}
     826:	cf 91       	pop	r28
     828:	df 91       	pop	r29
     82a:	08 95       	ret

0000082c <_ALARM_state>:

void _ALARM_state(uint8 state)
{
     82c:	df 93       	push	r29
     82e:	cf 93       	push	r28
     830:	00 d0       	rcall	.+0      	; 0x832 <_ALARM_state+0x6>
     832:	0f 92       	push	r0
     834:	cd b7       	in	r28, 0x3d	; 61
     836:	de b7       	in	r29, 0x3e	; 62
     838:	89 83       	std	Y+1, r24	; 0x01
	switch(state)
     83a:	89 81       	ldd	r24, Y+1	; 0x01
     83c:	28 2f       	mov	r18, r24
     83e:	30 e0       	ldi	r19, 0x00	; 0
     840:	3b 83       	std	Y+3, r19	; 0x03
     842:	2a 83       	std	Y+2, r18	; 0x02
     844:	8a 81       	ldd	r24, Y+2	; 0x02
     846:	9b 81       	ldd	r25, Y+3	; 0x03
     848:	00 97       	sbiw	r24, 0x00	; 0
     84a:	31 f0       	breq	.+12     	; 0x858 <_ALARM_state+0x2c>
     84c:	2a 81       	ldd	r18, Y+2	; 0x02
     84e:	3b 81       	ldd	r19, Y+3	; 0x03
     850:	21 30       	cpi	r18, 0x01	; 1
     852:	31 05       	cpc	r19, r1
     854:	39 f0       	breq	.+14     	; 0x864 <_ALARM_state+0x38>
     856:	0b c0       	rjmp	.+22     	; 0x86e <_ALARM_state+0x42>
	{
	case OFF:
		__DIO_writeOutputPinValue(ALARM_PORT, ALARM_PIN, LOW);
     858:	80 e0       	ldi	r24, 0x00	; 0
     85a:	60 e0       	ldi	r22, 0x00	; 0
     85c:	40 e0       	ldi	r20, 0x00	; 0
     85e:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <__DIO_writeOutputPinValue>
     862:	05 c0       	rjmp	.+10     	; 0x86e <_ALARM_state+0x42>
		break;


	case ON:
		__DIO_writeOutputPinValue(ALARM_PORT, ALARM_PIN, HIGH);
     864:	80 e0       	ldi	r24, 0x00	; 0
     866:	60 e0       	ldi	r22, 0x00	; 0
     868:	41 e0       	ldi	r20, 0x01	; 1
     86a:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <__DIO_writeOutputPinValue>
    
    default:
		/*Do nothing*/
		break;
	}
}
     86e:	0f 90       	pop	r0
     870:	0f 90       	pop	r0
     872:	0f 90       	pop	r0
     874:	cf 91       	pop	r28
     876:	df 91       	pop	r29
     878:	08 95       	ret

0000087a <main>:



/* APPL Software: MAIN FUNCTION ********************************************************************/
int main(void)
{
     87a:	df 93       	push	r29
     87c:	cf 93       	push	r28
     87e:	00 d0       	rcall	.+0      	; 0x880 <main+0x6>
     880:	00 d0       	rcall	.+0      	; 0x882 <main+0x8>
     882:	cd b7       	in	r28, 0x3d	; 61
     884:	de b7       	in	r29, 0x3e	; 62
    uint8 task_status, control_task;

    /* Hardware Peripherals init Functions */
	DLS_hardwarePeripheralInit();
     886:	0e 94 ed 04 	call	0x9da	; 0x9da <DLS_hardwarePeripheralInit>


    while(FOREVER)
    {
    	while( __UART_receiveByte() != HMI__UART_READY );
     88a:	0e 94 b4 03 	call	0x768	; 0x768 <__UART_receiveByte>
     88e:	8f 3f       	cpi	r24, 0xFF	; 255
     890:	e1 f7       	brne	.-8      	; 0x88a <main+0x10>
        __UART_sendByte( CONT_UART_READY );
     892:	8f e7       	ldi	r24, 0x7F	; 127
     894:	0e 94 77 03 	call	0x6ee	; 0x6ee <__UART_sendByte>
        control_task = __UART_receiveByte();
     898:	0e 94 b4 03 	call	0x768	; 0x768 <__UART_receiveByte>
     89c:	89 83       	std	Y+1, r24	; 0x01

        switch(control_task)
     89e:	89 81       	ldd	r24, Y+1	; 0x01
     8a0:	28 2f       	mov	r18, r24
     8a2:	30 e0       	ldi	r19, 0x00	; 0
     8a4:	3c 83       	std	Y+4, r19	; 0x04
     8a6:	2b 83       	std	Y+3, r18	; 0x03
     8a8:	8b 81       	ldd	r24, Y+3	; 0x03
     8aa:	9c 81       	ldd	r25, Y+4	; 0x04
     8ac:	83 30       	cpi	r24, 0x03	; 3
     8ae:	91 05       	cpc	r25, r1
     8b0:	99 f1       	breq	.+102    	; 0x918 <main+0x9e>
     8b2:	2b 81       	ldd	r18, Y+3	; 0x03
     8b4:	3c 81       	ldd	r19, Y+4	; 0x04
     8b6:	24 30       	cpi	r18, 0x04	; 4
     8b8:	31 05       	cpc	r19, r1
     8ba:	64 f4       	brge	.+24     	; 0x8d4 <main+0x5a>
     8bc:	8b 81       	ldd	r24, Y+3	; 0x03
     8be:	9c 81       	ldd	r25, Y+4	; 0x04
     8c0:	81 30       	cpi	r24, 0x01	; 1
     8c2:	91 05       	cpc	r25, r1
     8c4:	a1 f0       	breq	.+40     	; 0x8ee <main+0x74>
     8c6:	2b 81       	ldd	r18, Y+3	; 0x03
     8c8:	3c 81       	ldd	r19, Y+4	; 0x04
     8ca:	22 30       	cpi	r18, 0x02	; 2
     8cc:	31 05       	cpc	r19, r1
     8ce:	09 f4       	brne	.+2      	; 0x8d2 <main+0x58>
     8d0:	50 c0       	rjmp	.+160    	; 0x972 <main+0xf8>
     8d2:	db cf       	rjmp	.-74     	; 0x88a <main+0x10>
     8d4:	8b 81       	ldd	r24, Y+3	; 0x03
     8d6:	9c 81       	ldd	r25, Y+4	; 0x04
     8d8:	84 30       	cpi	r24, 0x04	; 4
     8da:	91 05       	cpc	r25, r1
     8dc:	09 f4       	brne	.+2      	; 0x8e0 <main+0x66>
     8de:	5b c0       	rjmp	.+182    	; 0x996 <main+0x11c>
     8e0:	2b 81       	ldd	r18, Y+3	; 0x03
     8e2:	3c 81       	ldd	r19, Y+4	; 0x04
     8e4:	25 30       	cpi	r18, 0x05	; 5
     8e6:	31 05       	cpc	r19, r1
     8e8:	09 f4       	brne	.+2      	; 0x8ec <main+0x72>
     8ea:	66 c0       	rjmp	.+204    	; 0x9b8 <main+0x13e>
     8ec:	ce cf       	rjmp	.-100    	; 0x88a <main+0x10>
        {
        /*----------------------------------------------------------------*/
        case SETUP_NEW_PASSWORD:
            
            __UART_sendByte( CONT_UART_READY );
     8ee:	8f e7       	ldi	r24, 0x7F	; 127
     8f0:	0e 94 77 03 	call	0x6ee	; 0x6ee <__UART_sendByte>
            __UART_receiveString(rx_password);
     8f4:	8c e8       	ldi	r24, 0x8C	; 140
     8f6:	90 e0       	ldi	r25, 0x00	; 0
     8f8:	0e 94 dc 03 	call	0x7b8	; 0x7b8 <__UART_receiveString>
            
            task_status = DLS_setupNewPassword();
     8fc:	0e 94 45 05 	call	0xa8a	; 0xa8a <DLS_setupNewPassword>
     900:	8a 83       	std	Y+2, r24	; 0x02

            __UART_sendByte( CONT_UART_READY );
     902:	8f e7       	ldi	r24, 0x7F	; 127
     904:	0e 94 77 03 	call	0x6ee	; 0x6ee <__UART_sendByte>
            while( __UART_receiveByte() != HMI__UART_READY );
     908:	0e 94 b4 03 	call	0x768	; 0x768 <__UART_receiveByte>
     90c:	8f 3f       	cpi	r24, 0xFF	; 255
     90e:	e1 f7       	brne	.-8      	; 0x908 <main+0x8e>
            __UART_sendByte(task_status);
     910:	8a 81       	ldd	r24, Y+2	; 0x02
     912:	0e 94 77 03 	call	0x6ee	; 0x6ee <__UART_sendByte>
     916:	b9 cf       	rjmp	.-142    	; 0x88a <main+0x10>

        break;
        /*----------------------------------------------------------------*/
        case CHECK_LOGIN_CREDENTIALS:

            __UART_sendByte( CONT_UART_READY );
     918:	8f e7       	ldi	r24, 0x7F	; 127
     91a:	0e 94 77 03 	call	0x6ee	; 0x6ee <__UART_sendByte>
            __UART_receiveString(rx_password);
     91e:	8c e8       	ldi	r24, 0x8C	; 140
     920:	90 e0       	ldi	r25, 0x00	; 0
     922:	0e 94 dc 03 	call	0x7b8	; 0x7b8 <__UART_receiveString>

            task_status = DLS_checkLoginCredentials();
     926:	0e 94 12 07 	call	0xe24	; 0xe24 <DLS_checkLoginCredentials>
     92a:	8a 83       	std	Y+2, r24	; 0x02

            while( __UART_receiveByte() != HMI__UART_READY );
     92c:	0e 94 b4 03 	call	0x768	; 0x768 <__UART_receiveByte>
     930:	8f 3f       	cpi	r24, 0xFF	; 255
     932:	e1 f7       	brne	.-8      	; 0x92c <main+0xb2>
            __UART_sendByte(task_status);
     934:	8a 81       	ldd	r24, Y+2	; 0x02
     936:	0e 94 77 03 	call	0x6ee	; 0x6ee <__UART_sendByte>

            if( wrongTrialsAlarm_counter == 2 ) // If 2 failed trials were entered Alarm will operate
     93a:	80 91 82 00 	lds	r24, 0x0082
     93e:	82 30       	cpi	r24, 0x02	; 2
     940:	09 f0       	breq	.+2      	; 0x944 <main+0xca>
     942:	a3 cf       	rjmp	.-186    	; 0x88a <main+0x10>
            {
                executeISR = ALARM_ISR_CODE;
     944:	82 e0       	ldi	r24, 0x02	; 2
     946:	80 93 8b 00 	sts	0x008B, r24
                timer1_configs.compare_value = _QUAR_SECOND;
     94a:	80 ed       	ldi	r24, 0xD0	; 208
     94c:	97 e0       	ldi	r25, 0x07	; 7
     94e:	90 93 63 00 	sts	0x0063, r25
     952:	80 93 62 00 	sts	0x0062, r24
                __TIMER_CTC_startTimer(&timer1_configs);
     956:	80 e6       	ldi	r24, 0x60	; 96
     958:	90 e0       	ldi	r25, 0x00	; 0
     95a:	0e 94 a6 0d 	call	0x1b4c	; 0x1b4c <__TIMER_CTC_startTimer>
                
                code_blocking_flag = TRUE;
     95e:	81 e0       	ldi	r24, 0x01	; 1
     960:	80 93 83 00 	sts	0x0083, r24
                while(code_blocking_flag);
     964:	80 91 83 00 	lds	r24, 0x0083
     968:	88 23       	and	r24, r24
     96a:	e1 f7       	brne	.-8      	; 0x964 <main+0xea>

                wrongTrialsAlarm_counter = 0;
     96c:	10 92 82 00 	sts	0x0082, r1
     970:	8c cf       	rjmp	.-232    	; 0x88a <main+0x10>

        break;
        /*----------------------------------------------------------------*/
        case CHANGE_PASSWORD:

            __UART_sendByte( CONT_UART_READY );
     972:	8f e7       	ldi	r24, 0x7F	; 127
     974:	0e 94 77 03 	call	0x6ee	; 0x6ee <__UART_sendByte>
            __UART_receiveString(rx_password);
     978:	8c e8       	ldi	r24, 0x8C	; 140
     97a:	90 e0       	ldi	r25, 0x00	; 0
     97c:	0e 94 dc 03 	call	0x7b8	; 0x7b8 <__UART_receiveString>

            task_status = DLS_changeOldPassword();
     980:	0e 94 f1 08 	call	0x11e2	; 0x11e2 <DLS_changeOldPassword>
     984:	8a 83       	std	Y+2, r24	; 0x02

            while( __UART_receiveByte() != HMI__UART_READY );
     986:	0e 94 b4 03 	call	0x768	; 0x768 <__UART_receiveByte>
     98a:	8f 3f       	cpi	r24, 0xFF	; 255
     98c:	e1 f7       	brne	.-8      	; 0x986 <main+0x10c>
            __UART_sendByte(task_status);
     98e:	8a 81       	ldd	r24, Y+2	; 0x02
     990:	0e 94 77 03 	call	0x6ee	; 0x6ee <__UART_sendByte>
     994:	7a cf       	rjmp	.-268    	; 0x88a <main+0x10>

        break;
        /*----------------------------------------------------------------*/
        case OPEN_DOOR:

            _MOTORDC_rotate(CW);
     996:	81 e0       	ldi	r24, 0x01	; 1
     998:	0e 94 22 0c 	call	0x1844	; 0x1844 <_MOTORDC_rotate>
            executeISR = MOTOR_ISR_CODE;
     99c:	81 e0       	ldi	r24, 0x01	; 1
     99e:	80 93 8b 00 	sts	0x008B, r24
            timer1_configs.compare_value = _4_SECONDS;
     9a2:	80 e0       	ldi	r24, 0x00	; 0
     9a4:	9d e7       	ldi	r25, 0x7D	; 125
     9a6:	90 93 63 00 	sts	0x0063, r25
     9aa:	80 93 62 00 	sts	0x0062, r24
			__TIMER_CTC_startTimer(&timer1_configs);
     9ae:	80 e6       	ldi	r24, 0x60	; 96
     9b0:	90 e0       	ldi	r25, 0x00	; 0
     9b2:	0e 94 a6 0d 	call	0x1b4c	; 0x1b4c <__TIMER_CTC_startTimer>
     9b6:	69 cf       	rjmp	.-302    	; 0x88a <main+0x10>

        break;
        /*----------------------------------------------------------------*/
        case CLOSE_DOOR:

			_MOTORDC_rotate(CCW);
     9b8:	82 e0       	ldi	r24, 0x02	; 2
     9ba:	0e 94 22 0c 	call	0x1844	; 0x1844 <_MOTORDC_rotate>
            executeISR = MOTOR_ISR_CODE;
     9be:	81 e0       	ldi	r24, 0x01	; 1
     9c0:	80 93 8b 00 	sts	0x008B, r24
            timer1_configs.compare_value = _4_SECONDS;
     9c4:	80 e0       	ldi	r24, 0x00	; 0
     9c6:	9d e7       	ldi	r25, 0x7D	; 125
     9c8:	90 93 63 00 	sts	0x0063, r25
     9cc:	80 93 62 00 	sts	0x0062, r24
			__TIMER_CTC_startTimer(&timer1_configs);
     9d0:	80 e6       	ldi	r24, 0x60	; 96
     9d2:	90 e0       	ldi	r25, 0x00	; 0
     9d4:	0e 94 a6 0d 	call	0x1b4c	; 0x1b4c <__TIMER_CTC_startTimer>
     9d8:	58 cf       	rjmp	.-336    	; 0x88a <main+0x10>

000009da <DLS_hardwarePeripheralInit>:
/***************************************************************************************************/


/* APPL Software: DLS_hardwarePeripheralInit FUNCTION *********************************************/
void DLS_hardwarePeripheralInit(void)
{
     9da:	df 93       	push	r29
     9dc:	cf 93       	push	r28
     9de:	cd b7       	in	r28, 0x3d	; 61
     9e0:	de b7       	in	r29, 0x3e	; 62
     9e2:	2a 97       	sbiw	r28, 0x0a	; 10
     9e4:	0f b6       	in	r0, 0x3f	; 63
     9e6:	f8 94       	cli
     9e8:	de bf       	out	0x3e, r29	; 62
     9ea:	0f be       	out	0x3f, r0	; 63
     9ec:	cd bf       	out	0x3d, r28	; 61
    /*UART Configuration Parameters*/
	UART_config uart_configs = {9600, _8_BIT_DATA, ONE_STOP_BIT, DISABLE_PARITY};
     9ee:	ce 01       	movw	r24, r28
     9f0:	01 96       	adiw	r24, 0x01	; 1
     9f2:	9f 83       	std	Y+7, r25	; 0x07
     9f4:	8e 83       	std	Y+6, r24	; 0x06
     9f6:	ed e7       	ldi	r30, 0x7D	; 125
     9f8:	f0 e0       	ldi	r31, 0x00	; 0
     9fa:	f9 87       	std	Y+9, r31	; 0x09
     9fc:	e8 87       	std	Y+8, r30	; 0x08
     9fe:	f5 e0       	ldi	r31, 0x05	; 5
     a00:	fa 87       	std	Y+10, r31	; 0x0a
     a02:	e8 85       	ldd	r30, Y+8	; 0x08
     a04:	f9 85       	ldd	r31, Y+9	; 0x09
     a06:	00 80       	ld	r0, Z
     a08:	88 85       	ldd	r24, Y+8	; 0x08
     a0a:	99 85       	ldd	r25, Y+9	; 0x09
     a0c:	01 96       	adiw	r24, 0x01	; 1
     a0e:	99 87       	std	Y+9, r25	; 0x09
     a10:	88 87       	std	Y+8, r24	; 0x08
     a12:	ee 81       	ldd	r30, Y+6	; 0x06
     a14:	ff 81       	ldd	r31, Y+7	; 0x07
     a16:	00 82       	st	Z, r0
     a18:	8e 81       	ldd	r24, Y+6	; 0x06
     a1a:	9f 81       	ldd	r25, Y+7	; 0x07
     a1c:	01 96       	adiw	r24, 0x01	; 1
     a1e:	9f 83       	std	Y+7, r25	; 0x07
     a20:	8e 83       	std	Y+6, r24	; 0x06
     a22:	9a 85       	ldd	r25, Y+10	; 0x0a
     a24:	91 50       	subi	r25, 0x01	; 1
     a26:	9a 87       	std	Y+10, r25	; 0x0a
     a28:	ea 85       	ldd	r30, Y+10	; 0x0a
     a2a:	ee 23       	and	r30, r30
     a2c:	51 f7       	brne	.-44     	; 0xa02 <DLS_hardwarePeripheralInit+0x28>

    /* Initialize the Motor Control Pins */
	_MOTORDC_init();
     a2e:	0e 94 07 0c 	call	0x180e	; 0x180e <_MOTORDC_init>

    /* Initialize the Alarm Control Pin */
    _ALARM_init();
     a32:	0e 94 05 04 	call	0x80a	; 0x80a <_ALARM_init>

    /* Initialize TIMER1 ISR CallBack Function */
	__TIMER_CTC_setISRCallBackFuncPointer(TIMER1, DLS_TIMER1_ISR_callBackFunction);
     a36:	21 ed       	ldi	r18, 0xD1	; 209
     a38:	3b e0       	ldi	r19, 0x0B	; 11
     a3a:	81 e0       	ldi	r24, 0x01	; 1
     a3c:	b9 01       	movw	r22, r18
     a3e:	0e 94 78 0d 	call	0x1af0	; 0x1af0 <__TIMER_CTC_setISRCallBackFuncPointer>

    /* Initialize EEPROM */
	_EXT_EEPROM_init(TWI_ECU_MASTER_ADDR);
     a42:	81 e0       	ldi	r24, 0x01	; 1
     a44:	0e 94 62 0c 	call	0x18c4	; 0x18c4 <_EXT_EEPROM_init>

    /* Initialize UART Module */
	__UART_init(&uart_configs);
     a48:	ce 01       	movw	r24, r28
     a4a:	01 96       	adiw	r24, 0x01	; 1
     a4c:	0e 94 b5 02 	call	0x56a	; 0x56a <__UART_init>

	/*TESTING*/__DIO_setPinDirection(DDR_D, SUCCESS_LED, OUTPUT_PIN);/*TESTING*/
     a50:	83 e0       	ldi	r24, 0x03	; 3
     a52:	62 e0       	ldi	r22, 0x02	; 2
     a54:	41 e0       	ldi	r20, 0x01	; 1
     a56:	0e 94 49 00 	call	0x92	; 0x92 <__DIO_setPinDirection>
	/*TESTING*/__DIO_setPinDirection(DDR_D, FAILED_LED, OUTPUT_PIN);/*TESTING*/
     a5a:	83 e0       	ldi	r24, 0x03	; 3
     a5c:	63 e0       	ldi	r22, 0x03	; 3
     a5e:	41 e0       	ldi	r20, 0x01	; 1
     a60:	0e 94 49 00 	call	0x92	; 0x92 <__DIO_setPinDirection>
	/*TESTING*/__DIO_writeOutputPinValue(PORT_D, SUCCESS_LED, LOW);/*TESTING*/
     a64:	83 e0       	ldi	r24, 0x03	; 3
     a66:	62 e0       	ldi	r22, 0x02	; 2
     a68:	40 e0       	ldi	r20, 0x00	; 0
     a6a:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <__DIO_writeOutputPinValue>
	/*TESTING*/__DIO_writeOutputPinValue(PORT_D, FAILED_LED, LOW);/*TESTING*/
     a6e:	83 e0       	ldi	r24, 0x03	; 3
     a70:	63 e0       	ldi	r22, 0x03	; 3
     a72:	40 e0       	ldi	r20, 0x00	; 0
     a74:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <__DIO_writeOutputPinValue>

}
     a78:	2a 96       	adiw	r28, 0x0a	; 10
     a7a:	0f b6       	in	r0, 0x3f	; 63
     a7c:	f8 94       	cli
     a7e:	de bf       	out	0x3e, r29	; 62
     a80:	0f be       	out	0x3f, r0	; 63
     a82:	cd bf       	out	0x3d, r28	; 61
     a84:	cf 91       	pop	r28
     a86:	df 91       	pop	r29
     a88:	08 95       	ret

00000a8a <DLS_setupNewPassword>:
/**************************************************************************************************/

/* APPL Software: DLS_setupNewPassword FUNCTION ***************************************************/
uint8 DLS_setupNewPassword(void)
{
     a8a:	df 93       	push	r29
     a8c:	cf 93       	push	r28
     a8e:	00 d0       	rcall	.+0      	; 0xa90 <DLS_setupNewPassword+0x6>
     a90:	cd b7       	in	r28, 0x3d	; 61
     a92:	de b7       	in	r29, 0x3e	; 62
    
    uint8 i;

    /* Check the Entered Passwords are identical */
    for( i=0 ; i<=3 ; i++ )
     a94:	19 82       	std	Y+1, r1	; 0x01
     a96:	d2 c0       	rjmp	.+420    	; 0xc3c <DLS_setupNewPassword+0x1b2>
    {
        /* if not identical, break func; return PASSWORD_NOT_MATCHED */
        if( rx_password[i] != rx_password[4+i] )
     a98:	89 81       	ldd	r24, Y+1	; 0x01
     a9a:	88 2f       	mov	r24, r24
     a9c:	90 e0       	ldi	r25, 0x00	; 0
     a9e:	fc 01       	movw	r30, r24
     aa0:	e4 57       	subi	r30, 0x74	; 116
     aa2:	ff 4f       	sbci	r31, 0xFF	; 255
     aa4:	20 81       	ld	r18, Z
     aa6:	89 81       	ldd	r24, Y+1	; 0x01
     aa8:	88 2f       	mov	r24, r24
     aaa:	90 e0       	ldi	r25, 0x00	; 0
     aac:	04 96       	adiw	r24, 0x04	; 4
     aae:	fc 01       	movw	r30, r24
     ab0:	e4 57       	subi	r30, 0x74	; 116
     ab2:	ff 4f       	sbci	r31, 0xFF	; 255
     ab4:	80 81       	ld	r24, Z
     ab6:	28 17       	cp	r18, r24
     ab8:	09 f4       	brne	.+2      	; 0xabc <DLS_setupNewPassword+0x32>
     aba:	bd c0       	rjmp	.+378    	; 0xc36 <DLS_setupNewPassword+0x1ac>
        {
        	/*TESTING*/__DIO_writeOutputPinValue(PORT_D, FAILED_LED, HIGH);/*TESTING*/
     abc:	83 e0       	ldi	r24, 0x03	; 3
     abe:	63 e0       	ldi	r22, 0x03	; 3
     ac0:	41 e0       	ldi	r20, 0x01	; 1
     ac2:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <__DIO_writeOutputPinValue>
        	APPROX_1SEC_DELAY;APPROX_1SEC_DELAY;APPROX_1SEC_DELAY;APPROX_1SEC_DELAY;
     ac6:	10 92 8a 00 	sts	0x008A, r1
     aca:	10 92 89 00 	sts	0x0089, r1
     ace:	09 c0       	rjmp	.+18     	; 0xae2 <DLS_setupNewPassword+0x58>
     ad0:	80 91 89 00 	lds	r24, 0x0089
     ad4:	90 91 8a 00 	lds	r25, 0x008A
     ad8:	01 96       	adiw	r24, 0x01	; 1
     ada:	90 93 8a 00 	sts	0x008A, r25
     ade:	80 93 89 00 	sts	0x0089, r24
     ae2:	80 91 89 00 	lds	r24, 0x0089
     ae6:	90 91 8a 00 	lds	r25, 0x008A
     aea:	2d ef       	ldi	r18, 0xFD	; 253
     aec:	88 3e       	cpi	r24, 0xE8	; 232
     aee:	92 07       	cpc	r25, r18
     af0:	78 f3       	brcs	.-34     	; 0xad0 <DLS_setupNewPassword+0x46>
     af2:	10 92 8a 00 	sts	0x008A, r1
     af6:	10 92 89 00 	sts	0x0089, r1
     afa:	09 c0       	rjmp	.+18     	; 0xb0e <DLS_setupNewPassword+0x84>
     afc:	80 91 89 00 	lds	r24, 0x0089
     b00:	90 91 8a 00 	lds	r25, 0x008A
     b04:	01 96       	adiw	r24, 0x01	; 1
     b06:	90 93 8a 00 	sts	0x008A, r25
     b0a:	80 93 89 00 	sts	0x0089, r24
     b0e:	80 91 89 00 	lds	r24, 0x0089
     b12:	90 91 8a 00 	lds	r25, 0x008A
     b16:	2d ef       	ldi	r18, 0xFD	; 253
     b18:	88 3e       	cpi	r24, 0xE8	; 232
     b1a:	92 07       	cpc	r25, r18
     b1c:	78 f3       	brcs	.-34     	; 0xafc <DLS_setupNewPassword+0x72>
     b1e:	10 92 8a 00 	sts	0x008A, r1
     b22:	10 92 89 00 	sts	0x0089, r1
     b26:	09 c0       	rjmp	.+18     	; 0xb3a <DLS_setupNewPassword+0xb0>
     b28:	80 91 89 00 	lds	r24, 0x0089
     b2c:	90 91 8a 00 	lds	r25, 0x008A
     b30:	01 96       	adiw	r24, 0x01	; 1
     b32:	90 93 8a 00 	sts	0x008A, r25
     b36:	80 93 89 00 	sts	0x0089, r24
     b3a:	80 91 89 00 	lds	r24, 0x0089
     b3e:	90 91 8a 00 	lds	r25, 0x008A
     b42:	2d ef       	ldi	r18, 0xFD	; 253
     b44:	88 3e       	cpi	r24, 0xE8	; 232
     b46:	92 07       	cpc	r25, r18
     b48:	78 f3       	brcs	.-34     	; 0xb28 <DLS_setupNewPassword+0x9e>
     b4a:	10 92 8a 00 	sts	0x008A, r1
     b4e:	10 92 89 00 	sts	0x0089, r1
     b52:	09 c0       	rjmp	.+18     	; 0xb66 <DLS_setupNewPassword+0xdc>
     b54:	80 91 89 00 	lds	r24, 0x0089
     b58:	90 91 8a 00 	lds	r25, 0x008A
     b5c:	01 96       	adiw	r24, 0x01	; 1
     b5e:	90 93 8a 00 	sts	0x008A, r25
     b62:	80 93 89 00 	sts	0x0089, r24
     b66:	80 91 89 00 	lds	r24, 0x0089
     b6a:	90 91 8a 00 	lds	r25, 0x008A
     b6e:	2d ef       	ldi	r18, 0xFD	; 253
     b70:	88 3e       	cpi	r24, 0xE8	; 232
     b72:	92 07       	cpc	r25, r18
     b74:	78 f3       	brcs	.-34     	; 0xb54 <DLS_setupNewPassword+0xca>
        	APPROX_1SEC_DELAY;APPROX_1SEC_DELAY;APPROX_1SEC_DELAY;APPROX_1SEC_DELAY;
     b76:	10 92 8a 00 	sts	0x008A, r1
     b7a:	10 92 89 00 	sts	0x0089, r1
     b7e:	09 c0       	rjmp	.+18     	; 0xb92 <DLS_setupNewPassword+0x108>
     b80:	80 91 89 00 	lds	r24, 0x0089
     b84:	90 91 8a 00 	lds	r25, 0x008A
     b88:	01 96       	adiw	r24, 0x01	; 1
     b8a:	90 93 8a 00 	sts	0x008A, r25
     b8e:	80 93 89 00 	sts	0x0089, r24
     b92:	80 91 89 00 	lds	r24, 0x0089
     b96:	90 91 8a 00 	lds	r25, 0x008A
     b9a:	2d ef       	ldi	r18, 0xFD	; 253
     b9c:	88 3e       	cpi	r24, 0xE8	; 232
     b9e:	92 07       	cpc	r25, r18
     ba0:	78 f3       	brcs	.-34     	; 0xb80 <DLS_setupNewPassword+0xf6>
     ba2:	10 92 8a 00 	sts	0x008A, r1
     ba6:	10 92 89 00 	sts	0x0089, r1
     baa:	09 c0       	rjmp	.+18     	; 0xbbe <DLS_setupNewPassword+0x134>
     bac:	80 91 89 00 	lds	r24, 0x0089
     bb0:	90 91 8a 00 	lds	r25, 0x008A
     bb4:	01 96       	adiw	r24, 0x01	; 1
     bb6:	90 93 8a 00 	sts	0x008A, r25
     bba:	80 93 89 00 	sts	0x0089, r24
     bbe:	80 91 89 00 	lds	r24, 0x0089
     bc2:	90 91 8a 00 	lds	r25, 0x008A
     bc6:	2d ef       	ldi	r18, 0xFD	; 253
     bc8:	88 3e       	cpi	r24, 0xE8	; 232
     bca:	92 07       	cpc	r25, r18
     bcc:	78 f3       	brcs	.-34     	; 0xbac <DLS_setupNewPassword+0x122>
     bce:	10 92 8a 00 	sts	0x008A, r1
     bd2:	10 92 89 00 	sts	0x0089, r1
     bd6:	09 c0       	rjmp	.+18     	; 0xbea <DLS_setupNewPassword+0x160>
     bd8:	80 91 89 00 	lds	r24, 0x0089
     bdc:	90 91 8a 00 	lds	r25, 0x008A
     be0:	01 96       	adiw	r24, 0x01	; 1
     be2:	90 93 8a 00 	sts	0x008A, r25
     be6:	80 93 89 00 	sts	0x0089, r24
     bea:	80 91 89 00 	lds	r24, 0x0089
     bee:	90 91 8a 00 	lds	r25, 0x008A
     bf2:	2d ef       	ldi	r18, 0xFD	; 253
     bf4:	88 3e       	cpi	r24, 0xE8	; 232
     bf6:	92 07       	cpc	r25, r18
     bf8:	78 f3       	brcs	.-34     	; 0xbd8 <DLS_setupNewPassword+0x14e>
     bfa:	10 92 8a 00 	sts	0x008A, r1
     bfe:	10 92 89 00 	sts	0x0089, r1
     c02:	09 c0       	rjmp	.+18     	; 0xc16 <DLS_setupNewPassword+0x18c>
     c04:	80 91 89 00 	lds	r24, 0x0089
     c08:	90 91 8a 00 	lds	r25, 0x008A
     c0c:	01 96       	adiw	r24, 0x01	; 1
     c0e:	90 93 8a 00 	sts	0x008A, r25
     c12:	80 93 89 00 	sts	0x0089, r24
     c16:	80 91 89 00 	lds	r24, 0x0089
     c1a:	90 91 8a 00 	lds	r25, 0x008A
     c1e:	2d ef       	ldi	r18, 0xFD	; 253
     c20:	88 3e       	cpi	r24, 0xE8	; 232
     c22:	92 07       	cpc	r25, r18
     c24:	78 f3       	brcs	.-34     	; 0xc04 <DLS_setupNewPassword+0x17a>
            /*TESTING*/__DIO_writeOutputPinValue(PORT_D, FAILED_LED, LOW);/*TESTING*/
     c26:	83 e0       	ldi	r24, 0x03	; 3
     c28:	63 e0       	ldi	r22, 0x03	; 3
     c2a:	40 e0       	ldi	r20, 0x00	; 0
     c2c:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <__DIO_writeOutputPinValue>

            return PASSWORD_NOT_MATCHED;
     c30:	81 e2       	ldi	r24, 0x21	; 33
     c32:	8a 83       	std	Y+2, r24	; 0x02
     c34:	f1 c0       	rjmp	.+482    	; 0xe18 <DLS_setupNewPassword+0x38e>
{
    
    uint8 i;

    /* Check the Entered Passwords are identical */
    for( i=0 ; i<=3 ; i++ )
     c36:	89 81       	ldd	r24, Y+1	; 0x01
     c38:	8f 5f       	subi	r24, 0xFF	; 255
     c3a:	89 83       	std	Y+1, r24	; 0x01
     c3c:	89 81       	ldd	r24, Y+1	; 0x01
     c3e:	84 30       	cpi	r24, 0x04	; 4
     c40:	08 f4       	brcc	.+2      	; 0xc44 <DLS_setupNewPassword+0x1ba>
     c42:	2a cf       	rjmp	.-428    	; 0xa98 <DLS_setupNewPassword+0xe>
            return PASSWORD_NOT_MATCHED;
        }
    }
    
    /* Save the password in EEPROM */
    for( i=0 ; i<=3 ; i++ )
     c44:	19 82       	std	Y+1, r1	; 0x01
     c46:	29 c0       	rjmp	.+82     	; 0xc9a <DLS_setupNewPassword+0x210>
    {
        _EXT_EEPROM_writeByte( USR_PASSWD_EEPROM_MEM_LOC+i , rx_password[i] );
     c48:	89 81       	ldd	r24, Y+1	; 0x01
     c4a:	88 2f       	mov	r24, r24
     c4c:	90 e0       	ldi	r25, 0x00	; 0
     c4e:	0f 96       	adiw	r24, 0x0f	; 15
     c50:	ac 01       	movw	r20, r24
     c52:	89 81       	ldd	r24, Y+1	; 0x01
     c54:	88 2f       	mov	r24, r24
     c56:	90 e0       	ldi	r25, 0x00	; 0
     c58:	fc 01       	movw	r30, r24
     c5a:	e4 57       	subi	r30, 0x74	; 116
     c5c:	ff 4f       	sbci	r31, 0xFF	; 255
     c5e:	20 81       	ld	r18, Z
     c60:	ca 01       	movw	r24, r20
     c62:	62 2f       	mov	r22, r18
     c64:	0e 94 7d 0c 	call	0x18fa	; 0x18fa <_EXT_EEPROM_writeByte>
        APPROX_HALF_SEC_DELAY;
     c68:	10 92 8a 00 	sts	0x008A, r1
     c6c:	10 92 89 00 	sts	0x0089, r1
     c70:	09 c0       	rjmp	.+18     	; 0xc84 <DLS_setupNewPassword+0x1fa>
     c72:	80 91 89 00 	lds	r24, 0x0089
     c76:	90 91 8a 00 	lds	r25, 0x008A
     c7a:	01 96       	adiw	r24, 0x01	; 1
     c7c:	90 93 8a 00 	sts	0x008A, r25
     c80:	80 93 89 00 	sts	0x0089, r24
     c84:	80 91 89 00 	lds	r24, 0x0089
     c88:	90 91 8a 00 	lds	r25, 0x008A
     c8c:	28 e8       	ldi	r18, 0x88	; 136
     c8e:	88 3b       	cpi	r24, 0xB8	; 184
     c90:	92 07       	cpc	r25, r18
     c92:	78 f3       	brcs	.-34     	; 0xc72 <DLS_setupNewPassword+0x1e8>
            return PASSWORD_NOT_MATCHED;
        }
    }
    
    /* Save the password in EEPROM */
    for( i=0 ; i<=3 ; i++ )
     c94:	89 81       	ldd	r24, Y+1	; 0x01
     c96:	8f 5f       	subi	r24, 0xFF	; 255
     c98:	89 83       	std	Y+1, r24	; 0x01
     c9a:	89 81       	ldd	r24, Y+1	; 0x01
     c9c:	84 30       	cpi	r24, 0x04	; 4
     c9e:	a0 f2       	brcs	.-88     	; 0xc48 <DLS_setupNewPassword+0x1be>
    {
        _EXT_EEPROM_writeByte( USR_PASSWD_EEPROM_MEM_LOC+i , rx_password[i] );
        APPROX_HALF_SEC_DELAY;
    }

    /*TESTING*/__DIO_writeOutputPinValue(PORT_D, SUCCESS_LED, HIGH);/*TESTING*/
     ca0:	83 e0       	ldi	r24, 0x03	; 3
     ca2:	62 e0       	ldi	r22, 0x02	; 2
     ca4:	41 e0       	ldi	r20, 0x01	; 1
     ca6:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <__DIO_writeOutputPinValue>
    APPROX_1SEC_DELAY;APPROX_1SEC_DELAY;APPROX_1SEC_DELAY;APPROX_1SEC_DELAY;
     caa:	10 92 8a 00 	sts	0x008A, r1
     cae:	10 92 89 00 	sts	0x0089, r1
     cb2:	09 c0       	rjmp	.+18     	; 0xcc6 <DLS_setupNewPassword+0x23c>
     cb4:	80 91 89 00 	lds	r24, 0x0089
     cb8:	90 91 8a 00 	lds	r25, 0x008A
     cbc:	01 96       	adiw	r24, 0x01	; 1
     cbe:	90 93 8a 00 	sts	0x008A, r25
     cc2:	80 93 89 00 	sts	0x0089, r24
     cc6:	80 91 89 00 	lds	r24, 0x0089
     cca:	90 91 8a 00 	lds	r25, 0x008A
     cce:	2d ef       	ldi	r18, 0xFD	; 253
     cd0:	88 3e       	cpi	r24, 0xE8	; 232
     cd2:	92 07       	cpc	r25, r18
     cd4:	78 f3       	brcs	.-34     	; 0xcb4 <DLS_setupNewPassword+0x22a>
     cd6:	10 92 8a 00 	sts	0x008A, r1
     cda:	10 92 89 00 	sts	0x0089, r1
     cde:	09 c0       	rjmp	.+18     	; 0xcf2 <DLS_setupNewPassword+0x268>
     ce0:	80 91 89 00 	lds	r24, 0x0089
     ce4:	90 91 8a 00 	lds	r25, 0x008A
     ce8:	01 96       	adiw	r24, 0x01	; 1
     cea:	90 93 8a 00 	sts	0x008A, r25
     cee:	80 93 89 00 	sts	0x0089, r24
     cf2:	80 91 89 00 	lds	r24, 0x0089
     cf6:	90 91 8a 00 	lds	r25, 0x008A
     cfa:	2d ef       	ldi	r18, 0xFD	; 253
     cfc:	88 3e       	cpi	r24, 0xE8	; 232
     cfe:	92 07       	cpc	r25, r18
     d00:	78 f3       	brcs	.-34     	; 0xce0 <DLS_setupNewPassword+0x256>
     d02:	10 92 8a 00 	sts	0x008A, r1
     d06:	10 92 89 00 	sts	0x0089, r1
     d0a:	09 c0       	rjmp	.+18     	; 0xd1e <DLS_setupNewPassword+0x294>
     d0c:	80 91 89 00 	lds	r24, 0x0089
     d10:	90 91 8a 00 	lds	r25, 0x008A
     d14:	01 96       	adiw	r24, 0x01	; 1
     d16:	90 93 8a 00 	sts	0x008A, r25
     d1a:	80 93 89 00 	sts	0x0089, r24
     d1e:	80 91 89 00 	lds	r24, 0x0089
     d22:	90 91 8a 00 	lds	r25, 0x008A
     d26:	2d ef       	ldi	r18, 0xFD	; 253
     d28:	88 3e       	cpi	r24, 0xE8	; 232
     d2a:	92 07       	cpc	r25, r18
     d2c:	78 f3       	brcs	.-34     	; 0xd0c <DLS_setupNewPassword+0x282>
     d2e:	10 92 8a 00 	sts	0x008A, r1
     d32:	10 92 89 00 	sts	0x0089, r1
     d36:	09 c0       	rjmp	.+18     	; 0xd4a <DLS_setupNewPassword+0x2c0>
     d38:	80 91 89 00 	lds	r24, 0x0089
     d3c:	90 91 8a 00 	lds	r25, 0x008A
     d40:	01 96       	adiw	r24, 0x01	; 1
     d42:	90 93 8a 00 	sts	0x008A, r25
     d46:	80 93 89 00 	sts	0x0089, r24
     d4a:	80 91 89 00 	lds	r24, 0x0089
     d4e:	90 91 8a 00 	lds	r25, 0x008A
     d52:	2d ef       	ldi	r18, 0xFD	; 253
     d54:	88 3e       	cpi	r24, 0xE8	; 232
     d56:	92 07       	cpc	r25, r18
     d58:	78 f3       	brcs	.-34     	; 0xd38 <DLS_setupNewPassword+0x2ae>
    APPROX_1SEC_DELAY;APPROX_1SEC_DELAY;APPROX_1SEC_DELAY;APPROX_1SEC_DELAY;
     d5a:	10 92 8a 00 	sts	0x008A, r1
     d5e:	10 92 89 00 	sts	0x0089, r1
     d62:	09 c0       	rjmp	.+18     	; 0xd76 <DLS_setupNewPassword+0x2ec>
     d64:	80 91 89 00 	lds	r24, 0x0089
     d68:	90 91 8a 00 	lds	r25, 0x008A
     d6c:	01 96       	adiw	r24, 0x01	; 1
     d6e:	90 93 8a 00 	sts	0x008A, r25
     d72:	80 93 89 00 	sts	0x0089, r24
     d76:	80 91 89 00 	lds	r24, 0x0089
     d7a:	90 91 8a 00 	lds	r25, 0x008A
     d7e:	2d ef       	ldi	r18, 0xFD	; 253
     d80:	88 3e       	cpi	r24, 0xE8	; 232
     d82:	92 07       	cpc	r25, r18
     d84:	78 f3       	brcs	.-34     	; 0xd64 <DLS_setupNewPassword+0x2da>
     d86:	10 92 8a 00 	sts	0x008A, r1
     d8a:	10 92 89 00 	sts	0x0089, r1
     d8e:	09 c0       	rjmp	.+18     	; 0xda2 <DLS_setupNewPassword+0x318>
     d90:	80 91 89 00 	lds	r24, 0x0089
     d94:	90 91 8a 00 	lds	r25, 0x008A
     d98:	01 96       	adiw	r24, 0x01	; 1
     d9a:	90 93 8a 00 	sts	0x008A, r25
     d9e:	80 93 89 00 	sts	0x0089, r24
     da2:	80 91 89 00 	lds	r24, 0x0089
     da6:	90 91 8a 00 	lds	r25, 0x008A
     daa:	2d ef       	ldi	r18, 0xFD	; 253
     dac:	88 3e       	cpi	r24, 0xE8	; 232
     dae:	92 07       	cpc	r25, r18
     db0:	78 f3       	brcs	.-34     	; 0xd90 <DLS_setupNewPassword+0x306>
     db2:	10 92 8a 00 	sts	0x008A, r1
     db6:	10 92 89 00 	sts	0x0089, r1
     dba:	09 c0       	rjmp	.+18     	; 0xdce <DLS_setupNewPassword+0x344>
     dbc:	80 91 89 00 	lds	r24, 0x0089
     dc0:	90 91 8a 00 	lds	r25, 0x008A
     dc4:	01 96       	adiw	r24, 0x01	; 1
     dc6:	90 93 8a 00 	sts	0x008A, r25
     dca:	80 93 89 00 	sts	0x0089, r24
     dce:	80 91 89 00 	lds	r24, 0x0089
     dd2:	90 91 8a 00 	lds	r25, 0x008A
     dd6:	2d ef       	ldi	r18, 0xFD	; 253
     dd8:	88 3e       	cpi	r24, 0xE8	; 232
     dda:	92 07       	cpc	r25, r18
     ddc:	78 f3       	brcs	.-34     	; 0xdbc <DLS_setupNewPassword+0x332>
     dde:	10 92 8a 00 	sts	0x008A, r1
     de2:	10 92 89 00 	sts	0x0089, r1
     de6:	09 c0       	rjmp	.+18     	; 0xdfa <DLS_setupNewPassword+0x370>
     de8:	80 91 89 00 	lds	r24, 0x0089
     dec:	90 91 8a 00 	lds	r25, 0x008A
     df0:	01 96       	adiw	r24, 0x01	; 1
     df2:	90 93 8a 00 	sts	0x008A, r25
     df6:	80 93 89 00 	sts	0x0089, r24
     dfa:	80 91 89 00 	lds	r24, 0x0089
     dfe:	90 91 8a 00 	lds	r25, 0x008A
     e02:	2d ef       	ldi	r18, 0xFD	; 253
     e04:	88 3e       	cpi	r24, 0xE8	; 232
     e06:	92 07       	cpc	r25, r18
     e08:	78 f3       	brcs	.-34     	; 0xde8 <DLS_setupNewPassword+0x35e>
    /*TESTING*/__DIO_writeOutputPinValue(PORT_D, SUCCESS_LED, LOW);/*TESTING*/
     e0a:	83 e0       	ldi	r24, 0x03	; 3
     e0c:	62 e0       	ldi	r22, 0x02	; 2
     e0e:	40 e0       	ldi	r20, 0x00	; 0
     e10:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <__DIO_writeOutputPinValue>

    return PASSWORD_SAVED;
     e14:	81 e1       	ldi	r24, 0x11	; 17
     e16:	8a 83       	std	Y+2, r24	; 0x02
     e18:	8a 81       	ldd	r24, Y+2	; 0x02

}
     e1a:	0f 90       	pop	r0
     e1c:	0f 90       	pop	r0
     e1e:	cf 91       	pop	r28
     e20:	df 91       	pop	r29
     e22:	08 95       	ret

00000e24 <DLS_checkLoginCredentials>:
/**************************************************************************************************/

/* APPL Software: DLS_checkLoginCredentials FUNCTION **********************************************/
uint8 DLS_checkLoginCredentials(void)
{
     e24:	df 93       	push	r29
     e26:	cf 93       	push	r28
     e28:	cd b7       	in	r28, 0x3d	; 61
     e2a:	de b7       	in	r29, 0x3e	; 62
     e2c:	27 97       	sbiw	r28, 0x07	; 7
     e2e:	0f b6       	in	r0, 0x3f	; 63
     e30:	f8 94       	cli
     e32:	de bf       	out	0x3e, r29	; 62
     e34:	0f be       	out	0x3f, r0	; 63
     e36:	cd bf       	out	0x3d, r28	; 61

    uint8 i, saved_password[5];

    /* Fetch saved password from EEPROM */
    for( i=0 ; i<=3 ; i++ )
     e38:	19 82       	std	Y+1, r1	; 0x01
     e3a:	2a c0       	rjmp	.+84     	; 0xe90 <DLS_checkLoginCredentials+0x6c>
    {
        _EXT_EEPROM_readByte( USR_PASSWD_EEPROM_MEM_LOC+i , saved_password+i );
     e3c:	89 81       	ldd	r24, Y+1	; 0x01
     e3e:	88 2f       	mov	r24, r24
     e40:	90 e0       	ldi	r25, 0x00	; 0
     e42:	0f 96       	adiw	r24, 0x0f	; 15
     e44:	ac 01       	movw	r20, r24
     e46:	89 81       	ldd	r24, Y+1	; 0x01
     e48:	88 2f       	mov	r24, r24
     e4a:	90 e0       	ldi	r25, 0x00	; 0
     e4c:	9e 01       	movw	r18, r28
     e4e:	2e 5f       	subi	r18, 0xFE	; 254
     e50:	3f 4f       	sbci	r19, 0xFF	; 255
     e52:	28 0f       	add	r18, r24
     e54:	39 1f       	adc	r19, r25
     e56:	ca 01       	movw	r24, r20
     e58:	b9 01       	movw	r22, r18
     e5a:	0e 94 be 0c 	call	0x197c	; 0x197c <_EXT_EEPROM_readByte>
        APPROX_HALF_SEC_DELAY;
     e5e:	10 92 8a 00 	sts	0x008A, r1
     e62:	10 92 89 00 	sts	0x0089, r1
     e66:	09 c0       	rjmp	.+18     	; 0xe7a <DLS_checkLoginCredentials+0x56>
     e68:	80 91 89 00 	lds	r24, 0x0089
     e6c:	90 91 8a 00 	lds	r25, 0x008A
     e70:	01 96       	adiw	r24, 0x01	; 1
     e72:	90 93 8a 00 	sts	0x008A, r25
     e76:	80 93 89 00 	sts	0x0089, r24
     e7a:	80 91 89 00 	lds	r24, 0x0089
     e7e:	90 91 8a 00 	lds	r25, 0x008A
     e82:	28 e8       	ldi	r18, 0x88	; 136
     e84:	88 3b       	cpi	r24, 0xB8	; 184
     e86:	92 07       	cpc	r25, r18
     e88:	78 f3       	brcs	.-34     	; 0xe68 <DLS_checkLoginCredentials+0x44>
{

    uint8 i, saved_password[5];

    /* Fetch saved password from EEPROM */
    for( i=0 ; i<=3 ; i++ )
     e8a:	89 81       	ldd	r24, Y+1	; 0x01
     e8c:	8f 5f       	subi	r24, 0xFF	; 255
     e8e:	89 83       	std	Y+1, r24	; 0x01
     e90:	89 81       	ldd	r24, Y+1	; 0x01
     e92:	84 30       	cpi	r24, 0x04	; 4
     e94:	98 f2       	brcs	.-90     	; 0xe3c <DLS_checkLoginCredentials+0x18>
        _EXT_EEPROM_readByte( USR_PASSWD_EEPROM_MEM_LOC+i , saved_password+i );
        APPROX_HALF_SEC_DELAY;
    }

    /* Check entered credentials correctness */
    for( i=0 ; i<=3 ; i++ )
     e96:	19 82       	std	Y+1, r1	; 0x01
     e98:	d8 c0       	rjmp	.+432    	; 0x104a <DLS_checkLoginCredentials+0x226>
    {
        /* if not identical, break func; return PASSWORD_NOT_MATCHED */
    	if( rx_password[i] != saved_password[i] )
     e9a:	89 81       	ldd	r24, Y+1	; 0x01
     e9c:	88 2f       	mov	r24, r24
     e9e:	90 e0       	ldi	r25, 0x00	; 0
     ea0:	fc 01       	movw	r30, r24
     ea2:	e4 57       	subi	r30, 0x74	; 116
     ea4:	ff 4f       	sbci	r31, 0xFF	; 255
     ea6:	40 81       	ld	r20, Z
     ea8:	89 81       	ldd	r24, Y+1	; 0x01
     eaa:	28 2f       	mov	r18, r24
     eac:	30 e0       	ldi	r19, 0x00	; 0
     eae:	ce 01       	movw	r24, r28
     eb0:	02 96       	adiw	r24, 0x02	; 2
     eb2:	fc 01       	movw	r30, r24
     eb4:	e2 0f       	add	r30, r18
     eb6:	f3 1f       	adc	r31, r19
     eb8:	80 81       	ld	r24, Z
     eba:	48 17       	cp	r20, r24
     ebc:	09 f4       	brne	.+2      	; 0xec0 <DLS_checkLoginCredentials+0x9c>
     ebe:	c2 c0       	rjmp	.+388    	; 0x1044 <DLS_checkLoginCredentials+0x220>
    	{
    		/*TESTING*/__DIO_writeOutputPinValue(PORT_D, FAILED_LED, HIGH);/*TESTING*/
     ec0:	83 e0       	ldi	r24, 0x03	; 3
     ec2:	63 e0       	ldi	r22, 0x03	; 3
     ec4:	41 e0       	ldi	r20, 0x01	; 1
     ec6:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <__DIO_writeOutputPinValue>
    		APPROX_1SEC_DELAY;APPROX_1SEC_DELAY;APPROX_1SEC_DELAY;APPROX_1SEC_DELAY;
     eca:	10 92 8a 00 	sts	0x008A, r1
     ece:	10 92 89 00 	sts	0x0089, r1
     ed2:	09 c0       	rjmp	.+18     	; 0xee6 <DLS_checkLoginCredentials+0xc2>
     ed4:	80 91 89 00 	lds	r24, 0x0089
     ed8:	90 91 8a 00 	lds	r25, 0x008A
     edc:	01 96       	adiw	r24, 0x01	; 1
     ede:	90 93 8a 00 	sts	0x008A, r25
     ee2:	80 93 89 00 	sts	0x0089, r24
     ee6:	80 91 89 00 	lds	r24, 0x0089
     eea:	90 91 8a 00 	lds	r25, 0x008A
     eee:	2d ef       	ldi	r18, 0xFD	; 253
     ef0:	88 3e       	cpi	r24, 0xE8	; 232
     ef2:	92 07       	cpc	r25, r18
     ef4:	78 f3       	brcs	.-34     	; 0xed4 <DLS_checkLoginCredentials+0xb0>
     ef6:	10 92 8a 00 	sts	0x008A, r1
     efa:	10 92 89 00 	sts	0x0089, r1
     efe:	09 c0       	rjmp	.+18     	; 0xf12 <DLS_checkLoginCredentials+0xee>
     f00:	80 91 89 00 	lds	r24, 0x0089
     f04:	90 91 8a 00 	lds	r25, 0x008A
     f08:	01 96       	adiw	r24, 0x01	; 1
     f0a:	90 93 8a 00 	sts	0x008A, r25
     f0e:	80 93 89 00 	sts	0x0089, r24
     f12:	80 91 89 00 	lds	r24, 0x0089
     f16:	90 91 8a 00 	lds	r25, 0x008A
     f1a:	2d ef       	ldi	r18, 0xFD	; 253
     f1c:	88 3e       	cpi	r24, 0xE8	; 232
     f1e:	92 07       	cpc	r25, r18
     f20:	78 f3       	brcs	.-34     	; 0xf00 <DLS_checkLoginCredentials+0xdc>
     f22:	10 92 8a 00 	sts	0x008A, r1
     f26:	10 92 89 00 	sts	0x0089, r1
     f2a:	09 c0       	rjmp	.+18     	; 0xf3e <DLS_checkLoginCredentials+0x11a>
     f2c:	80 91 89 00 	lds	r24, 0x0089
     f30:	90 91 8a 00 	lds	r25, 0x008A
     f34:	01 96       	adiw	r24, 0x01	; 1
     f36:	90 93 8a 00 	sts	0x008A, r25
     f3a:	80 93 89 00 	sts	0x0089, r24
     f3e:	80 91 89 00 	lds	r24, 0x0089
     f42:	90 91 8a 00 	lds	r25, 0x008A
     f46:	2d ef       	ldi	r18, 0xFD	; 253
     f48:	88 3e       	cpi	r24, 0xE8	; 232
     f4a:	92 07       	cpc	r25, r18
     f4c:	78 f3       	brcs	.-34     	; 0xf2c <DLS_checkLoginCredentials+0x108>
     f4e:	10 92 8a 00 	sts	0x008A, r1
     f52:	10 92 89 00 	sts	0x0089, r1
     f56:	09 c0       	rjmp	.+18     	; 0xf6a <DLS_checkLoginCredentials+0x146>
     f58:	80 91 89 00 	lds	r24, 0x0089
     f5c:	90 91 8a 00 	lds	r25, 0x008A
     f60:	01 96       	adiw	r24, 0x01	; 1
     f62:	90 93 8a 00 	sts	0x008A, r25
     f66:	80 93 89 00 	sts	0x0089, r24
     f6a:	80 91 89 00 	lds	r24, 0x0089
     f6e:	90 91 8a 00 	lds	r25, 0x008A
     f72:	2d ef       	ldi	r18, 0xFD	; 253
     f74:	88 3e       	cpi	r24, 0xE8	; 232
     f76:	92 07       	cpc	r25, r18
     f78:	78 f3       	brcs	.-34     	; 0xf58 <DLS_checkLoginCredentials+0x134>
    		APPROX_1SEC_DELAY;APPROX_1SEC_DELAY;APPROX_1SEC_DELAY;APPROX_1SEC_DELAY;
     f7a:	10 92 8a 00 	sts	0x008A, r1
     f7e:	10 92 89 00 	sts	0x0089, r1
     f82:	09 c0       	rjmp	.+18     	; 0xf96 <DLS_checkLoginCredentials+0x172>
     f84:	80 91 89 00 	lds	r24, 0x0089
     f88:	90 91 8a 00 	lds	r25, 0x008A
     f8c:	01 96       	adiw	r24, 0x01	; 1
     f8e:	90 93 8a 00 	sts	0x008A, r25
     f92:	80 93 89 00 	sts	0x0089, r24
     f96:	80 91 89 00 	lds	r24, 0x0089
     f9a:	90 91 8a 00 	lds	r25, 0x008A
     f9e:	2d ef       	ldi	r18, 0xFD	; 253
     fa0:	88 3e       	cpi	r24, 0xE8	; 232
     fa2:	92 07       	cpc	r25, r18
     fa4:	78 f3       	brcs	.-34     	; 0xf84 <DLS_checkLoginCredentials+0x160>
     fa6:	10 92 8a 00 	sts	0x008A, r1
     faa:	10 92 89 00 	sts	0x0089, r1
     fae:	09 c0       	rjmp	.+18     	; 0xfc2 <DLS_checkLoginCredentials+0x19e>
     fb0:	80 91 89 00 	lds	r24, 0x0089
     fb4:	90 91 8a 00 	lds	r25, 0x008A
     fb8:	01 96       	adiw	r24, 0x01	; 1
     fba:	90 93 8a 00 	sts	0x008A, r25
     fbe:	80 93 89 00 	sts	0x0089, r24
     fc2:	80 91 89 00 	lds	r24, 0x0089
     fc6:	90 91 8a 00 	lds	r25, 0x008A
     fca:	2d ef       	ldi	r18, 0xFD	; 253
     fcc:	88 3e       	cpi	r24, 0xE8	; 232
     fce:	92 07       	cpc	r25, r18
     fd0:	78 f3       	brcs	.-34     	; 0xfb0 <DLS_checkLoginCredentials+0x18c>
     fd2:	10 92 8a 00 	sts	0x008A, r1
     fd6:	10 92 89 00 	sts	0x0089, r1
     fda:	09 c0       	rjmp	.+18     	; 0xfee <DLS_checkLoginCredentials+0x1ca>
     fdc:	80 91 89 00 	lds	r24, 0x0089
     fe0:	90 91 8a 00 	lds	r25, 0x008A
     fe4:	01 96       	adiw	r24, 0x01	; 1
     fe6:	90 93 8a 00 	sts	0x008A, r25
     fea:	80 93 89 00 	sts	0x0089, r24
     fee:	80 91 89 00 	lds	r24, 0x0089
     ff2:	90 91 8a 00 	lds	r25, 0x008A
     ff6:	2d ef       	ldi	r18, 0xFD	; 253
     ff8:	88 3e       	cpi	r24, 0xE8	; 232
     ffa:	92 07       	cpc	r25, r18
     ffc:	78 f3       	brcs	.-34     	; 0xfdc <DLS_checkLoginCredentials+0x1b8>
     ffe:	10 92 8a 00 	sts	0x008A, r1
    1002:	10 92 89 00 	sts	0x0089, r1
    1006:	09 c0       	rjmp	.+18     	; 0x101a <DLS_checkLoginCredentials+0x1f6>
    1008:	80 91 89 00 	lds	r24, 0x0089
    100c:	90 91 8a 00 	lds	r25, 0x008A
    1010:	01 96       	adiw	r24, 0x01	; 1
    1012:	90 93 8a 00 	sts	0x008A, r25
    1016:	80 93 89 00 	sts	0x0089, r24
    101a:	80 91 89 00 	lds	r24, 0x0089
    101e:	90 91 8a 00 	lds	r25, 0x008A
    1022:	2d ef       	ldi	r18, 0xFD	; 253
    1024:	88 3e       	cpi	r24, 0xE8	; 232
    1026:	92 07       	cpc	r25, r18
    1028:	78 f3       	brcs	.-34     	; 0x1008 <DLS_checkLoginCredentials+0x1e4>
    		/*TESTING*/__DIO_writeOutputPinValue(PORT_D, FAILED_LED, LOW);/*TESTING*/
    102a:	83 e0       	ldi	r24, 0x03	; 3
    102c:	63 e0       	ldi	r22, 0x03	; 3
    102e:	40 e0       	ldi	r20, 0x00	; 0
    1030:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <__DIO_writeOutputPinValue>

            wrongTrialsAlarm_counter++;
    1034:	80 91 82 00 	lds	r24, 0x0082
    1038:	8f 5f       	subi	r24, 0xFF	; 255
    103a:	80 93 82 00 	sts	0x0082, r24

    		return PASSWORD_NOT_MATCHED;
    103e:	81 e2       	ldi	r24, 0x21	; 33
    1040:	8f 83       	std	Y+7, r24	; 0x07
    1042:	c5 c0       	rjmp	.+394    	; 0x11ce <DLS_checkLoginCredentials+0x3aa>
        _EXT_EEPROM_readByte( USR_PASSWD_EEPROM_MEM_LOC+i , saved_password+i );
        APPROX_HALF_SEC_DELAY;
    }

    /* Check entered credentials correctness */
    for( i=0 ; i<=3 ; i++ )
    1044:	89 81       	ldd	r24, Y+1	; 0x01
    1046:	8f 5f       	subi	r24, 0xFF	; 255
    1048:	89 83       	std	Y+1, r24	; 0x01
    104a:	89 81       	ldd	r24, Y+1	; 0x01
    104c:	84 30       	cpi	r24, 0x04	; 4
    104e:	08 f4       	brcc	.+2      	; 0x1052 <DLS_checkLoginCredentials+0x22e>
    1050:	24 cf       	rjmp	.-440    	; 0xe9a <DLS_checkLoginCredentials+0x76>
    		return PASSWORD_NOT_MATCHED;
    	}
    }
    

    /*TESTING*/__DIO_writeOutputPinValue(PORT_D, SUCCESS_LED, HIGH);/*TESTING*/
    1052:	83 e0       	ldi	r24, 0x03	; 3
    1054:	62 e0       	ldi	r22, 0x02	; 2
    1056:	41 e0       	ldi	r20, 0x01	; 1
    1058:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <__DIO_writeOutputPinValue>
    APPROX_1SEC_DELAY;APPROX_1SEC_DELAY;APPROX_1SEC_DELAY;APPROX_1SEC_DELAY;
    105c:	10 92 8a 00 	sts	0x008A, r1
    1060:	10 92 89 00 	sts	0x0089, r1
    1064:	09 c0       	rjmp	.+18     	; 0x1078 <DLS_checkLoginCredentials+0x254>
    1066:	80 91 89 00 	lds	r24, 0x0089
    106a:	90 91 8a 00 	lds	r25, 0x008A
    106e:	01 96       	adiw	r24, 0x01	; 1
    1070:	90 93 8a 00 	sts	0x008A, r25
    1074:	80 93 89 00 	sts	0x0089, r24
    1078:	80 91 89 00 	lds	r24, 0x0089
    107c:	90 91 8a 00 	lds	r25, 0x008A
    1080:	2d ef       	ldi	r18, 0xFD	; 253
    1082:	88 3e       	cpi	r24, 0xE8	; 232
    1084:	92 07       	cpc	r25, r18
    1086:	78 f3       	brcs	.-34     	; 0x1066 <DLS_checkLoginCredentials+0x242>
    1088:	10 92 8a 00 	sts	0x008A, r1
    108c:	10 92 89 00 	sts	0x0089, r1
    1090:	09 c0       	rjmp	.+18     	; 0x10a4 <DLS_checkLoginCredentials+0x280>
    1092:	80 91 89 00 	lds	r24, 0x0089
    1096:	90 91 8a 00 	lds	r25, 0x008A
    109a:	01 96       	adiw	r24, 0x01	; 1
    109c:	90 93 8a 00 	sts	0x008A, r25
    10a0:	80 93 89 00 	sts	0x0089, r24
    10a4:	80 91 89 00 	lds	r24, 0x0089
    10a8:	90 91 8a 00 	lds	r25, 0x008A
    10ac:	2d ef       	ldi	r18, 0xFD	; 253
    10ae:	88 3e       	cpi	r24, 0xE8	; 232
    10b0:	92 07       	cpc	r25, r18
    10b2:	78 f3       	brcs	.-34     	; 0x1092 <DLS_checkLoginCredentials+0x26e>
    10b4:	10 92 8a 00 	sts	0x008A, r1
    10b8:	10 92 89 00 	sts	0x0089, r1
    10bc:	09 c0       	rjmp	.+18     	; 0x10d0 <DLS_checkLoginCredentials+0x2ac>
    10be:	80 91 89 00 	lds	r24, 0x0089
    10c2:	90 91 8a 00 	lds	r25, 0x008A
    10c6:	01 96       	adiw	r24, 0x01	; 1
    10c8:	90 93 8a 00 	sts	0x008A, r25
    10cc:	80 93 89 00 	sts	0x0089, r24
    10d0:	80 91 89 00 	lds	r24, 0x0089
    10d4:	90 91 8a 00 	lds	r25, 0x008A
    10d8:	2d ef       	ldi	r18, 0xFD	; 253
    10da:	88 3e       	cpi	r24, 0xE8	; 232
    10dc:	92 07       	cpc	r25, r18
    10de:	78 f3       	brcs	.-34     	; 0x10be <DLS_checkLoginCredentials+0x29a>
    10e0:	10 92 8a 00 	sts	0x008A, r1
    10e4:	10 92 89 00 	sts	0x0089, r1
    10e8:	09 c0       	rjmp	.+18     	; 0x10fc <DLS_checkLoginCredentials+0x2d8>
    10ea:	80 91 89 00 	lds	r24, 0x0089
    10ee:	90 91 8a 00 	lds	r25, 0x008A
    10f2:	01 96       	adiw	r24, 0x01	; 1
    10f4:	90 93 8a 00 	sts	0x008A, r25
    10f8:	80 93 89 00 	sts	0x0089, r24
    10fc:	80 91 89 00 	lds	r24, 0x0089
    1100:	90 91 8a 00 	lds	r25, 0x008A
    1104:	2d ef       	ldi	r18, 0xFD	; 253
    1106:	88 3e       	cpi	r24, 0xE8	; 232
    1108:	92 07       	cpc	r25, r18
    110a:	78 f3       	brcs	.-34     	; 0x10ea <DLS_checkLoginCredentials+0x2c6>
    APPROX_1SEC_DELAY;APPROX_1SEC_DELAY;APPROX_1SEC_DELAY;APPROX_1SEC_DELAY;
    110c:	10 92 8a 00 	sts	0x008A, r1
    1110:	10 92 89 00 	sts	0x0089, r1
    1114:	09 c0       	rjmp	.+18     	; 0x1128 <DLS_checkLoginCredentials+0x304>
    1116:	80 91 89 00 	lds	r24, 0x0089
    111a:	90 91 8a 00 	lds	r25, 0x008A
    111e:	01 96       	adiw	r24, 0x01	; 1
    1120:	90 93 8a 00 	sts	0x008A, r25
    1124:	80 93 89 00 	sts	0x0089, r24
    1128:	80 91 89 00 	lds	r24, 0x0089
    112c:	90 91 8a 00 	lds	r25, 0x008A
    1130:	2d ef       	ldi	r18, 0xFD	; 253
    1132:	88 3e       	cpi	r24, 0xE8	; 232
    1134:	92 07       	cpc	r25, r18
    1136:	78 f3       	brcs	.-34     	; 0x1116 <DLS_checkLoginCredentials+0x2f2>
    1138:	10 92 8a 00 	sts	0x008A, r1
    113c:	10 92 89 00 	sts	0x0089, r1
    1140:	09 c0       	rjmp	.+18     	; 0x1154 <DLS_checkLoginCredentials+0x330>
    1142:	80 91 89 00 	lds	r24, 0x0089
    1146:	90 91 8a 00 	lds	r25, 0x008A
    114a:	01 96       	adiw	r24, 0x01	; 1
    114c:	90 93 8a 00 	sts	0x008A, r25
    1150:	80 93 89 00 	sts	0x0089, r24
    1154:	80 91 89 00 	lds	r24, 0x0089
    1158:	90 91 8a 00 	lds	r25, 0x008A
    115c:	2d ef       	ldi	r18, 0xFD	; 253
    115e:	88 3e       	cpi	r24, 0xE8	; 232
    1160:	92 07       	cpc	r25, r18
    1162:	78 f3       	brcs	.-34     	; 0x1142 <DLS_checkLoginCredentials+0x31e>
    1164:	10 92 8a 00 	sts	0x008A, r1
    1168:	10 92 89 00 	sts	0x0089, r1
    116c:	09 c0       	rjmp	.+18     	; 0x1180 <DLS_checkLoginCredentials+0x35c>
    116e:	80 91 89 00 	lds	r24, 0x0089
    1172:	90 91 8a 00 	lds	r25, 0x008A
    1176:	01 96       	adiw	r24, 0x01	; 1
    1178:	90 93 8a 00 	sts	0x008A, r25
    117c:	80 93 89 00 	sts	0x0089, r24
    1180:	80 91 89 00 	lds	r24, 0x0089
    1184:	90 91 8a 00 	lds	r25, 0x008A
    1188:	2d ef       	ldi	r18, 0xFD	; 253
    118a:	88 3e       	cpi	r24, 0xE8	; 232
    118c:	92 07       	cpc	r25, r18
    118e:	78 f3       	brcs	.-34     	; 0x116e <DLS_checkLoginCredentials+0x34a>
    1190:	10 92 8a 00 	sts	0x008A, r1
    1194:	10 92 89 00 	sts	0x0089, r1
    1198:	09 c0       	rjmp	.+18     	; 0x11ac <DLS_checkLoginCredentials+0x388>
    119a:	80 91 89 00 	lds	r24, 0x0089
    119e:	90 91 8a 00 	lds	r25, 0x008A
    11a2:	01 96       	adiw	r24, 0x01	; 1
    11a4:	90 93 8a 00 	sts	0x008A, r25
    11a8:	80 93 89 00 	sts	0x0089, r24
    11ac:	80 91 89 00 	lds	r24, 0x0089
    11b0:	90 91 8a 00 	lds	r25, 0x008A
    11b4:	2d ef       	ldi	r18, 0xFD	; 253
    11b6:	88 3e       	cpi	r24, 0xE8	; 232
    11b8:	92 07       	cpc	r25, r18
    11ba:	78 f3       	brcs	.-34     	; 0x119a <DLS_checkLoginCredentials+0x376>
    /*TESTING*/__DIO_writeOutputPinValue(PORT_D, SUCCESS_LED, LOW);/*TESTING*/
    11bc:	83 e0       	ldi	r24, 0x03	; 3
    11be:	62 e0       	ldi	r22, 0x02	; 2
    11c0:	40 e0       	ldi	r20, 0x00	; 0
    11c2:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <__DIO_writeOutputPinValue>

    wrongTrialsAlarm_counter = FALSE;
    11c6:	10 92 82 00 	sts	0x0082, r1

    return USER_AUTHENTICATED;
    11ca:	82 e1       	ldi	r24, 0x12	; 18
    11cc:	8f 83       	std	Y+7, r24	; 0x07
    11ce:	8f 81       	ldd	r24, Y+7	; 0x07

}
    11d0:	27 96       	adiw	r28, 0x07	; 7
    11d2:	0f b6       	in	r0, 0x3f	; 63
    11d4:	f8 94       	cli
    11d6:	de bf       	out	0x3e, r29	; 62
    11d8:	0f be       	out	0x3f, r0	; 63
    11da:	cd bf       	out	0x3d, r28	; 61
    11dc:	cf 91       	pop	r28
    11de:	df 91       	pop	r29
    11e0:	08 95       	ret

000011e2 <DLS_changeOldPassword>:
/**************************************************************************************************/

/* APPL Software: DLS_changeOldPassword FUNCTION **************************************************/
uint8 DLS_changeOldPassword(void)
{
    11e2:	df 93       	push	r29
    11e4:	cf 93       	push	r28
    11e6:	cd b7       	in	r28, 0x3d	; 61
    11e8:	de b7       	in	r29, 0x3e	; 62
    11ea:	27 97       	sbiw	r28, 0x07	; 7
    11ec:	0f b6       	in	r0, 0x3f	; 63
    11ee:	f8 94       	cli
    11f0:	de bf       	out	0x3e, r29	; 62
    11f2:	0f be       	out	0x3f, r0	; 63
    11f4:	cd bf       	out	0x3d, r28	; 61

    uint8 i, saved_password[5];

    /* Fetch saved password from EEPROM */
    for( i=0 ; i<=3 ; i++ )
    11f6:	19 82       	std	Y+1, r1	; 0x01
    11f8:	2a c0       	rjmp	.+84     	; 0x124e <DLS_changeOldPassword+0x6c>
    {
        _EXT_EEPROM_readByte( USR_PASSWD_EEPROM_MEM_LOC+i , saved_password+i );
    11fa:	89 81       	ldd	r24, Y+1	; 0x01
    11fc:	88 2f       	mov	r24, r24
    11fe:	90 e0       	ldi	r25, 0x00	; 0
    1200:	0f 96       	adiw	r24, 0x0f	; 15
    1202:	ac 01       	movw	r20, r24
    1204:	89 81       	ldd	r24, Y+1	; 0x01
    1206:	88 2f       	mov	r24, r24
    1208:	90 e0       	ldi	r25, 0x00	; 0
    120a:	9e 01       	movw	r18, r28
    120c:	2e 5f       	subi	r18, 0xFE	; 254
    120e:	3f 4f       	sbci	r19, 0xFF	; 255
    1210:	28 0f       	add	r18, r24
    1212:	39 1f       	adc	r19, r25
    1214:	ca 01       	movw	r24, r20
    1216:	b9 01       	movw	r22, r18
    1218:	0e 94 be 0c 	call	0x197c	; 0x197c <_EXT_EEPROM_readByte>
        APPROX_HALF_SEC_DELAY;
    121c:	10 92 8a 00 	sts	0x008A, r1
    1220:	10 92 89 00 	sts	0x0089, r1
    1224:	09 c0       	rjmp	.+18     	; 0x1238 <DLS_changeOldPassword+0x56>
    1226:	80 91 89 00 	lds	r24, 0x0089
    122a:	90 91 8a 00 	lds	r25, 0x008A
    122e:	01 96       	adiw	r24, 0x01	; 1
    1230:	90 93 8a 00 	sts	0x008A, r25
    1234:	80 93 89 00 	sts	0x0089, r24
    1238:	80 91 89 00 	lds	r24, 0x0089
    123c:	90 91 8a 00 	lds	r25, 0x008A
    1240:	28 e8       	ldi	r18, 0x88	; 136
    1242:	88 3b       	cpi	r24, 0xB8	; 184
    1244:	92 07       	cpc	r25, r18
    1246:	78 f3       	brcs	.-34     	; 0x1226 <DLS_changeOldPassword+0x44>
{

    uint8 i, saved_password[5];

    /* Fetch saved password from EEPROM */
    for( i=0 ; i<=3 ; i++ )
    1248:	89 81       	ldd	r24, Y+1	; 0x01
    124a:	8f 5f       	subi	r24, 0xFF	; 255
    124c:	89 83       	std	Y+1, r24	; 0x01
    124e:	89 81       	ldd	r24, Y+1	; 0x01
    1250:	84 30       	cpi	r24, 0x04	; 4
    1252:	98 f2       	brcs	.-90     	; 0x11fa <DLS_changeOldPassword+0x18>
    }



    /* Check entered credentials correctness */
    for( i=0 ; i<=3 ; i++ )
    1254:	19 82       	std	Y+1, r1	; 0x01
    1256:	d3 c0       	rjmp	.+422    	; 0x13fe <DLS_changeOldPassword+0x21c>
    {
        /* if not identical, break func; return PASSWORD_NOT_MATCHED */
    	if( rx_password[i] != saved_password[i] )
    1258:	89 81       	ldd	r24, Y+1	; 0x01
    125a:	88 2f       	mov	r24, r24
    125c:	90 e0       	ldi	r25, 0x00	; 0
    125e:	fc 01       	movw	r30, r24
    1260:	e4 57       	subi	r30, 0x74	; 116
    1262:	ff 4f       	sbci	r31, 0xFF	; 255
    1264:	40 81       	ld	r20, Z
    1266:	89 81       	ldd	r24, Y+1	; 0x01
    1268:	28 2f       	mov	r18, r24
    126a:	30 e0       	ldi	r19, 0x00	; 0
    126c:	ce 01       	movw	r24, r28
    126e:	02 96       	adiw	r24, 0x02	; 2
    1270:	fc 01       	movw	r30, r24
    1272:	e2 0f       	add	r30, r18
    1274:	f3 1f       	adc	r31, r19
    1276:	80 81       	ld	r24, Z
    1278:	48 17       	cp	r20, r24
    127a:	09 f4       	brne	.+2      	; 0x127e <DLS_changeOldPassword+0x9c>
    127c:	bd c0       	rjmp	.+378    	; 0x13f8 <DLS_changeOldPassword+0x216>
    	{
    		/*TESTING*/__DIO_writeOutputPinValue(PORT_D, FAILED_LED, HIGH);/*TESTING*/
    127e:	83 e0       	ldi	r24, 0x03	; 3
    1280:	63 e0       	ldi	r22, 0x03	; 3
    1282:	41 e0       	ldi	r20, 0x01	; 1
    1284:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <__DIO_writeOutputPinValue>
    		APPROX_1SEC_DELAY;APPROX_1SEC_DELAY;APPROX_1SEC_DELAY;APPROX_1SEC_DELAY;
    1288:	10 92 8a 00 	sts	0x008A, r1
    128c:	10 92 89 00 	sts	0x0089, r1
    1290:	09 c0       	rjmp	.+18     	; 0x12a4 <DLS_changeOldPassword+0xc2>
    1292:	80 91 89 00 	lds	r24, 0x0089
    1296:	90 91 8a 00 	lds	r25, 0x008A
    129a:	01 96       	adiw	r24, 0x01	; 1
    129c:	90 93 8a 00 	sts	0x008A, r25
    12a0:	80 93 89 00 	sts	0x0089, r24
    12a4:	80 91 89 00 	lds	r24, 0x0089
    12a8:	90 91 8a 00 	lds	r25, 0x008A
    12ac:	2d ef       	ldi	r18, 0xFD	; 253
    12ae:	88 3e       	cpi	r24, 0xE8	; 232
    12b0:	92 07       	cpc	r25, r18
    12b2:	78 f3       	brcs	.-34     	; 0x1292 <DLS_changeOldPassword+0xb0>
    12b4:	10 92 8a 00 	sts	0x008A, r1
    12b8:	10 92 89 00 	sts	0x0089, r1
    12bc:	09 c0       	rjmp	.+18     	; 0x12d0 <DLS_changeOldPassword+0xee>
    12be:	80 91 89 00 	lds	r24, 0x0089
    12c2:	90 91 8a 00 	lds	r25, 0x008A
    12c6:	01 96       	adiw	r24, 0x01	; 1
    12c8:	90 93 8a 00 	sts	0x008A, r25
    12cc:	80 93 89 00 	sts	0x0089, r24
    12d0:	80 91 89 00 	lds	r24, 0x0089
    12d4:	90 91 8a 00 	lds	r25, 0x008A
    12d8:	2d ef       	ldi	r18, 0xFD	; 253
    12da:	88 3e       	cpi	r24, 0xE8	; 232
    12dc:	92 07       	cpc	r25, r18
    12de:	78 f3       	brcs	.-34     	; 0x12be <DLS_changeOldPassword+0xdc>
    12e0:	10 92 8a 00 	sts	0x008A, r1
    12e4:	10 92 89 00 	sts	0x0089, r1
    12e8:	09 c0       	rjmp	.+18     	; 0x12fc <DLS_changeOldPassword+0x11a>
    12ea:	80 91 89 00 	lds	r24, 0x0089
    12ee:	90 91 8a 00 	lds	r25, 0x008A
    12f2:	01 96       	adiw	r24, 0x01	; 1
    12f4:	90 93 8a 00 	sts	0x008A, r25
    12f8:	80 93 89 00 	sts	0x0089, r24
    12fc:	80 91 89 00 	lds	r24, 0x0089
    1300:	90 91 8a 00 	lds	r25, 0x008A
    1304:	2d ef       	ldi	r18, 0xFD	; 253
    1306:	88 3e       	cpi	r24, 0xE8	; 232
    1308:	92 07       	cpc	r25, r18
    130a:	78 f3       	brcs	.-34     	; 0x12ea <DLS_changeOldPassword+0x108>
    130c:	10 92 8a 00 	sts	0x008A, r1
    1310:	10 92 89 00 	sts	0x0089, r1
    1314:	09 c0       	rjmp	.+18     	; 0x1328 <DLS_changeOldPassword+0x146>
    1316:	80 91 89 00 	lds	r24, 0x0089
    131a:	90 91 8a 00 	lds	r25, 0x008A
    131e:	01 96       	adiw	r24, 0x01	; 1
    1320:	90 93 8a 00 	sts	0x008A, r25
    1324:	80 93 89 00 	sts	0x0089, r24
    1328:	80 91 89 00 	lds	r24, 0x0089
    132c:	90 91 8a 00 	lds	r25, 0x008A
    1330:	2d ef       	ldi	r18, 0xFD	; 253
    1332:	88 3e       	cpi	r24, 0xE8	; 232
    1334:	92 07       	cpc	r25, r18
    1336:	78 f3       	brcs	.-34     	; 0x1316 <DLS_changeOldPassword+0x134>
    		APPROX_1SEC_DELAY;APPROX_1SEC_DELAY;APPROX_1SEC_DELAY;APPROX_1SEC_DELAY;
    1338:	10 92 8a 00 	sts	0x008A, r1
    133c:	10 92 89 00 	sts	0x0089, r1
    1340:	09 c0       	rjmp	.+18     	; 0x1354 <DLS_changeOldPassword+0x172>
    1342:	80 91 89 00 	lds	r24, 0x0089
    1346:	90 91 8a 00 	lds	r25, 0x008A
    134a:	01 96       	adiw	r24, 0x01	; 1
    134c:	90 93 8a 00 	sts	0x008A, r25
    1350:	80 93 89 00 	sts	0x0089, r24
    1354:	80 91 89 00 	lds	r24, 0x0089
    1358:	90 91 8a 00 	lds	r25, 0x008A
    135c:	2d ef       	ldi	r18, 0xFD	; 253
    135e:	88 3e       	cpi	r24, 0xE8	; 232
    1360:	92 07       	cpc	r25, r18
    1362:	78 f3       	brcs	.-34     	; 0x1342 <DLS_changeOldPassword+0x160>
    1364:	10 92 8a 00 	sts	0x008A, r1
    1368:	10 92 89 00 	sts	0x0089, r1
    136c:	09 c0       	rjmp	.+18     	; 0x1380 <DLS_changeOldPassword+0x19e>
    136e:	80 91 89 00 	lds	r24, 0x0089
    1372:	90 91 8a 00 	lds	r25, 0x008A
    1376:	01 96       	adiw	r24, 0x01	; 1
    1378:	90 93 8a 00 	sts	0x008A, r25
    137c:	80 93 89 00 	sts	0x0089, r24
    1380:	80 91 89 00 	lds	r24, 0x0089
    1384:	90 91 8a 00 	lds	r25, 0x008A
    1388:	2d ef       	ldi	r18, 0xFD	; 253
    138a:	88 3e       	cpi	r24, 0xE8	; 232
    138c:	92 07       	cpc	r25, r18
    138e:	78 f3       	brcs	.-34     	; 0x136e <DLS_changeOldPassword+0x18c>
    1390:	10 92 8a 00 	sts	0x008A, r1
    1394:	10 92 89 00 	sts	0x0089, r1
    1398:	09 c0       	rjmp	.+18     	; 0x13ac <DLS_changeOldPassword+0x1ca>
    139a:	80 91 89 00 	lds	r24, 0x0089
    139e:	90 91 8a 00 	lds	r25, 0x008A
    13a2:	01 96       	adiw	r24, 0x01	; 1
    13a4:	90 93 8a 00 	sts	0x008A, r25
    13a8:	80 93 89 00 	sts	0x0089, r24
    13ac:	80 91 89 00 	lds	r24, 0x0089
    13b0:	90 91 8a 00 	lds	r25, 0x008A
    13b4:	2d ef       	ldi	r18, 0xFD	; 253
    13b6:	88 3e       	cpi	r24, 0xE8	; 232
    13b8:	92 07       	cpc	r25, r18
    13ba:	78 f3       	brcs	.-34     	; 0x139a <DLS_changeOldPassword+0x1b8>
    13bc:	10 92 8a 00 	sts	0x008A, r1
    13c0:	10 92 89 00 	sts	0x0089, r1
    13c4:	09 c0       	rjmp	.+18     	; 0x13d8 <DLS_changeOldPassword+0x1f6>
    13c6:	80 91 89 00 	lds	r24, 0x0089
    13ca:	90 91 8a 00 	lds	r25, 0x008A
    13ce:	01 96       	adiw	r24, 0x01	; 1
    13d0:	90 93 8a 00 	sts	0x008A, r25
    13d4:	80 93 89 00 	sts	0x0089, r24
    13d8:	80 91 89 00 	lds	r24, 0x0089
    13dc:	90 91 8a 00 	lds	r25, 0x008A
    13e0:	2d ef       	ldi	r18, 0xFD	; 253
    13e2:	88 3e       	cpi	r24, 0xE8	; 232
    13e4:	92 07       	cpc	r25, r18
    13e6:	78 f3       	brcs	.-34     	; 0x13c6 <DLS_changeOldPassword+0x1e4>
    		/*TESTING*/__DIO_writeOutputPinValue(PORT_D, FAILED_LED, LOW);/*TESTING*/
    13e8:	83 e0       	ldi	r24, 0x03	; 3
    13ea:	63 e0       	ldi	r22, 0x03	; 3
    13ec:	40 e0       	ldi	r20, 0x00	; 0
    13ee:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <__DIO_writeOutputPinValue>

    		return PASSWORD_NOT_MATCHED;
    13f2:	81 e2       	ldi	r24, 0x21	; 33
    13f4:	8f 83       	std	Y+7, r24	; 0x07
    13f6:	cb c1       	rjmp	.+918    	; 0x178e <DLS_changeOldPassword+0x5ac>
    }



    /* Check entered credentials correctness */
    for( i=0 ; i<=3 ; i++ )
    13f8:	89 81       	ldd	r24, Y+1	; 0x01
    13fa:	8f 5f       	subi	r24, 0xFF	; 255
    13fc:	89 83       	std	Y+1, r24	; 0x01
    13fe:	89 81       	ldd	r24, Y+1	; 0x01
    1400:	84 30       	cpi	r24, 0x04	; 4
    1402:	08 f4       	brcc	.+2      	; 0x1406 <DLS_changeOldPassword+0x224>
    1404:	29 cf       	rjmp	.-430    	; 0x1258 <DLS_changeOldPassword+0x76>
    	}
    }


    /* Check new passwords are identical */
    for( i=0 ; i<=3 ; i++ )
    1406:	19 82       	std	Y+1, r1	; 0x01
    1408:	d3 c0       	rjmp	.+422    	; 0x15b0 <DLS_changeOldPassword+0x3ce>
    {
        /* if not identical, break func; return PASSWORD_NOT_MATCHED */
    	if( rx_password[4+i] != rx_password[8+i] )
    140a:	89 81       	ldd	r24, Y+1	; 0x01
    140c:	88 2f       	mov	r24, r24
    140e:	90 e0       	ldi	r25, 0x00	; 0
    1410:	04 96       	adiw	r24, 0x04	; 4
    1412:	fc 01       	movw	r30, r24
    1414:	e4 57       	subi	r30, 0x74	; 116
    1416:	ff 4f       	sbci	r31, 0xFF	; 255
    1418:	20 81       	ld	r18, Z
    141a:	89 81       	ldd	r24, Y+1	; 0x01
    141c:	88 2f       	mov	r24, r24
    141e:	90 e0       	ldi	r25, 0x00	; 0
    1420:	08 96       	adiw	r24, 0x08	; 8
    1422:	fc 01       	movw	r30, r24
    1424:	e4 57       	subi	r30, 0x74	; 116
    1426:	ff 4f       	sbci	r31, 0xFF	; 255
    1428:	80 81       	ld	r24, Z
    142a:	28 17       	cp	r18, r24
    142c:	09 f4       	brne	.+2      	; 0x1430 <DLS_changeOldPassword+0x24e>
    142e:	bd c0       	rjmp	.+378    	; 0x15aa <DLS_changeOldPassword+0x3c8>
    	{
    		/*TESTING*/__DIO_writeOutputPinValue(PORT_D, FAILED_LED, HIGH);/*TESTING*/
    1430:	83 e0       	ldi	r24, 0x03	; 3
    1432:	63 e0       	ldi	r22, 0x03	; 3
    1434:	41 e0       	ldi	r20, 0x01	; 1
    1436:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <__DIO_writeOutputPinValue>
    		APPROX_1SEC_DELAY;APPROX_1SEC_DELAY;APPROX_1SEC_DELAY;APPROX_1SEC_DELAY;
    143a:	10 92 8a 00 	sts	0x008A, r1
    143e:	10 92 89 00 	sts	0x0089, r1
    1442:	09 c0       	rjmp	.+18     	; 0x1456 <DLS_changeOldPassword+0x274>
    1444:	80 91 89 00 	lds	r24, 0x0089
    1448:	90 91 8a 00 	lds	r25, 0x008A
    144c:	01 96       	adiw	r24, 0x01	; 1
    144e:	90 93 8a 00 	sts	0x008A, r25
    1452:	80 93 89 00 	sts	0x0089, r24
    1456:	80 91 89 00 	lds	r24, 0x0089
    145a:	90 91 8a 00 	lds	r25, 0x008A
    145e:	2d ef       	ldi	r18, 0xFD	; 253
    1460:	88 3e       	cpi	r24, 0xE8	; 232
    1462:	92 07       	cpc	r25, r18
    1464:	78 f3       	brcs	.-34     	; 0x1444 <DLS_changeOldPassword+0x262>
    1466:	10 92 8a 00 	sts	0x008A, r1
    146a:	10 92 89 00 	sts	0x0089, r1
    146e:	09 c0       	rjmp	.+18     	; 0x1482 <DLS_changeOldPassword+0x2a0>
    1470:	80 91 89 00 	lds	r24, 0x0089
    1474:	90 91 8a 00 	lds	r25, 0x008A
    1478:	01 96       	adiw	r24, 0x01	; 1
    147a:	90 93 8a 00 	sts	0x008A, r25
    147e:	80 93 89 00 	sts	0x0089, r24
    1482:	80 91 89 00 	lds	r24, 0x0089
    1486:	90 91 8a 00 	lds	r25, 0x008A
    148a:	2d ef       	ldi	r18, 0xFD	; 253
    148c:	88 3e       	cpi	r24, 0xE8	; 232
    148e:	92 07       	cpc	r25, r18
    1490:	78 f3       	brcs	.-34     	; 0x1470 <DLS_changeOldPassword+0x28e>
    1492:	10 92 8a 00 	sts	0x008A, r1
    1496:	10 92 89 00 	sts	0x0089, r1
    149a:	09 c0       	rjmp	.+18     	; 0x14ae <DLS_changeOldPassword+0x2cc>
    149c:	80 91 89 00 	lds	r24, 0x0089
    14a0:	90 91 8a 00 	lds	r25, 0x008A
    14a4:	01 96       	adiw	r24, 0x01	; 1
    14a6:	90 93 8a 00 	sts	0x008A, r25
    14aa:	80 93 89 00 	sts	0x0089, r24
    14ae:	80 91 89 00 	lds	r24, 0x0089
    14b2:	90 91 8a 00 	lds	r25, 0x008A
    14b6:	2d ef       	ldi	r18, 0xFD	; 253
    14b8:	88 3e       	cpi	r24, 0xE8	; 232
    14ba:	92 07       	cpc	r25, r18
    14bc:	78 f3       	brcs	.-34     	; 0x149c <DLS_changeOldPassword+0x2ba>
    14be:	10 92 8a 00 	sts	0x008A, r1
    14c2:	10 92 89 00 	sts	0x0089, r1
    14c6:	09 c0       	rjmp	.+18     	; 0x14da <DLS_changeOldPassword+0x2f8>
    14c8:	80 91 89 00 	lds	r24, 0x0089
    14cc:	90 91 8a 00 	lds	r25, 0x008A
    14d0:	01 96       	adiw	r24, 0x01	; 1
    14d2:	90 93 8a 00 	sts	0x008A, r25
    14d6:	80 93 89 00 	sts	0x0089, r24
    14da:	80 91 89 00 	lds	r24, 0x0089
    14de:	90 91 8a 00 	lds	r25, 0x008A
    14e2:	2d ef       	ldi	r18, 0xFD	; 253
    14e4:	88 3e       	cpi	r24, 0xE8	; 232
    14e6:	92 07       	cpc	r25, r18
    14e8:	78 f3       	brcs	.-34     	; 0x14c8 <DLS_changeOldPassword+0x2e6>
    		APPROX_1SEC_DELAY;APPROX_1SEC_DELAY;APPROX_1SEC_DELAY;APPROX_1SEC_DELAY;
    14ea:	10 92 8a 00 	sts	0x008A, r1
    14ee:	10 92 89 00 	sts	0x0089, r1
    14f2:	09 c0       	rjmp	.+18     	; 0x1506 <DLS_changeOldPassword+0x324>
    14f4:	80 91 89 00 	lds	r24, 0x0089
    14f8:	90 91 8a 00 	lds	r25, 0x008A
    14fc:	01 96       	adiw	r24, 0x01	; 1
    14fe:	90 93 8a 00 	sts	0x008A, r25
    1502:	80 93 89 00 	sts	0x0089, r24
    1506:	80 91 89 00 	lds	r24, 0x0089
    150a:	90 91 8a 00 	lds	r25, 0x008A
    150e:	2d ef       	ldi	r18, 0xFD	; 253
    1510:	88 3e       	cpi	r24, 0xE8	; 232
    1512:	92 07       	cpc	r25, r18
    1514:	78 f3       	brcs	.-34     	; 0x14f4 <DLS_changeOldPassword+0x312>
    1516:	10 92 8a 00 	sts	0x008A, r1
    151a:	10 92 89 00 	sts	0x0089, r1
    151e:	09 c0       	rjmp	.+18     	; 0x1532 <DLS_changeOldPassword+0x350>
    1520:	80 91 89 00 	lds	r24, 0x0089
    1524:	90 91 8a 00 	lds	r25, 0x008A
    1528:	01 96       	adiw	r24, 0x01	; 1
    152a:	90 93 8a 00 	sts	0x008A, r25
    152e:	80 93 89 00 	sts	0x0089, r24
    1532:	80 91 89 00 	lds	r24, 0x0089
    1536:	90 91 8a 00 	lds	r25, 0x008A
    153a:	2d ef       	ldi	r18, 0xFD	; 253
    153c:	88 3e       	cpi	r24, 0xE8	; 232
    153e:	92 07       	cpc	r25, r18
    1540:	78 f3       	brcs	.-34     	; 0x1520 <DLS_changeOldPassword+0x33e>
    1542:	10 92 8a 00 	sts	0x008A, r1
    1546:	10 92 89 00 	sts	0x0089, r1
    154a:	09 c0       	rjmp	.+18     	; 0x155e <DLS_changeOldPassword+0x37c>
    154c:	80 91 89 00 	lds	r24, 0x0089
    1550:	90 91 8a 00 	lds	r25, 0x008A
    1554:	01 96       	adiw	r24, 0x01	; 1
    1556:	90 93 8a 00 	sts	0x008A, r25
    155a:	80 93 89 00 	sts	0x0089, r24
    155e:	80 91 89 00 	lds	r24, 0x0089
    1562:	90 91 8a 00 	lds	r25, 0x008A
    1566:	2d ef       	ldi	r18, 0xFD	; 253
    1568:	88 3e       	cpi	r24, 0xE8	; 232
    156a:	92 07       	cpc	r25, r18
    156c:	78 f3       	brcs	.-34     	; 0x154c <DLS_changeOldPassword+0x36a>
    156e:	10 92 8a 00 	sts	0x008A, r1
    1572:	10 92 89 00 	sts	0x0089, r1
    1576:	09 c0       	rjmp	.+18     	; 0x158a <DLS_changeOldPassword+0x3a8>
    1578:	80 91 89 00 	lds	r24, 0x0089
    157c:	90 91 8a 00 	lds	r25, 0x008A
    1580:	01 96       	adiw	r24, 0x01	; 1
    1582:	90 93 8a 00 	sts	0x008A, r25
    1586:	80 93 89 00 	sts	0x0089, r24
    158a:	80 91 89 00 	lds	r24, 0x0089
    158e:	90 91 8a 00 	lds	r25, 0x008A
    1592:	2d ef       	ldi	r18, 0xFD	; 253
    1594:	88 3e       	cpi	r24, 0xE8	; 232
    1596:	92 07       	cpc	r25, r18
    1598:	78 f3       	brcs	.-34     	; 0x1578 <DLS_changeOldPassword+0x396>
    		/*TESTING*/__DIO_writeOutputPinValue(PORT_D, FAILED_LED, LOW);/*TESTING*/
    159a:	83 e0       	ldi	r24, 0x03	; 3
    159c:	63 e0       	ldi	r22, 0x03	; 3
    159e:	40 e0       	ldi	r20, 0x00	; 0
    15a0:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <__DIO_writeOutputPinValue>

    		return PASSWORD_NOT_MATCHED;
    15a4:	81 e2       	ldi	r24, 0x21	; 33
    15a6:	8f 83       	std	Y+7, r24	; 0x07
    15a8:	f2 c0       	rjmp	.+484    	; 0x178e <DLS_changeOldPassword+0x5ac>
    	}
    }


    /* Check new passwords are identical */
    for( i=0 ; i<=3 ; i++ )
    15aa:	89 81       	ldd	r24, Y+1	; 0x01
    15ac:	8f 5f       	subi	r24, 0xFF	; 255
    15ae:	89 83       	std	Y+1, r24	; 0x01
    15b0:	89 81       	ldd	r24, Y+1	; 0x01
    15b2:	84 30       	cpi	r24, 0x04	; 4
    15b4:	08 f4       	brcc	.+2      	; 0x15b8 <DLS_changeOldPassword+0x3d6>
    15b6:	29 cf       	rjmp	.-430    	; 0x140a <DLS_changeOldPassword+0x228>

    		return PASSWORD_NOT_MATCHED;
    	}
    }

    /*TESTING*/__DIO_writeOutputPinValue(PORT_D, SUCCESS_LED, HIGH);/*TESTING*/
    15b8:	83 e0       	ldi	r24, 0x03	; 3
    15ba:	62 e0       	ldi	r22, 0x02	; 2
    15bc:	41 e0       	ldi	r20, 0x01	; 1
    15be:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <__DIO_writeOutputPinValue>
    APPROX_1SEC_DELAY;APPROX_1SEC_DELAY;APPROX_1SEC_DELAY;APPROX_1SEC_DELAY;
    15c2:	10 92 8a 00 	sts	0x008A, r1
    15c6:	10 92 89 00 	sts	0x0089, r1
    15ca:	09 c0       	rjmp	.+18     	; 0x15de <DLS_changeOldPassword+0x3fc>
    15cc:	80 91 89 00 	lds	r24, 0x0089
    15d0:	90 91 8a 00 	lds	r25, 0x008A
    15d4:	01 96       	adiw	r24, 0x01	; 1
    15d6:	90 93 8a 00 	sts	0x008A, r25
    15da:	80 93 89 00 	sts	0x0089, r24
    15de:	80 91 89 00 	lds	r24, 0x0089
    15e2:	90 91 8a 00 	lds	r25, 0x008A
    15e6:	2d ef       	ldi	r18, 0xFD	; 253
    15e8:	88 3e       	cpi	r24, 0xE8	; 232
    15ea:	92 07       	cpc	r25, r18
    15ec:	78 f3       	brcs	.-34     	; 0x15cc <DLS_changeOldPassword+0x3ea>
    15ee:	10 92 8a 00 	sts	0x008A, r1
    15f2:	10 92 89 00 	sts	0x0089, r1
    15f6:	09 c0       	rjmp	.+18     	; 0x160a <DLS_changeOldPassword+0x428>
    15f8:	80 91 89 00 	lds	r24, 0x0089
    15fc:	90 91 8a 00 	lds	r25, 0x008A
    1600:	01 96       	adiw	r24, 0x01	; 1
    1602:	90 93 8a 00 	sts	0x008A, r25
    1606:	80 93 89 00 	sts	0x0089, r24
    160a:	80 91 89 00 	lds	r24, 0x0089
    160e:	90 91 8a 00 	lds	r25, 0x008A
    1612:	2d ef       	ldi	r18, 0xFD	; 253
    1614:	88 3e       	cpi	r24, 0xE8	; 232
    1616:	92 07       	cpc	r25, r18
    1618:	78 f3       	brcs	.-34     	; 0x15f8 <DLS_changeOldPassword+0x416>
    161a:	10 92 8a 00 	sts	0x008A, r1
    161e:	10 92 89 00 	sts	0x0089, r1
    1622:	09 c0       	rjmp	.+18     	; 0x1636 <DLS_changeOldPassword+0x454>
    1624:	80 91 89 00 	lds	r24, 0x0089
    1628:	90 91 8a 00 	lds	r25, 0x008A
    162c:	01 96       	adiw	r24, 0x01	; 1
    162e:	90 93 8a 00 	sts	0x008A, r25
    1632:	80 93 89 00 	sts	0x0089, r24
    1636:	80 91 89 00 	lds	r24, 0x0089
    163a:	90 91 8a 00 	lds	r25, 0x008A
    163e:	2d ef       	ldi	r18, 0xFD	; 253
    1640:	88 3e       	cpi	r24, 0xE8	; 232
    1642:	92 07       	cpc	r25, r18
    1644:	78 f3       	brcs	.-34     	; 0x1624 <DLS_changeOldPassword+0x442>
    1646:	10 92 8a 00 	sts	0x008A, r1
    164a:	10 92 89 00 	sts	0x0089, r1
    164e:	09 c0       	rjmp	.+18     	; 0x1662 <DLS_changeOldPassword+0x480>
    1650:	80 91 89 00 	lds	r24, 0x0089
    1654:	90 91 8a 00 	lds	r25, 0x008A
    1658:	01 96       	adiw	r24, 0x01	; 1
    165a:	90 93 8a 00 	sts	0x008A, r25
    165e:	80 93 89 00 	sts	0x0089, r24
    1662:	80 91 89 00 	lds	r24, 0x0089
    1666:	90 91 8a 00 	lds	r25, 0x008A
    166a:	2d ef       	ldi	r18, 0xFD	; 253
    166c:	88 3e       	cpi	r24, 0xE8	; 232
    166e:	92 07       	cpc	r25, r18
    1670:	78 f3       	brcs	.-34     	; 0x1650 <DLS_changeOldPassword+0x46e>
    APPROX_1SEC_DELAY;APPROX_1SEC_DELAY;APPROX_1SEC_DELAY;APPROX_1SEC_DELAY;
    1672:	10 92 8a 00 	sts	0x008A, r1
    1676:	10 92 89 00 	sts	0x0089, r1
    167a:	09 c0       	rjmp	.+18     	; 0x168e <DLS_changeOldPassword+0x4ac>
    167c:	80 91 89 00 	lds	r24, 0x0089
    1680:	90 91 8a 00 	lds	r25, 0x008A
    1684:	01 96       	adiw	r24, 0x01	; 1
    1686:	90 93 8a 00 	sts	0x008A, r25
    168a:	80 93 89 00 	sts	0x0089, r24
    168e:	80 91 89 00 	lds	r24, 0x0089
    1692:	90 91 8a 00 	lds	r25, 0x008A
    1696:	2d ef       	ldi	r18, 0xFD	; 253
    1698:	88 3e       	cpi	r24, 0xE8	; 232
    169a:	92 07       	cpc	r25, r18
    169c:	78 f3       	brcs	.-34     	; 0x167c <DLS_changeOldPassword+0x49a>
    169e:	10 92 8a 00 	sts	0x008A, r1
    16a2:	10 92 89 00 	sts	0x0089, r1
    16a6:	09 c0       	rjmp	.+18     	; 0x16ba <DLS_changeOldPassword+0x4d8>
    16a8:	80 91 89 00 	lds	r24, 0x0089
    16ac:	90 91 8a 00 	lds	r25, 0x008A
    16b0:	01 96       	adiw	r24, 0x01	; 1
    16b2:	90 93 8a 00 	sts	0x008A, r25
    16b6:	80 93 89 00 	sts	0x0089, r24
    16ba:	80 91 89 00 	lds	r24, 0x0089
    16be:	90 91 8a 00 	lds	r25, 0x008A
    16c2:	2d ef       	ldi	r18, 0xFD	; 253
    16c4:	88 3e       	cpi	r24, 0xE8	; 232
    16c6:	92 07       	cpc	r25, r18
    16c8:	78 f3       	brcs	.-34     	; 0x16a8 <DLS_changeOldPassword+0x4c6>
    16ca:	10 92 8a 00 	sts	0x008A, r1
    16ce:	10 92 89 00 	sts	0x0089, r1
    16d2:	09 c0       	rjmp	.+18     	; 0x16e6 <DLS_changeOldPassword+0x504>
    16d4:	80 91 89 00 	lds	r24, 0x0089
    16d8:	90 91 8a 00 	lds	r25, 0x008A
    16dc:	01 96       	adiw	r24, 0x01	; 1
    16de:	90 93 8a 00 	sts	0x008A, r25
    16e2:	80 93 89 00 	sts	0x0089, r24
    16e6:	80 91 89 00 	lds	r24, 0x0089
    16ea:	90 91 8a 00 	lds	r25, 0x008A
    16ee:	2d ef       	ldi	r18, 0xFD	; 253
    16f0:	88 3e       	cpi	r24, 0xE8	; 232
    16f2:	92 07       	cpc	r25, r18
    16f4:	78 f3       	brcs	.-34     	; 0x16d4 <DLS_changeOldPassword+0x4f2>
    16f6:	10 92 8a 00 	sts	0x008A, r1
    16fa:	10 92 89 00 	sts	0x0089, r1
    16fe:	09 c0       	rjmp	.+18     	; 0x1712 <DLS_changeOldPassword+0x530>
    1700:	80 91 89 00 	lds	r24, 0x0089
    1704:	90 91 8a 00 	lds	r25, 0x008A
    1708:	01 96       	adiw	r24, 0x01	; 1
    170a:	90 93 8a 00 	sts	0x008A, r25
    170e:	80 93 89 00 	sts	0x0089, r24
    1712:	80 91 89 00 	lds	r24, 0x0089
    1716:	90 91 8a 00 	lds	r25, 0x008A
    171a:	2d ef       	ldi	r18, 0xFD	; 253
    171c:	88 3e       	cpi	r24, 0xE8	; 232
    171e:	92 07       	cpc	r25, r18
    1720:	78 f3       	brcs	.-34     	; 0x1700 <DLS_changeOldPassword+0x51e>
    /*TESTING*/__DIO_writeOutputPinValue(PORT_D, SUCCESS_LED, LOW);/*TESTING*/
    1722:	83 e0       	ldi	r24, 0x03	; 3
    1724:	62 e0       	ldi	r22, 0x02	; 2
    1726:	40 e0       	ldi	r20, 0x00	; 0
    1728:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <__DIO_writeOutputPinValue>

    /* Save the password in EEPROM */
    for( i=0 ; i<=3 ; i++ )
    172c:	19 82       	std	Y+1, r1	; 0x01
    172e:	2a c0       	rjmp	.+84     	; 0x1784 <DLS_changeOldPassword+0x5a2>
    {
        _EXT_EEPROM_writeByte( USR_PASSWD_EEPROM_MEM_LOC+i , rx_password[4+i] );
    1730:	89 81       	ldd	r24, Y+1	; 0x01
    1732:	88 2f       	mov	r24, r24
    1734:	90 e0       	ldi	r25, 0x00	; 0
    1736:	0f 96       	adiw	r24, 0x0f	; 15
    1738:	ac 01       	movw	r20, r24
    173a:	89 81       	ldd	r24, Y+1	; 0x01
    173c:	88 2f       	mov	r24, r24
    173e:	90 e0       	ldi	r25, 0x00	; 0
    1740:	04 96       	adiw	r24, 0x04	; 4
    1742:	fc 01       	movw	r30, r24
    1744:	e4 57       	subi	r30, 0x74	; 116
    1746:	ff 4f       	sbci	r31, 0xFF	; 255
    1748:	20 81       	ld	r18, Z
    174a:	ca 01       	movw	r24, r20
    174c:	62 2f       	mov	r22, r18
    174e:	0e 94 7d 0c 	call	0x18fa	; 0x18fa <_EXT_EEPROM_writeByte>
        APPROX_HALF_SEC_DELAY;
    1752:	10 92 8a 00 	sts	0x008A, r1
    1756:	10 92 89 00 	sts	0x0089, r1
    175a:	09 c0       	rjmp	.+18     	; 0x176e <DLS_changeOldPassword+0x58c>
    175c:	80 91 89 00 	lds	r24, 0x0089
    1760:	90 91 8a 00 	lds	r25, 0x008A
    1764:	01 96       	adiw	r24, 0x01	; 1
    1766:	90 93 8a 00 	sts	0x008A, r25
    176a:	80 93 89 00 	sts	0x0089, r24
    176e:	80 91 89 00 	lds	r24, 0x0089
    1772:	90 91 8a 00 	lds	r25, 0x008A
    1776:	28 e8       	ldi	r18, 0x88	; 136
    1778:	88 3b       	cpi	r24, 0xB8	; 184
    177a:	92 07       	cpc	r25, r18
    177c:	78 f3       	brcs	.-34     	; 0x175c <DLS_changeOldPassword+0x57a>
    APPROX_1SEC_DELAY;APPROX_1SEC_DELAY;APPROX_1SEC_DELAY;APPROX_1SEC_DELAY;
    APPROX_1SEC_DELAY;APPROX_1SEC_DELAY;APPROX_1SEC_DELAY;APPROX_1SEC_DELAY;
    /*TESTING*/__DIO_writeOutputPinValue(PORT_D, SUCCESS_LED, LOW);/*TESTING*/

    /* Save the password in EEPROM */
    for( i=0 ; i<=3 ; i++ )
    177e:	89 81       	ldd	r24, Y+1	; 0x01
    1780:	8f 5f       	subi	r24, 0xFF	; 255
    1782:	89 83       	std	Y+1, r24	; 0x01
    1784:	89 81       	ldd	r24, Y+1	; 0x01
    1786:	84 30       	cpi	r24, 0x04	; 4
    1788:	98 f2       	brcs	.-90     	; 0x1730 <DLS_changeOldPassword+0x54e>
    {
        _EXT_EEPROM_writeByte( USR_PASSWD_EEPROM_MEM_LOC+i , rx_password[4+i] );
        APPROX_HALF_SEC_DELAY;
    }

    return PASSWORD_SAVED;
    178a:	81 e1       	ldi	r24, 0x11	; 17
    178c:	8f 83       	std	Y+7, r24	; 0x07
    178e:	8f 81       	ldd	r24, Y+7	; 0x07

}
    1790:	27 96       	adiw	r28, 0x07	; 7
    1792:	0f b6       	in	r0, 0x3f	; 63
    1794:	f8 94       	cli
    1796:	de bf       	out	0x3e, r29	; 62
    1798:	0f be       	out	0x3f, r0	; 63
    179a:	cd bf       	out	0x3d, r28	; 61
    179c:	cf 91       	pop	r28
    179e:	df 91       	pop	r29
    17a0:	08 95       	ret

000017a2 <DLS_TIMER1_ISR_callBackFunction>:
/**************************************************************************************************/

/* APPL Software: DLS_TIMER1_ISR_callBackFunction FUNCTION ****************************************/
void DLS_TIMER1_ISR_callBackFunction(void)
{
    17a2:	df 93       	push	r29
    17a4:	cf 93       	push	r28
    17a6:	cd b7       	in	r28, 0x3d	; 61
    17a8:	de b7       	in	r29, 0x3e	; 62
    static uint8 alarm_counter = 0;
    
    if( executeISR == MOTOR_ISR_CODE )
    17aa:	80 91 8b 00 	lds	r24, 0x008B
    17ae:	81 30       	cpi	r24, 0x01	; 1
    17b0:	39 f4       	brne	.+14     	; 0x17c0 <DLS_TIMER1_ISR_callBackFunction+0x1e>
    {
        __TIMER_CTC_stopTimer(TIMER1);
    17b2:	81 e0       	ldi	r24, 0x01	; 1
    17b4:	0e 94 86 0e 	call	0x1d0c	; 0x1d0c <__TIMER_CTC_stopTimer>
        _MOTORDC_rotate(OFF);
    17b8:	80 e0       	ldi	r24, 0x00	; 0
    17ba:	0e 94 22 0c 	call	0x1844	; 0x1844 <_MOTORDC_rotate>
    17be:	24 c0       	rjmp	.+72     	; 0x1808 <DLS_TIMER1_ISR_callBackFunction+0x66>
    }
    else if( executeISR == ALARM_ISR_CODE )
    17c0:	80 91 8b 00 	lds	r24, 0x008B
    17c4:	82 30       	cpi	r24, 0x02	; 2
    17c6:	01 f5       	brne	.+64     	; 0x1808 <DLS_TIMER1_ISR_callBackFunction+0x66>
    {

        if( alarm_counter == 12)
    17c8:	80 91 84 00 	lds	r24, 0x0084
    17cc:	8c 30       	cpi	r24, 0x0C	; 12
    17ce:	41 f4       	brne	.+16     	; 0x17e0 <DLS_TIMER1_ISR_callBackFunction+0x3e>
        {
            __TIMER_CTC_stopTimer(TIMER1);  //stop the Alarm Timer
    17d0:	81 e0       	ldi	r24, 0x01	; 1
    17d2:	0e 94 86 0e 	call	0x1d0c	; 0x1d0c <__TIMER_CTC_stopTimer>
            code_blocking_flag = FALSE;     //to Break the Code Blocking while loop
    17d6:	10 92 83 00 	sts	0x0083, r1
            alarm_counter = 0;
    17da:	10 92 84 00 	sts	0x0084, r1
    17de:	14 c0       	rjmp	.+40     	; 0x1808 <DLS_TIMER1_ISR_callBackFunction+0x66>
            return;
        }

        if( alarm_counter%2 == 0)
    17e0:	80 91 84 00 	lds	r24, 0x0084
    17e4:	88 2f       	mov	r24, r24
    17e6:	90 e0       	ldi	r25, 0x00	; 0
    17e8:	81 70       	andi	r24, 0x01	; 1
    17ea:	90 70       	andi	r25, 0x00	; 0
    17ec:	00 97       	sbiw	r24, 0x00	; 0
    17ee:	21 f4       	brne	.+8      	; 0x17f8 <DLS_TIMER1_ISR_callBackFunction+0x56>
        {
            _ALARM_state(ON);
    17f0:	81 e0       	ldi	r24, 0x01	; 1
    17f2:	0e 94 16 04 	call	0x82c	; 0x82c <_ALARM_state>
    17f6:	03 c0       	rjmp	.+6      	; 0x17fe <DLS_TIMER1_ISR_callBackFunction+0x5c>
        }
        else
        {
            _ALARM_state(OFF);
    17f8:	80 e0       	ldi	r24, 0x00	; 0
    17fa:	0e 94 16 04 	call	0x82c	; 0x82c <_ALARM_state>
        }

        alarm_counter++;
    17fe:	80 91 84 00 	lds	r24, 0x0084
    1802:	8f 5f       	subi	r24, 0xFF	; 255
    1804:	80 93 84 00 	sts	0x0084, r24

    }
    
}
    1808:	cf 91       	pop	r28
    180a:	df 91       	pop	r29
    180c:	08 95       	ret

0000180e <_MOTORDC_init>:
#define DC_MOTOR_C_

#include "dc_motor.h"

void _MOTORDC_init(void)
{
    180e:	df 93       	push	r29
    1810:	cf 93       	push	r28
    1812:	cd b7       	in	r28, 0x3d	; 61
    1814:	de b7       	in	r29, 0x3e	; 62
	__DIO_setPinDirection(MOTOR_DDR, MOTOR_PIN1, OUTPUT_PIN);
    1816:	81 e0       	ldi	r24, 0x01	; 1
    1818:	66 e0       	ldi	r22, 0x06	; 6
    181a:	41 e0       	ldi	r20, 0x01	; 1
    181c:	0e 94 49 00 	call	0x92	; 0x92 <__DIO_setPinDirection>
	__DIO_setPinDirection(MOTOR_DDR, MOTOR_PIN2, OUTPUT_PIN);
    1820:	81 e0       	ldi	r24, 0x01	; 1
    1822:	67 e0       	ldi	r22, 0x07	; 7
    1824:	41 e0       	ldi	r20, 0x01	; 1
    1826:	0e 94 49 00 	call	0x92	; 0x92 <__DIO_setPinDirection>

	__DIO_writeOutputPinValue(MOTOR_PORT, MOTOR_PIN1, LOW);
    182a:	81 e0       	ldi	r24, 0x01	; 1
    182c:	66 e0       	ldi	r22, 0x06	; 6
    182e:	40 e0       	ldi	r20, 0x00	; 0
    1830:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <__DIO_writeOutputPinValue>
	__DIO_writeOutputPinValue(MOTOR_PORT, MOTOR_PIN2, LOW);
    1834:	81 e0       	ldi	r24, 0x01	; 1
    1836:	67 e0       	ldi	r22, 0x07	; 7
    1838:	40 e0       	ldi	r20, 0x00	; 0
    183a:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <__DIO_writeOutputPinValue>
}
    183e:	cf 91       	pop	r28
    1840:	df 91       	pop	r29
    1842:	08 95       	ret

00001844 <_MOTORDC_rotate>:

void _MOTORDC_rotate(uint8 motor_state)
{
    1844:	df 93       	push	r29
    1846:	cf 93       	push	r28
    1848:	00 d0       	rcall	.+0      	; 0x184a <_MOTORDC_rotate+0x6>
    184a:	0f 92       	push	r0
    184c:	cd b7       	in	r28, 0x3d	; 61
    184e:	de b7       	in	r29, 0x3e	; 62
    1850:	89 83       	std	Y+1, r24	; 0x01
	switch(motor_state)
    1852:	89 81       	ldd	r24, Y+1	; 0x01
    1854:	28 2f       	mov	r18, r24
    1856:	30 e0       	ldi	r19, 0x00	; 0
    1858:	3b 83       	std	Y+3, r19	; 0x03
    185a:	2a 83       	std	Y+2, r18	; 0x02
    185c:	8a 81       	ldd	r24, Y+2	; 0x02
    185e:	9b 81       	ldd	r25, Y+3	; 0x03
    1860:	81 30       	cpi	r24, 0x01	; 1
    1862:	91 05       	cpc	r25, r1
    1864:	a1 f0       	breq	.+40     	; 0x188e <_MOTORDC_rotate+0x4a>
    1866:	2a 81       	ldd	r18, Y+2	; 0x02
    1868:	3b 81       	ldd	r19, Y+3	; 0x03
    186a:	22 30       	cpi	r18, 0x02	; 2
    186c:	31 05       	cpc	r19, r1
    186e:	d1 f0       	breq	.+52     	; 0x18a4 <_MOTORDC_rotate+0x60>
    1870:	8a 81       	ldd	r24, Y+2	; 0x02
    1872:	9b 81       	ldd	r25, Y+3	; 0x03
    1874:	00 97       	sbiw	r24, 0x00	; 0
    1876:	01 f5       	brne	.+64     	; 0x18b8 <_MOTORDC_rotate+0x74>
	{
	case OFF:
		__DIO_writeOutputPinValue(MOTOR_PORT, MOTOR_PIN1, LOW);
    1878:	81 e0       	ldi	r24, 0x01	; 1
    187a:	66 e0       	ldi	r22, 0x06	; 6
    187c:	40 e0       	ldi	r20, 0x00	; 0
    187e:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <__DIO_writeOutputPinValue>
		__DIO_writeOutputPinValue(MOTOR_PORT, MOTOR_PIN2, LOW);
    1882:	81 e0       	ldi	r24, 0x01	; 1
    1884:	67 e0       	ldi	r22, 0x07	; 7
    1886:	40 e0       	ldi	r20, 0x00	; 0
    1888:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <__DIO_writeOutputPinValue>
    188c:	15 c0       	rjmp	.+42     	; 0x18b8 <_MOTORDC_rotate+0x74>
		break;
	case CW:
		__DIO_writeOutputPinValue(MOTOR_PORT, MOTOR_PIN1, HIGH);
    188e:	81 e0       	ldi	r24, 0x01	; 1
    1890:	66 e0       	ldi	r22, 0x06	; 6
    1892:	41 e0       	ldi	r20, 0x01	; 1
    1894:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <__DIO_writeOutputPinValue>
		__DIO_writeOutputPinValue(MOTOR_PORT, MOTOR_PIN2, LOW);
    1898:	81 e0       	ldi	r24, 0x01	; 1
    189a:	67 e0       	ldi	r22, 0x07	; 7
    189c:	40 e0       	ldi	r20, 0x00	; 0
    189e:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <__DIO_writeOutputPinValue>
    18a2:	0a c0       	rjmp	.+20     	; 0x18b8 <_MOTORDC_rotate+0x74>
		break;
	case CCW:
		__DIO_writeOutputPinValue(MOTOR_PORT, MOTOR_PIN1, LOW);
    18a4:	81 e0       	ldi	r24, 0x01	; 1
    18a6:	66 e0       	ldi	r22, 0x06	; 6
    18a8:	40 e0       	ldi	r20, 0x00	; 0
    18aa:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <__DIO_writeOutputPinValue>
		__DIO_writeOutputPinValue(MOTOR_PORT, MOTOR_PIN2, HIGH);
    18ae:	81 e0       	ldi	r24, 0x01	; 1
    18b0:	67 e0       	ldi	r22, 0x07	; 7
    18b2:	41 e0       	ldi	r20, 0x01	; 1
    18b4:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <__DIO_writeOutputPinValue>
		break;
	}
}
    18b8:	0f 90       	pop	r0
    18ba:	0f 90       	pop	r0
    18bc:	0f 90       	pop	r0
    18be:	cf 91       	pop	r28
    18c0:	df 91       	pop	r29
    18c2:	08 95       	ret

000018c4 <_EXT_EEPROM_init>:

/*** Description:-
 * Function Used to send start bit for a Frame
 */
void  _EXT_EEPROM_init(uint8 master_addr)
{
    18c4:	df 93       	push	r29
    18c6:	cf 93       	push	r28
    18c8:	00 d0       	rcall	.+0      	; 0x18ca <_EXT_EEPROM_init+0x6>
    18ca:	00 d0       	rcall	.+0      	; 0x18cc <_EXT_EEPROM_init+0x8>
    18cc:	0f 92       	push	r0
    18ce:	cd b7       	in	r28, 0x3d	; 61
    18d0:	de b7       	in	r29, 0x3e	; 62
    18d2:	8d 83       	std	Y+5, r24	; 0x05
    /*Define the TWI Configuration Parameters*/
    TWI_config eeprom_twi_config = {EEPROM_TWPS_VALUE, EEPROM_TWBR_VALUE, 0x00};
    18d4:	1a 82       	std	Y+2, r1	; 0x02
    18d6:	19 82       	std	Y+1, r1	; 0x01
    18d8:	82 e0       	ldi	r24, 0x02	; 2
    18da:	8b 83       	std	Y+3, r24	; 0x03
    18dc:	1c 82       	std	Y+4, r1	; 0x04
    eeprom_twi_config.TWI_myAddress = master_addr;
    18de:	8d 81       	ldd	r24, Y+5	; 0x05
    18e0:	8c 83       	std	Y+4, r24	; 0x04

    /*Init the TWI Module*/
    __TWI_init(&eeprom_twi_config);
    18e2:	ce 01       	movw	r24, r28
    18e4:	01 96       	adiw	r24, 0x01	; 1
    18e6:	0e 94 0a 02 	call	0x414	; 0x414 <__TWI_init>
}
    18ea:	0f 90       	pop	r0
    18ec:	0f 90       	pop	r0
    18ee:	0f 90       	pop	r0
    18f0:	0f 90       	pop	r0
    18f2:	0f 90       	pop	r0
    18f4:	cf 91       	pop	r28
    18f6:	df 91       	pop	r29
    18f8:	08 95       	ret

000018fa <_EXT_EEPROM_writeByte>:
 *  +-------+-------------------------------------+-----+---------------+-----+--------+-----+------+
 *  | Start | MEM_ID + addr10 + addr9 + addr8 + W | ACK | addr7...addr0 | ACK | u8Data | ACK | STOP |
 *  +-------+-------------------------------------+-----+---------------+-----+--------+-----+------+
 */
uint8  _EXT_EEPROM_writeByte(uint16 mem_u16addr, uint8 u8Data)
{
    18fa:	df 93       	push	r29
    18fc:	cf 93       	push	r28
    18fe:	00 d0       	rcall	.+0      	; 0x1900 <_EXT_EEPROM_writeByte+0x6>
    1900:	00 d0       	rcall	.+0      	; 0x1902 <_EXT_EEPROM_writeByte+0x8>
    1902:	cd b7       	in	r28, 0x3d	; 61
    1904:	de b7       	in	r29, 0x3e	; 62
    1906:	9a 83       	std	Y+2, r25	; 0x02
    1908:	89 83       	std	Y+1, r24	; 0x01
    190a:	6b 83       	std	Y+3, r22	; 0x03
    __TWI_startFrame();
    190c:	0e 94 36 02 	call	0x46c	; 0x46c <__TWI_startFrame>
    if( __TWI_getStatus() != TWI_START_SENT )
    1910:	0e 94 a6 02 	call	0x54c	; 0x54c <__TWI_getStatus>
    1914:	88 30       	cpi	r24, 0x08	; 8
    1916:	11 f0       	breq	.+4      	; 0x191c <_EXT_EEPROM_writeByte+0x22>
    {
        return TWI_ERROR;
    1918:	1c 82       	std	Y+4, r1	; 0x04
    191a:	28 c0       	rjmp	.+80     	; 0x196c <_EXT_EEPROM_writeByte+0x72>
    }

    __TWI_transmitByte( (uint8)((0xA0) | ((mem_u16addr & 0x0700)>>7)) );
    191c:	89 81       	ldd	r24, Y+1	; 0x01
    191e:	9a 81       	ldd	r25, Y+2	; 0x02
    1920:	80 70       	andi	r24, 0x00	; 0
    1922:	97 70       	andi	r25, 0x07	; 7
    1924:	88 0f       	add	r24, r24
    1926:	89 2f       	mov	r24, r25
    1928:	88 1f       	adc	r24, r24
    192a:	99 0b       	sbc	r25, r25
    192c:	91 95       	neg	r25
    192e:	80 6a       	ori	r24, 0xA0	; 160
    1930:	0e 94 57 02 	call	0x4ae	; 0x4ae <__TWI_transmitByte>
    if( __TWI_getStatus() != TWI_MAS_TRAN_SLA_ADR_WRTIE_ACK )
    1934:	0e 94 a6 02 	call	0x54c	; 0x54c <__TWI_getStatus>
    1938:	88 31       	cpi	r24, 0x18	; 24
    193a:	11 f0       	breq	.+4      	; 0x1940 <_EXT_EEPROM_writeByte+0x46>
    {
        return TWI_ERROR;
    193c:	1c 82       	std	Y+4, r1	; 0x04
    193e:	16 c0       	rjmp	.+44     	; 0x196c <_EXT_EEPROM_writeByte+0x72>
    }

    __TWI_transmitByte( (uint8)(mem_u16addr) );
    1940:	89 81       	ldd	r24, Y+1	; 0x01
    1942:	0e 94 57 02 	call	0x4ae	; 0x4ae <__TWI_transmitByte>
    if( __TWI_getStatus() != TWI_MAS_TRAN_DATA_ACK )
    1946:	0e 94 a6 02 	call	0x54c	; 0x54c <__TWI_getStatus>
    194a:	88 32       	cpi	r24, 0x28	; 40
    194c:	11 f0       	breq	.+4      	; 0x1952 <_EXT_EEPROM_writeByte+0x58>
    {
        return TWI_ERROR;
    194e:	1c 82       	std	Y+4, r1	; 0x04
    1950:	0d c0       	rjmp	.+26     	; 0x196c <_EXT_EEPROM_writeByte+0x72>
    }

    __TWI_transmitByte(u8Data);
    1952:	8b 81       	ldd	r24, Y+3	; 0x03
    1954:	0e 94 57 02 	call	0x4ae	; 0x4ae <__TWI_transmitByte>
    if( __TWI_getStatus() != TWI_MAS_TRAN_DATA_ACK )
    1958:	0e 94 a6 02 	call	0x54c	; 0x54c <__TWI_getStatus>
    195c:	88 32       	cpi	r24, 0x28	; 40
    195e:	11 f0       	breq	.+4      	; 0x1964 <_EXT_EEPROM_writeByte+0x6a>
    {
        return TWI_ERROR;
    1960:	1c 82       	std	Y+4, r1	; 0x04
    1962:	04 c0       	rjmp	.+8      	; 0x196c <_EXT_EEPROM_writeByte+0x72>
    }

    __TWI_stopFrame();
    1964:	0e 94 4c 02 	call	0x498	; 0x498 <__TWI_stopFrame>

    return TWI_SUCCESS;
    1968:	81 e0       	ldi	r24, 0x01	; 1
    196a:	8c 83       	std	Y+4, r24	; 0x04
    196c:	8c 81       	ldd	r24, Y+4	; 0x04
}
    196e:	0f 90       	pop	r0
    1970:	0f 90       	pop	r0
    1972:	0f 90       	pop	r0
    1974:	0f 90       	pop	r0
    1976:	cf 91       	pop	r28
    1978:	df 91       	pop	r29
    197a:	08 95       	ret

0000197c <_EXT_EEPROM_readByte>:
 *  +------------+-------------------------------------+-----+---------------+-----+------+
 *  | Rep. Start | MEM_ID + addr10 + addr9 + addr8 + R | ACK |     Data      | ACK | Stop |
 *  +------------+-------------------------------------+-----+---------------+-----+------+
 */
uint8  _EXT_EEPROM_readByte(uint16 mem_u16addr, uint8 *p_u8Data)
{
    197c:	df 93       	push	r29
    197e:	cf 93       	push	r28
    1980:	00 d0       	rcall	.+0      	; 0x1982 <_EXT_EEPROM_readByte+0x6>
    1982:	00 d0       	rcall	.+0      	; 0x1984 <_EXT_EEPROM_readByte+0x8>
    1984:	0f 92       	push	r0
    1986:	cd b7       	in	r28, 0x3d	; 61
    1988:	de b7       	in	r29, 0x3e	; 62
    198a:	9a 83       	std	Y+2, r25	; 0x02
    198c:	89 83       	std	Y+1, r24	; 0x01
    198e:	7c 83       	std	Y+4, r23	; 0x04
    1990:	6b 83       	std	Y+3, r22	; 0x03
    __TWI_startFrame();
    1992:	0e 94 36 02 	call	0x46c	; 0x46c <__TWI_startFrame>
    if( __TWI_getStatus() != TWI_START_SENT )
    1996:	0e 94 a6 02 	call	0x54c	; 0x54c <__TWI_getStatus>
    199a:	88 30       	cpi	r24, 0x08	; 8
    199c:	11 f0       	breq	.+4      	; 0x19a2 <_EXT_EEPROM_readByte+0x26>
    {
        return TWI_ERROR;
    199e:	1d 82       	std	Y+5, r1	; 0x05
    19a0:	44 c0       	rjmp	.+136    	; 0x1a2a <_EXT_EEPROM_readByte+0xae>
    }

    __TWI_transmitByte( (uint8)(((mem_u16addr & 0x0700)>>7)) | (0xA0));
    19a2:	89 81       	ldd	r24, Y+1	; 0x01
    19a4:	9a 81       	ldd	r25, Y+2	; 0x02
    19a6:	80 70       	andi	r24, 0x00	; 0
    19a8:	97 70       	andi	r25, 0x07	; 7
    19aa:	88 0f       	add	r24, r24
    19ac:	89 2f       	mov	r24, r25
    19ae:	88 1f       	adc	r24, r24
    19b0:	99 0b       	sbc	r25, r25
    19b2:	91 95       	neg	r25
    19b4:	80 6a       	ori	r24, 0xA0	; 160
    19b6:	0e 94 57 02 	call	0x4ae	; 0x4ae <__TWI_transmitByte>
    if( __TWI_getStatus() != TWI_MAS_TRAN_SLA_ADR_WRTIE_ACK )
    19ba:	0e 94 a6 02 	call	0x54c	; 0x54c <__TWI_getStatus>
    19be:	88 31       	cpi	r24, 0x18	; 24
    19c0:	11 f0       	breq	.+4      	; 0x19c6 <_EXT_EEPROM_readByte+0x4a>
    {
        return TWI_ERROR;
    19c2:	1d 82       	std	Y+5, r1	; 0x05
    19c4:	32 c0       	rjmp	.+100    	; 0x1a2a <_EXT_EEPROM_readByte+0xae>
    }

    __TWI_transmitByte( (uint8)(mem_u16addr) );
    19c6:	89 81       	ldd	r24, Y+1	; 0x01
    19c8:	0e 94 57 02 	call	0x4ae	; 0x4ae <__TWI_transmitByte>
    if( __TWI_getStatus() != TWI_MAS_TRAN_DATA_ACK )
    19cc:	0e 94 a6 02 	call	0x54c	; 0x54c <__TWI_getStatus>
    19d0:	88 32       	cpi	r24, 0x28	; 40
    19d2:	11 f0       	breq	.+4      	; 0x19d8 <_EXT_EEPROM_readByte+0x5c>
    {
        return TWI_ERROR;
    19d4:	1d 82       	std	Y+5, r1	; 0x05
    19d6:	29 c0       	rjmp	.+82     	; 0x1a2a <_EXT_EEPROM_readByte+0xae>
    }

    __TWI_startFrame();
    19d8:	0e 94 36 02 	call	0x46c	; 0x46c <__TWI_startFrame>
    if( __TWI_getStatus() != TWI_REP_START_SENT )
    19dc:	0e 94 a6 02 	call	0x54c	; 0x54c <__TWI_getStatus>
    19e0:	80 31       	cpi	r24, 0x10	; 16
    19e2:	11 f0       	breq	.+4      	; 0x19e8 <_EXT_EEPROM_readByte+0x6c>
    {
        return TWI_ERROR;
    19e4:	1d 82       	std	Y+5, r1	; 0x05
    19e6:	21 c0       	rjmp	.+66     	; 0x1a2a <_EXT_EEPROM_readByte+0xae>
    }

    __TWI_transmitByte( (uint8)(((mem_u16addr & 0x0700)>>7)) | (0xA0) | 1);
    19e8:	89 81       	ldd	r24, Y+1	; 0x01
    19ea:	9a 81       	ldd	r25, Y+2	; 0x02
    19ec:	80 70       	andi	r24, 0x00	; 0
    19ee:	97 70       	andi	r25, 0x07	; 7
    19f0:	88 0f       	add	r24, r24
    19f2:	89 2f       	mov	r24, r25
    19f4:	88 1f       	adc	r24, r24
    19f6:	99 0b       	sbc	r25, r25
    19f8:	91 95       	neg	r25
    19fa:	81 6a       	ori	r24, 0xA1	; 161
    19fc:	0e 94 57 02 	call	0x4ae	; 0x4ae <__TWI_transmitByte>
    if( __TWI_getStatus() != TWI_MAS_TRAN_SLA_ADR_READ_ACK )
    1a00:	0e 94 a6 02 	call	0x54c	; 0x54c <__TWI_getStatus>
    1a04:	80 34       	cpi	r24, 0x40	; 64
    1a06:	11 f0       	breq	.+4      	; 0x1a0c <_EXT_EEPROM_readByte+0x90>
    {
        return TWI_ERROR;
    1a08:	1d 82       	std	Y+5, r1	; 0x05
    1a0a:	0f c0       	rjmp	.+30     	; 0x1a2a <_EXT_EEPROM_readByte+0xae>
    }

    *p_u8Data = __TWI_receiveByte_NACK();
    1a0c:	0e 94 8d 02 	call	0x51a	; 0x51a <__TWI_receiveByte_NACK>
    1a10:	eb 81       	ldd	r30, Y+3	; 0x03
    1a12:	fc 81       	ldd	r31, Y+4	; 0x04
    1a14:	80 83       	st	Z, r24
    if( __TWI_getStatus() != TWI_MAS_RECE_DATA_NACK )
    1a16:	0e 94 a6 02 	call	0x54c	; 0x54c <__TWI_getStatus>
    1a1a:	88 35       	cpi	r24, 0x58	; 88
    1a1c:	11 f0       	breq	.+4      	; 0x1a22 <_EXT_EEPROM_readByte+0xa6>
    {
        return TWI_ERROR;
    1a1e:	1d 82       	std	Y+5, r1	; 0x05
    1a20:	04 c0       	rjmp	.+8      	; 0x1a2a <_EXT_EEPROM_readByte+0xae>
    }

    __TWI_stopFrame();
    1a22:	0e 94 4c 02 	call	0x498	; 0x498 <__TWI_stopFrame>

    return TWI_SUCCESS;    
    1a26:	81 e0       	ldi	r24, 0x01	; 1
    1a28:	8d 83       	std	Y+5, r24	; 0x05
    1a2a:	8d 81       	ldd	r24, Y+5	; 0x05
}
    1a2c:	0f 90       	pop	r0
    1a2e:	0f 90       	pop	r0
    1a30:	0f 90       	pop	r0
    1a32:	0f 90       	pop	r0
    1a34:	0f 90       	pop	r0
    1a36:	cf 91       	pop	r28
    1a38:	df 91       	pop	r29
    1a3a:	08 95       	ret

00001a3c <__vector_19>:
#if(TIMER_OCx_PIN == DISABLED)

    /*** ISR Description:-
     * When Interrupt occurs the Global pointer will call the user-defined function */
    ISR(TIMER0_COMP_vect)
    {
    1a3c:	1f 92       	push	r1
    1a3e:	0f 92       	push	r0
    1a40:	0f b6       	in	r0, 0x3f	; 63
    1a42:	0f 92       	push	r0
    1a44:	11 24       	eor	r1, r1
    1a46:	2f 93       	push	r18
    1a48:	3f 93       	push	r19
    1a4a:	4f 93       	push	r20
    1a4c:	5f 93       	push	r21
    1a4e:	6f 93       	push	r22
    1a50:	7f 93       	push	r23
    1a52:	8f 93       	push	r24
    1a54:	9f 93       	push	r25
    1a56:	af 93       	push	r26
    1a58:	bf 93       	push	r27
    1a5a:	ef 93       	push	r30
    1a5c:	ff 93       	push	r31
    1a5e:	df 93       	push	r29
    1a60:	cf 93       	push	r28
    1a62:	cd b7       	in	r28, 0x3d	; 61
    1a64:	de b7       	in	r29, 0x3e	; 62
        (*g_TIMER0_callBack_ptr)();
    1a66:	e0 91 85 00 	lds	r30, 0x0085
    1a6a:	f0 91 86 00 	lds	r31, 0x0086
    1a6e:	09 95       	icall
    }
    1a70:	cf 91       	pop	r28
    1a72:	df 91       	pop	r29
    1a74:	ff 91       	pop	r31
    1a76:	ef 91       	pop	r30
    1a78:	bf 91       	pop	r27
    1a7a:	af 91       	pop	r26
    1a7c:	9f 91       	pop	r25
    1a7e:	8f 91       	pop	r24
    1a80:	7f 91       	pop	r23
    1a82:	6f 91       	pop	r22
    1a84:	5f 91       	pop	r21
    1a86:	4f 91       	pop	r20
    1a88:	3f 91       	pop	r19
    1a8a:	2f 91       	pop	r18
    1a8c:	0f 90       	pop	r0
    1a8e:	0f be       	out	0x3f, r0	; 63
    1a90:	0f 90       	pop	r0
    1a92:	1f 90       	pop	r1
    1a94:	18 95       	reti

00001a96 <__vector_6>:

    /*** ISR Description:-
     * When Interrupt occurs the Global pointer will call the user-defined function */
    ISR(TIMER1_COMPA_vect)
    {
    1a96:	1f 92       	push	r1
    1a98:	0f 92       	push	r0
    1a9a:	0f b6       	in	r0, 0x3f	; 63
    1a9c:	0f 92       	push	r0
    1a9e:	11 24       	eor	r1, r1
    1aa0:	2f 93       	push	r18
    1aa2:	3f 93       	push	r19
    1aa4:	4f 93       	push	r20
    1aa6:	5f 93       	push	r21
    1aa8:	6f 93       	push	r22
    1aaa:	7f 93       	push	r23
    1aac:	8f 93       	push	r24
    1aae:	9f 93       	push	r25
    1ab0:	af 93       	push	r26
    1ab2:	bf 93       	push	r27
    1ab4:	ef 93       	push	r30
    1ab6:	ff 93       	push	r31
    1ab8:	df 93       	push	r29
    1aba:	cf 93       	push	r28
    1abc:	cd b7       	in	r28, 0x3d	; 61
    1abe:	de b7       	in	r29, 0x3e	; 62
        (*g_TIMER1_callBack_ptr)();
    1ac0:	e0 91 87 00 	lds	r30, 0x0087
    1ac4:	f0 91 88 00 	lds	r31, 0x0088
    1ac8:	09 95       	icall
    }
    1aca:	cf 91       	pop	r28
    1acc:	df 91       	pop	r29
    1ace:	ff 91       	pop	r31
    1ad0:	ef 91       	pop	r30
    1ad2:	bf 91       	pop	r27
    1ad4:	af 91       	pop	r26
    1ad6:	9f 91       	pop	r25
    1ad8:	8f 91       	pop	r24
    1ada:	7f 91       	pop	r23
    1adc:	6f 91       	pop	r22
    1ade:	5f 91       	pop	r21
    1ae0:	4f 91       	pop	r20
    1ae2:	3f 91       	pop	r19
    1ae4:	2f 91       	pop	r18
    1ae6:	0f 90       	pop	r0
    1ae8:	0f be       	out	0x3f, r0	; 63
    1aea:	0f 90       	pop	r0
    1aec:	1f 90       	pop	r1
    1aee:	18 95       	reti

00001af0 <__TIMER_CTC_setISRCallBackFuncPointer>:

    /*** Description:-
     * Used to Set the Global Pointer with desired function which will be called by ISR 
     * Func Arg: Pass the desired function Name */
    void __TIMER_CTC_setISRCallBackFuncPointer(uint8 timer_module, void (*ptr_to_func)(void))
    {
    1af0:	df 93       	push	r29
    1af2:	cf 93       	push	r28
    1af4:	00 d0       	rcall	.+0      	; 0x1af6 <__TIMER_CTC_setISRCallBackFuncPointer+0x6>
    1af6:	00 d0       	rcall	.+0      	; 0x1af8 <__TIMER_CTC_setISRCallBackFuncPointer+0x8>
    1af8:	0f 92       	push	r0
    1afa:	cd b7       	in	r28, 0x3d	; 61
    1afc:	de b7       	in	r29, 0x3e	; 62
    1afe:	89 83       	std	Y+1, r24	; 0x01
    1b00:	7b 83       	std	Y+3, r23	; 0x03
    1b02:	6a 83       	std	Y+2, r22	; 0x02
        switch(timer_module)
    1b04:	89 81       	ldd	r24, Y+1	; 0x01
    1b06:	28 2f       	mov	r18, r24
    1b08:	30 e0       	ldi	r19, 0x00	; 0
    1b0a:	3d 83       	std	Y+5, r19	; 0x05
    1b0c:	2c 83       	std	Y+4, r18	; 0x04
    1b0e:	8c 81       	ldd	r24, Y+4	; 0x04
    1b10:	9d 81       	ldd	r25, Y+5	; 0x05
    1b12:	00 97       	sbiw	r24, 0x00	; 0
    1b14:	31 f0       	breq	.+12     	; 0x1b22 <__TIMER_CTC_setISRCallBackFuncPointer+0x32>
    1b16:	2c 81       	ldd	r18, Y+4	; 0x04
    1b18:	3d 81       	ldd	r19, Y+5	; 0x05
    1b1a:	21 30       	cpi	r18, 0x01	; 1
    1b1c:	31 05       	cpc	r19, r1
    1b1e:	41 f0       	breq	.+16     	; 0x1b30 <__TIMER_CTC_setISRCallBackFuncPointer+0x40>
    1b20:	0d c0       	rjmp	.+26     	; 0x1b3c <__TIMER_CTC_setISRCallBackFuncPointer+0x4c>
        {
            case TIMER0:
                g_TIMER0_callBack_ptr = ptr_to_func;
    1b22:	8a 81       	ldd	r24, Y+2	; 0x02
    1b24:	9b 81       	ldd	r25, Y+3	; 0x03
    1b26:	90 93 86 00 	sts	0x0086, r25
    1b2a:	80 93 85 00 	sts	0x0085, r24
    1b2e:	06 c0       	rjmp	.+12     	; 0x1b3c <__TIMER_CTC_setISRCallBackFuncPointer+0x4c>
            break;

            case TIMER1:
                g_TIMER1_callBack_ptr = ptr_to_func;
    1b30:	8a 81       	ldd	r24, Y+2	; 0x02
    1b32:	9b 81       	ldd	r25, Y+3	; 0x03
    1b34:	90 93 88 00 	sts	0x0088, r25
    1b38:	80 93 87 00 	sts	0x0087, r24
            break;

            case TIMER2:break;
            default:break;
        }
    }
    1b3c:	0f 90       	pop	r0
    1b3e:	0f 90       	pop	r0
    1b40:	0f 90       	pop	r0
    1b42:	0f 90       	pop	r0
    1b44:	0f 90       	pop	r0
    1b46:	cf 91       	pop	r28
    1b48:	df 91       	pop	r29
    1b4a:	08 95       	ret

00001b4c <__TIMER_CTC_startTimer>:

/*** Description:-
 * Used to Start the Timer with the desired Configuration
 * Func Args, struct Members: timer_clock / compare_value / OC0_mode */
void __TIMER_CTC_startTimer(const configType_TIMER *t_configPointer)
{
    1b4c:	df 93       	push	r29
    1b4e:	cf 93       	push	r28
    1b50:	00 d0       	rcall	.+0      	; 0x1b52 <__TIMER_CTC_startTimer+0x6>
    1b52:	00 d0       	rcall	.+0      	; 0x1b54 <__TIMER_CTC_startTimer+0x8>
    1b54:	cd b7       	in	r28, 0x3d	; 61
    1b56:	de b7       	in	r29, 0x3e	; 62
    1b58:	9a 83       	std	Y+2, r25	; 0x02
    1b5a:	89 83       	std	Y+1, r24	; 0x01
    switch(t_configPointer->timer_module)
    1b5c:	e9 81       	ldd	r30, Y+1	; 0x01
    1b5e:	fa 81       	ldd	r31, Y+2	; 0x02
    1b60:	80 81       	ld	r24, Z
    1b62:	28 2f       	mov	r18, r24
    1b64:	30 e0       	ldi	r19, 0x00	; 0
    1b66:	3c 83       	std	Y+4, r19	; 0x04
    1b68:	2b 83       	std	Y+3, r18	; 0x03
    1b6a:	8b 81       	ldd	r24, Y+3	; 0x03
    1b6c:	9c 81       	ldd	r25, Y+4	; 0x04
    1b6e:	00 97       	sbiw	r24, 0x00	; 0
    1b70:	39 f0       	breq	.+14     	; 0x1b80 <__TIMER_CTC_startTimer+0x34>
    1b72:	2b 81       	ldd	r18, Y+3	; 0x03
    1b74:	3c 81       	ldd	r19, Y+4	; 0x04
    1b76:	21 30       	cpi	r18, 0x01	; 1
    1b78:	31 05       	cpc	r19, r1
    1b7a:	09 f4       	brne	.+2      	; 0x1b7e <__TIMER_CTC_startTimer+0x32>
    1b7c:	57 c0       	rjmp	.+174    	; 0x1c2c <__TIMER_CTC_startTimer+0xe0>
    1b7e:	bf c0       	rjmp	.+382    	; 0x1cfe <__TIMER_CTC_startTimer+0x1b2>
    {
        case TIMER0:
            /*Disable Global Interrupt flag; Entering Critical Section*/
             DIS_GLOBAL_INTERRUPT;
    1b80:	af e5       	ldi	r26, 0x5F	; 95
    1b82:	b0 e0       	ldi	r27, 0x00	; 0
    1b84:	ef e5       	ldi	r30, 0x5F	; 95
    1b86:	f0 e0       	ldi	r31, 0x00	; 0
    1b88:	80 81       	ld	r24, Z
    1b8a:	8f 77       	andi	r24, 0x7F	; 127
    1b8c:	8c 93       	st	X, r24
            /*Initialize the TCNT0 with 0 Value*/
            TCNT0 = 0x00;
    1b8e:	e2 e5       	ldi	r30, 0x52	; 82
    1b90:	f0 e0       	ldi	r31, 0x00	; 0
    1b92:	10 82       	st	Z, r1
            /*Set Compare Register with compare value*/
            OCR0 = t_configPointer->compare_value;
    1b94:	ac e5       	ldi	r26, 0x5C	; 92
    1b96:	b0 e0       	ldi	r27, 0x00	; 0
    1b98:	e9 81       	ldd	r30, Y+1	; 0x01
    1b9a:	fa 81       	ldd	r31, Y+2	; 0x02
    1b9c:	82 81       	ldd	r24, Z+2	; 0x02
    1b9e:	93 81       	ldd	r25, Z+3	; 0x03
    1ba0:	8c 93       	st	X, r24
            /*Set Timer in Non PWM Mode*/
            SET_BIT(TCCR0, FOC0);
    1ba2:	a3 e5       	ldi	r26, 0x53	; 83
    1ba4:	b0 e0       	ldi	r27, 0x00	; 0
    1ba6:	e3 e5       	ldi	r30, 0x53	; 83
    1ba8:	f0 e0       	ldi	r31, 0x00	; 0
    1baa:	80 81       	ld	r24, Z
    1bac:	80 68       	ori	r24, 0x80	; 128
    1bae:	8c 93       	st	X, r24
            /*Set The timer in CTC Mode: WGM00=0 / WGM01 = 1*/
            CLR_BIT(TCCR0, WGM00);
    1bb0:	a3 e5       	ldi	r26, 0x53	; 83
    1bb2:	b0 e0       	ldi	r27, 0x00	; 0
    1bb4:	e3 e5       	ldi	r30, 0x53	; 83
    1bb6:	f0 e0       	ldi	r31, 0x00	; 0
    1bb8:	80 81       	ld	r24, Z
    1bba:	8f 7b       	andi	r24, 0xBF	; 191
    1bbc:	8c 93       	st	X, r24
            SET_BIT(TCCR0, WGM01);
    1bbe:	a3 e5       	ldi	r26, 0x53	; 83
    1bc0:	b0 e0       	ldi	r27, 0x00	; 0
    1bc2:	e3 e5       	ldi	r30, 0x53	; 83
    1bc4:	f0 e0       	ldi	r31, 0x00	; 0
    1bc6:	80 81       	ld	r24, Z
    1bc8:	88 60       	ori	r24, 0x08	; 8
    1bca:	8c 93       	st	X, r24
            /*Enable Module Timer 0 Interrupt flag; if OC0 Pin is Disabled*/
            #if(TIMER_OCx_PIN == DISABLED)
                SET_BIT(TIMSK, OCIE0);
    1bcc:	a9 e5       	ldi	r26, 0x59	; 89
    1bce:	b0 e0       	ldi	r27, 0x00	; 0
    1bd0:	e9 e5       	ldi	r30, 0x59	; 89
    1bd2:	f0 e0       	ldi	r31, 0x00	; 0
    1bd4:	80 81       	ld	r24, Z
    1bd6:	82 60       	ori	r24, 0x02	; 2
    1bd8:	8c 93       	st	X, r24
                CLR_BIT(TIMSK, OCIE0);
                /*Set OC0 as Output Pin*/
                SET_BIT(DDRB, PB3);
            #endif
            /*Set Compare Output Mode, non-PWM Mode Pins*/
            TCCR0 = (TCCR0&0b11001111) | (t_configPointer->OCx_mode<<4);
    1bda:	a3 e5       	ldi	r26, 0x53	; 83
    1bdc:	b0 e0       	ldi	r27, 0x00	; 0
    1bde:	e3 e5       	ldi	r30, 0x53	; 83
    1be0:	f0 e0       	ldi	r31, 0x00	; 0
    1be2:	80 81       	ld	r24, Z
    1be4:	28 2f       	mov	r18, r24
    1be6:	2f 7c       	andi	r18, 0xCF	; 207
    1be8:	e9 81       	ldd	r30, Y+1	; 0x01
    1bea:	fa 81       	ldd	r31, Y+2	; 0x02
    1bec:	84 81       	ldd	r24, Z+4	; 0x04
    1bee:	88 2f       	mov	r24, r24
    1bf0:	90 e0       	ldi	r25, 0x00	; 0
    1bf2:	82 95       	swap	r24
    1bf4:	92 95       	swap	r25
    1bf6:	90 7f       	andi	r25, 0xF0	; 240
    1bf8:	98 27       	eor	r25, r24
    1bfa:	80 7f       	andi	r24, 0xF0	; 240
    1bfc:	98 27       	eor	r25, r24
    1bfe:	82 2b       	or	r24, r18
    1c00:	8c 93       	st	X, r24
            /*Set the Timer Clock Prescaler*/
            TCCR0 = (TCCR0&0xF8) | (t_configPointer->timer_clock&0x07);
    1c02:	a3 e5       	ldi	r26, 0x53	; 83
    1c04:	b0 e0       	ldi	r27, 0x00	; 0
    1c06:	e3 e5       	ldi	r30, 0x53	; 83
    1c08:	f0 e0       	ldi	r31, 0x00	; 0
    1c0a:	80 81       	ld	r24, Z
    1c0c:	98 2f       	mov	r25, r24
    1c0e:	98 7f       	andi	r25, 0xF8	; 248
    1c10:	e9 81       	ldd	r30, Y+1	; 0x01
    1c12:	fa 81       	ldd	r31, Y+2	; 0x02
    1c14:	81 81       	ldd	r24, Z+1	; 0x01
    1c16:	87 70       	andi	r24, 0x07	; 7
    1c18:	89 2b       	or	r24, r25
    1c1a:	8c 93       	st	X, r24
            /*Enable Global Interrupt flag; Exiting Critical Section*/
            EN_GLOBAL_INTERRUPT;
    1c1c:	af e5       	ldi	r26, 0x5F	; 95
    1c1e:	b0 e0       	ldi	r27, 0x00	; 0
    1c20:	ef e5       	ldi	r30, 0x5F	; 95
    1c22:	f0 e0       	ldi	r31, 0x00	; 0
    1c24:	80 81       	ld	r24, Z
    1c26:	80 68       	ori	r24, 0x80	; 128
    1c28:	8c 93       	st	X, r24
    1c2a:	69 c0       	rjmp	.+210    	; 0x1cfe <__TIMER_CTC_startTimer+0x1b2>
        break;

        case TIMER1:
            /*Disable Global Interrupt flag; Entering Critical Section*/
            DIS_GLOBAL_INTERRUPT;
    1c2c:	af e5       	ldi	r26, 0x5F	; 95
    1c2e:	b0 e0       	ldi	r27, 0x00	; 0
    1c30:	ef e5       	ldi	r30, 0x5F	; 95
    1c32:	f0 e0       	ldi	r31, 0x00	; 0
    1c34:	80 81       	ld	r24, Z
    1c36:	8f 77       	andi	r24, 0x7F	; 127
    1c38:	8c 93       	st	X, r24
            /*Initialize the TCNT0 with 0 Value*/
            TCNT1 = 0x0000;
    1c3a:	ec e4       	ldi	r30, 0x4C	; 76
    1c3c:	f0 e0       	ldi	r31, 0x00	; 0
    1c3e:	11 82       	std	Z+1, r1	; 0x01
    1c40:	10 82       	st	Z, r1
            /*Set Compare Register with compare value*/
            OCR1A = t_configPointer->compare_value;
    1c42:	aa e4       	ldi	r26, 0x4A	; 74
    1c44:	b0 e0       	ldi	r27, 0x00	; 0
    1c46:	e9 81       	ldd	r30, Y+1	; 0x01
    1c48:	fa 81       	ldd	r31, Y+2	; 0x02
    1c4a:	82 81       	ldd	r24, Z+2	; 0x02
    1c4c:	93 81       	ldd	r25, Z+3	; 0x03
    1c4e:	11 96       	adiw	r26, 0x01	; 1
    1c50:	9c 93       	st	X, r25
    1c52:	8e 93       	st	-X, r24
            /*Set Timer in Non PWM Mode*/
            SET_BIT(TCCR1A, FOC1A);
    1c54:	af e4       	ldi	r26, 0x4F	; 79
    1c56:	b0 e0       	ldi	r27, 0x00	; 0
    1c58:	ef e4       	ldi	r30, 0x4F	; 79
    1c5a:	f0 e0       	ldi	r31, 0x00	; 0
    1c5c:	80 81       	ld	r24, Z
    1c5e:	88 60       	ori	r24, 0x08	; 8
    1c60:	8c 93       	st	X, r24
            /*Set The timer in CTC Mode*/
            CLR_BIT(TCCR1A, WGM10);
    1c62:	af e4       	ldi	r26, 0x4F	; 79
    1c64:	b0 e0       	ldi	r27, 0x00	; 0
    1c66:	ef e4       	ldi	r30, 0x4F	; 79
    1c68:	f0 e0       	ldi	r31, 0x00	; 0
    1c6a:	80 81       	ld	r24, Z
    1c6c:	8e 7f       	andi	r24, 0xFE	; 254
    1c6e:	8c 93       	st	X, r24
            CLR_BIT(TCCR1A, WGM11);
    1c70:	af e4       	ldi	r26, 0x4F	; 79
    1c72:	b0 e0       	ldi	r27, 0x00	; 0
    1c74:	ef e4       	ldi	r30, 0x4F	; 79
    1c76:	f0 e0       	ldi	r31, 0x00	; 0
    1c78:	80 81       	ld	r24, Z
    1c7a:	8d 7f       	andi	r24, 0xFD	; 253
    1c7c:	8c 93       	st	X, r24
            SET_BIT(TCCR1B, WGM12);
    1c7e:	ae e4       	ldi	r26, 0x4E	; 78
    1c80:	b0 e0       	ldi	r27, 0x00	; 0
    1c82:	ee e4       	ldi	r30, 0x4E	; 78
    1c84:	f0 e0       	ldi	r31, 0x00	; 0
    1c86:	80 81       	ld	r24, Z
    1c88:	88 60       	ori	r24, 0x08	; 8
    1c8a:	8c 93       	st	X, r24
            CLR_BIT(TCCR1B, WGM13);
    1c8c:	ae e4       	ldi	r26, 0x4E	; 78
    1c8e:	b0 e0       	ldi	r27, 0x00	; 0
    1c90:	ee e4       	ldi	r30, 0x4E	; 78
    1c92:	f0 e0       	ldi	r31, 0x00	; 0
    1c94:	80 81       	ld	r24, Z
    1c96:	8f 7e       	andi	r24, 0xEF	; 239
    1c98:	8c 93       	st	X, r24
            /*Enable Module Timer 0 Interrupt flag; if OC0 Pin is Disabled*/
            #if(TIMER_OCx_PIN == DISABLED)
                /*Enable Interrupt Enable Module*/
                SET_BIT(TIMSK, OCIE1A);
    1c9a:	a9 e5       	ldi	r26, 0x59	; 89
    1c9c:	b0 e0       	ldi	r27, 0x00	; 0
    1c9e:	e9 e5       	ldi	r30, 0x59	; 89
    1ca0:	f0 e0       	ldi	r31, 0x00	; 0
    1ca2:	80 81       	ld	r24, Z
    1ca4:	80 61       	ori	r24, 0x10	; 16
    1ca6:	8c 93       	st	X, r24
                CLR_BIT(TIMSK, OCIE1A);
                /*Set OC0 as Output Pin*/
                SET_BIT(DDRD, PD5);
            #endif
            /*Set Compare Output Mode [non-PWM Mode] Pins*/
            TCCR1A = (TCCR1A&0b00111111) | (t_configPointer->OCx_mode<<6);
    1ca8:	af e4       	ldi	r26, 0x4F	; 79
    1caa:	b0 e0       	ldi	r27, 0x00	; 0
    1cac:	ef e4       	ldi	r30, 0x4F	; 79
    1cae:	f0 e0       	ldi	r31, 0x00	; 0
    1cb0:	80 81       	ld	r24, Z
    1cb2:	28 2f       	mov	r18, r24
    1cb4:	2f 73       	andi	r18, 0x3F	; 63
    1cb6:	e9 81       	ldd	r30, Y+1	; 0x01
    1cb8:	fa 81       	ldd	r31, Y+2	; 0x02
    1cba:	84 81       	ldd	r24, Z+4	; 0x04
    1cbc:	88 2f       	mov	r24, r24
    1cbe:	90 e0       	ldi	r25, 0x00	; 0
    1cc0:	00 24       	eor	r0, r0
    1cc2:	96 95       	lsr	r25
    1cc4:	87 95       	ror	r24
    1cc6:	07 94       	ror	r0
    1cc8:	96 95       	lsr	r25
    1cca:	87 95       	ror	r24
    1ccc:	07 94       	ror	r0
    1cce:	98 2f       	mov	r25, r24
    1cd0:	80 2d       	mov	r24, r0
    1cd2:	82 2b       	or	r24, r18
    1cd4:	8c 93       	st	X, r24
            /*Set the Timer Clock Prescaler*/
            TCCR1B = (TCCR1B&0xF8) | (t_configPointer->timer_clock&0x07);
    1cd6:	ae e4       	ldi	r26, 0x4E	; 78
    1cd8:	b0 e0       	ldi	r27, 0x00	; 0
    1cda:	ee e4       	ldi	r30, 0x4E	; 78
    1cdc:	f0 e0       	ldi	r31, 0x00	; 0
    1cde:	80 81       	ld	r24, Z
    1ce0:	98 2f       	mov	r25, r24
    1ce2:	98 7f       	andi	r25, 0xF8	; 248
    1ce4:	e9 81       	ldd	r30, Y+1	; 0x01
    1ce6:	fa 81       	ldd	r31, Y+2	; 0x02
    1ce8:	81 81       	ldd	r24, Z+1	; 0x01
    1cea:	87 70       	andi	r24, 0x07	; 7
    1cec:	89 2b       	or	r24, r25
    1cee:	8c 93       	st	X, r24
            /*Enable Global Interrupt flag; Exiting Critical Section*/
            EN_GLOBAL_INTERRUPT;        
    1cf0:	af e5       	ldi	r26, 0x5F	; 95
    1cf2:	b0 e0       	ldi	r27, 0x00	; 0
    1cf4:	ef e5       	ldi	r30, 0x5F	; 95
    1cf6:	f0 e0       	ldi	r31, 0x00	; 0
    1cf8:	80 81       	ld	r24, Z
    1cfa:	80 68       	ori	r24, 0x80	; 128
    1cfc:	8c 93       	st	X, r24
        default:break;
    }



}
    1cfe:	0f 90       	pop	r0
    1d00:	0f 90       	pop	r0
    1d02:	0f 90       	pop	r0
    1d04:	0f 90       	pop	r0
    1d06:	cf 91       	pop	r28
    1d08:	df 91       	pop	r29
    1d0a:	08 95       	ret

00001d0c <__TIMER_CTC_stopTimer>:


/*** Description:-
 * Used to Disable the timer */
void __TIMER_CTC_stopTimer(uint8 timer_module)
{
    1d0c:	df 93       	push	r29
    1d0e:	cf 93       	push	r28
    1d10:	00 d0       	rcall	.+0      	; 0x1d12 <__TIMER_CTC_stopTimer+0x6>
    1d12:	0f 92       	push	r0
    1d14:	cd b7       	in	r28, 0x3d	; 61
    1d16:	de b7       	in	r29, 0x3e	; 62
    1d18:	89 83       	std	Y+1, r24	; 0x01
    switch(timer_module)
    1d1a:	89 81       	ldd	r24, Y+1	; 0x01
    1d1c:	28 2f       	mov	r18, r24
    1d1e:	30 e0       	ldi	r19, 0x00	; 0
    1d20:	3b 83       	std	Y+3, r19	; 0x03
    1d22:	2a 83       	std	Y+2, r18	; 0x02
    1d24:	8a 81       	ldd	r24, Y+2	; 0x02
    1d26:	9b 81       	ldd	r25, Y+3	; 0x03
    1d28:	00 97       	sbiw	r24, 0x00	; 0
    1d2a:	31 f0       	breq	.+12     	; 0x1d38 <__TIMER_CTC_stopTimer+0x2c>
    1d2c:	2a 81       	ldd	r18, Y+2	; 0x02
    1d2e:	3b 81       	ldd	r19, Y+3	; 0x03
    1d30:	21 30       	cpi	r18, 0x01	; 1
    1d32:	31 05       	cpc	r19, r1
    1d34:	d1 f0       	breq	.+52     	; 0x1d6a <__TIMER_CTC_stopTimer+0x5e>
    1d36:	34 c0       	rjmp	.+104    	; 0x1da0 <__TIMER_CTC_stopTimer+0x94>
    {
        case TIMER0:
            /*Disable Global Interrupt flag; Exiting Critical Section*/
            DIS_GLOBAL_INTERRUPT;
    1d38:	af e5       	ldi	r26, 0x5F	; 95
    1d3a:	b0 e0       	ldi	r27, 0x00	; 0
    1d3c:	ef e5       	ldi	r30, 0x5F	; 95
    1d3e:	f0 e0       	ldi	r31, 0x00	; 0
    1d40:	80 81       	ld	r24, Z
    1d42:	8f 77       	andi	r24, 0x7F	; 127
    1d44:	8c 93       	st	X, r24
            /*Disable Timer Clock Source: will Disable the Timer itself*/
            TCCR0 = 0x00;
    1d46:	e3 e5       	ldi	r30, 0x53	; 83
    1d48:	f0 e0       	ldi	r31, 0x00	; 0
    1d4a:	10 82       	st	Z, r1
            /*for double confirming disable module interrupt flag*/
            CLR_BIT(TIMSK, OCIE0);    //TIMSK &= ~(1<<OCIE0);
    1d4c:	a9 e5       	ldi	r26, 0x59	; 89
    1d4e:	b0 e0       	ldi	r27, 0x00	; 0
    1d50:	e9 e5       	ldi	r30, 0x59	; 89
    1d52:	f0 e0       	ldi	r31, 0x00	; 0
    1d54:	80 81       	ld	r24, Z
    1d56:	8d 7f       	andi	r24, 0xFD	; 253
    1d58:	8c 93       	st	X, r24
            /*Enable Global Interrupt flag; Exiting Critical Section*/
            EN_GLOBAL_INTERRUPT;
    1d5a:	af e5       	ldi	r26, 0x5F	; 95
    1d5c:	b0 e0       	ldi	r27, 0x00	; 0
    1d5e:	ef e5       	ldi	r30, 0x5F	; 95
    1d60:	f0 e0       	ldi	r31, 0x00	; 0
    1d62:	80 81       	ld	r24, Z
    1d64:	80 68       	ori	r24, 0x80	; 128
    1d66:	8c 93       	st	X, r24
    1d68:	1b c0       	rjmp	.+54     	; 0x1da0 <__TIMER_CTC_stopTimer+0x94>
        break;

        case TIMER1:
            /*Disable Global Interrupt flag; Entering Critical Section*/
            DIS_GLOBAL_INTERRUPT;
    1d6a:	af e5       	ldi	r26, 0x5F	; 95
    1d6c:	b0 e0       	ldi	r27, 0x00	; 0
    1d6e:	ef e5       	ldi	r30, 0x5F	; 95
    1d70:	f0 e0       	ldi	r31, 0x00	; 0
    1d72:	80 81       	ld	r24, Z
    1d74:	8f 77       	andi	r24, 0x7F	; 127
    1d76:	8c 93       	st	X, r24
            /*Disable Timer Clock Source: will Disable the Timer itself*/
            TCCR1A = 0x00;
    1d78:	ef e4       	ldi	r30, 0x4F	; 79
    1d7a:	f0 e0       	ldi	r31, 0x00	; 0
    1d7c:	10 82       	st	Z, r1
            TCCR1B = 0x00;
    1d7e:	ee e4       	ldi	r30, 0x4E	; 78
    1d80:	f0 e0       	ldi	r31, 0x00	; 0
    1d82:	10 82       	st	Z, r1
            /*for double confirming disable module interrupt flag as well*/
            CLR_BIT(TIMSK, OCIE1A);
    1d84:	a9 e5       	ldi	r26, 0x59	; 89
    1d86:	b0 e0       	ldi	r27, 0x00	; 0
    1d88:	e9 e5       	ldi	r30, 0x59	; 89
    1d8a:	f0 e0       	ldi	r31, 0x00	; 0
    1d8c:	80 81       	ld	r24, Z
    1d8e:	8f 7e       	andi	r24, 0xEF	; 239
    1d90:	8c 93       	st	X, r24
            /*Enable Global Interrupt flag; Exiting Critical Section*/
            EN_GLOBAL_INTERRUPT;
    1d92:	af e5       	ldi	r26, 0x5F	; 95
    1d94:	b0 e0       	ldi	r27, 0x00	; 0
    1d96:	ef e5       	ldi	r30, 0x5F	; 95
    1d98:	f0 e0       	ldi	r31, 0x00	; 0
    1d9a:	80 81       	ld	r24, Z
    1d9c:	80 68       	ori	r24, 0x80	; 128
    1d9e:	8c 93       	st	X, r24
        break;

        case TIMER2:break;
        default:break;
    }
}
    1da0:	0f 90       	pop	r0
    1da2:	0f 90       	pop	r0
    1da4:	0f 90       	pop	r0
    1da6:	cf 91       	pop	r28
    1da8:	df 91       	pop	r29
    1daa:	08 95       	ret

00001dac <__udivmodsi4>:
    1dac:	a1 e2       	ldi	r26, 0x21	; 33
    1dae:	1a 2e       	mov	r1, r26
    1db0:	aa 1b       	sub	r26, r26
    1db2:	bb 1b       	sub	r27, r27
    1db4:	fd 01       	movw	r30, r26
    1db6:	0d c0       	rjmp	.+26     	; 0x1dd2 <__udivmodsi4_ep>

00001db8 <__udivmodsi4_loop>:
    1db8:	aa 1f       	adc	r26, r26
    1dba:	bb 1f       	adc	r27, r27
    1dbc:	ee 1f       	adc	r30, r30
    1dbe:	ff 1f       	adc	r31, r31
    1dc0:	a2 17       	cp	r26, r18
    1dc2:	b3 07       	cpc	r27, r19
    1dc4:	e4 07       	cpc	r30, r20
    1dc6:	f5 07       	cpc	r31, r21
    1dc8:	20 f0       	brcs	.+8      	; 0x1dd2 <__udivmodsi4_ep>
    1dca:	a2 1b       	sub	r26, r18
    1dcc:	b3 0b       	sbc	r27, r19
    1dce:	e4 0b       	sbc	r30, r20
    1dd0:	f5 0b       	sbc	r31, r21

00001dd2 <__udivmodsi4_ep>:
    1dd2:	66 1f       	adc	r22, r22
    1dd4:	77 1f       	adc	r23, r23
    1dd6:	88 1f       	adc	r24, r24
    1dd8:	99 1f       	adc	r25, r25
    1dda:	1a 94       	dec	r1
    1ddc:	69 f7       	brne	.-38     	; 0x1db8 <__udivmodsi4_loop>
    1dde:	60 95       	com	r22
    1de0:	70 95       	com	r23
    1de2:	80 95       	com	r24
    1de4:	90 95       	com	r25
    1de6:	9b 01       	movw	r18, r22
    1de8:	ac 01       	movw	r20, r24
    1dea:	bd 01       	movw	r22, r26
    1dec:	cf 01       	movw	r24, r30
    1dee:	08 95       	ret

00001df0 <_exit>:
    1df0:	f8 94       	cli

00001df2 <__stop_program>:
    1df2:	ff cf       	rjmp	.-2      	; 0x1df2 <__stop_program>
